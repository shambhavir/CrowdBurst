{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar FindAndModifyOperation = require('./find_and_modify');\n\nvar FindOneAndUpdateOperation = /*#__PURE__*/function (_FindAndModifyOperati) {\n  _inherits(FindOneAndUpdateOperation, _FindAndModifyOperati);\n\n  var _super = _createSuper(FindOneAndUpdateOperation);\n\n  function FindOneAndUpdateOperation(collection, filter, update, options) {\n    _classCallCheck(this, FindOneAndUpdateOperation);\n\n    // Final options\n    var finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new = typeof options.returnOriginal === 'boolean' ? !options.returnOriginal : false;\n    finalOptions.upsert = typeof options.upsert === 'boolean' ? options.upsert : false;\n    return _super.call(this, collection, filter, finalOptions.sort, update, finalOptions);\n  }\n\n  return FindOneAndUpdateOperation;\n}(FindAndModifyOperation);\n\nmodule.exports = FindOneAndUpdateOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/find_one_and_update.js"],"names":["FindAndModifyOperation","require","FindOneAndUpdateOperation","collection","filter","update","options","finalOptions","Object","assign","fields","projection","new","returnOriginal","upsert","sort","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,sBAAsB,GAAGC,OAAO,CAAC,mBAAD,CAAtC;;IAEMC,yB;;;;;AACJ,qCAAYC,UAAZ,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCC,OAAxC,EAAiD;AAAA;;AAC/C;AACA,QAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAArB;AACAC,IAAAA,YAAY,CAACG,MAAb,GAAsBJ,OAAO,CAACK,UAA9B;AACAJ,IAAAA,YAAY,CAACF,MAAb,GAAsB,IAAtB;AACAE,IAAAA,YAAY,CAACK,GAAb,GACE,OAAON,OAAO,CAACO,cAAf,KAAkC,SAAlC,GAA8C,CAACP,OAAO,CAACO,cAAvD,GAAwE,KAD1E;AAEAN,IAAAA,YAAY,CAACO,MAAb,GAAsB,OAAOR,OAAO,CAACQ,MAAf,KAA0B,SAA1B,GAAsCR,OAAO,CAACQ,MAA9C,GAAuD,KAA7E;AAP+C,6BASzCX,UATyC,EAS7BC,MAT6B,EASrBG,YAAY,CAACQ,IATQ,EASFV,MATE,EASME,YATN;AAUhD;;;EAXqCP,sB;;AAcxCgB,MAAM,CAACC,OAAP,GAAiBf,yBAAjB","sourcesContent":["'use strict';\n\nconst FindAndModifyOperation = require('./find_and_modify');\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    // Final options\n    const finalOptions = Object.assign({}, options);\n    finalOptions.fields = options.projection;\n    finalOptions.update = true;\n    finalOptions.new =\n      typeof options.returnOriginal === 'boolean' ? !options.returnOriginal : false;\n    finalOptions.upsert = typeof options.upsert === 'boolean' ? options.upsert : false;\n\n    super(collection, filter, finalOptions.sort, update, finalOptions);\n  }\n}\n\nmodule.exports = FindOneAndUpdateOperation;\n"]},"metadata":{},"sourceType":"script"}