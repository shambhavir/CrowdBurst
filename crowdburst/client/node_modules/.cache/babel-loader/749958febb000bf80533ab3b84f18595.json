{"ast":null,"code":"'use strict';\n/**\n * The base class for all monitoring events published from the connection pool\n *\n * @property {number} time A timestamp when the event was created\n * @property {string} address The address (host/port pair) of the pool\n */\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar ConnectionPoolMonitoringEvent = function ConnectionPoolMonitoringEvent(pool) {\n  _classCallCheck(this, ConnectionPoolMonitoringEvent);\n\n  this.time = new Date();\n  this.address = pool.address;\n};\n/**\n * An event published when a connection pool is created\n *\n * @property {Object} options The options used to create this connection pool\n */\n\n\nvar ConnectionPoolCreatedEvent = /*#__PURE__*/function (_ConnectionPoolMonito) {\n  _inherits(ConnectionPoolCreatedEvent, _ConnectionPoolMonito);\n\n  var _super = _createSuper(ConnectionPoolCreatedEvent);\n\n  function ConnectionPoolCreatedEvent(pool) {\n    var _this;\n\n    _classCallCheck(this, ConnectionPoolCreatedEvent);\n\n    _this = _super.call(this, pool);\n    _this.options = pool.options;\n    return _this;\n  }\n\n  return ConnectionPoolCreatedEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a connection pool is closed\n */\n\n\nvar ConnectionPoolClosedEvent = /*#__PURE__*/function (_ConnectionPoolMonito2) {\n  _inherits(ConnectionPoolClosedEvent, _ConnectionPoolMonito2);\n\n  var _super2 = _createSuper(ConnectionPoolClosedEvent);\n\n  function ConnectionPoolClosedEvent(pool) {\n    _classCallCheck(this, ConnectionPoolClosedEvent);\n\n    return _super2.call(this, pool);\n  }\n\n  return ConnectionPoolClosedEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a connection pool creates a new connection\n *\n * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection\n */\n\n\nvar ConnectionCreatedEvent = /*#__PURE__*/function (_ConnectionPoolMonito3) {\n  _inherits(ConnectionCreatedEvent, _ConnectionPoolMonito3);\n\n  var _super3 = _createSuper(ConnectionCreatedEvent);\n\n  function ConnectionCreatedEvent(pool, connection) {\n    var _this2;\n\n    _classCallCheck(this, ConnectionCreatedEvent);\n\n    _this2 = _super3.call(this, pool);\n    _this2.connectionId = connection.id;\n    return _this2;\n  }\n\n  return ConnectionCreatedEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a connection is ready for use\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nvar ConnectionReadyEvent = /*#__PURE__*/function (_ConnectionPoolMonito4) {\n  _inherits(ConnectionReadyEvent, _ConnectionPoolMonito4);\n\n  var _super4 = _createSuper(ConnectionReadyEvent);\n\n  function ConnectionReadyEvent(pool, connection) {\n    var _this3;\n\n    _classCallCheck(this, ConnectionReadyEvent);\n\n    _this3 = _super4.call(this, pool);\n    _this3.connectionId = connection.id;\n    return _this3;\n  }\n\n  return ConnectionReadyEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a connection is closed\n *\n * @property {number} connectionId The id of the connection\n * @property {string} reason The reason the connection was closed\n */\n\n\nvar ConnectionClosedEvent = /*#__PURE__*/function (_ConnectionPoolMonito5) {\n  _inherits(ConnectionClosedEvent, _ConnectionPoolMonito5);\n\n  var _super5 = _createSuper(ConnectionClosedEvent);\n\n  function ConnectionClosedEvent(pool, connection, reason) {\n    var _this4;\n\n    _classCallCheck(this, ConnectionClosedEvent);\n\n    _this4 = _super5.call(this, pool);\n    _this4.connectionId = connection.id;\n    _this4.reason = reason || 'unknown';\n    return _this4;\n  }\n\n  return ConnectionClosedEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a request to check a connection out begins\n */\n\n\nvar ConnectionCheckOutStartedEvent = /*#__PURE__*/function (_ConnectionPoolMonito6) {\n  _inherits(ConnectionCheckOutStartedEvent, _ConnectionPoolMonito6);\n\n  var _super6 = _createSuper(ConnectionCheckOutStartedEvent);\n\n  function ConnectionCheckOutStartedEvent(pool) {\n    _classCallCheck(this, ConnectionCheckOutStartedEvent);\n\n    return _super6.call(this, pool);\n  }\n\n  return ConnectionCheckOutStartedEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a request to check a connection out fails\n *\n * @property {string} reason The reason the attempt to check out failed\n */\n\n\nvar ConnectionCheckOutFailedEvent = /*#__PURE__*/function (_ConnectionPoolMonito7) {\n  _inherits(ConnectionCheckOutFailedEvent, _ConnectionPoolMonito7);\n\n  var _super7 = _createSuper(ConnectionCheckOutFailedEvent);\n\n  function ConnectionCheckOutFailedEvent(pool, reason) {\n    var _this5;\n\n    _classCallCheck(this, ConnectionCheckOutFailedEvent);\n\n    _this5 = _super7.call(this, pool);\n    _this5.reason = reason;\n    return _this5;\n  }\n\n  return ConnectionCheckOutFailedEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a connection is checked out of the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nvar ConnectionCheckedOutEvent = /*#__PURE__*/function (_ConnectionPoolMonito8) {\n  _inherits(ConnectionCheckedOutEvent, _ConnectionPoolMonito8);\n\n  var _super8 = _createSuper(ConnectionCheckedOutEvent);\n\n  function ConnectionCheckedOutEvent(pool, connection) {\n    var _this6;\n\n    _classCallCheck(this, ConnectionCheckedOutEvent);\n\n    _this6 = _super8.call(this, pool);\n    _this6.connectionId = connection.id;\n    return _this6;\n  }\n\n  return ConnectionCheckedOutEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a connection is checked into the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\n\n\nvar ConnectionCheckedInEvent = /*#__PURE__*/function (_ConnectionPoolMonito9) {\n  _inherits(ConnectionCheckedInEvent, _ConnectionPoolMonito9);\n\n  var _super9 = _createSuper(ConnectionCheckedInEvent);\n\n  function ConnectionCheckedInEvent(pool, connection) {\n    var _this7;\n\n    _classCallCheck(this, ConnectionCheckedInEvent);\n\n    _this7 = _super9.call(this, pool);\n    _this7.connectionId = connection.id;\n    return _this7;\n  }\n\n  return ConnectionCheckedInEvent;\n}(ConnectionPoolMonitoringEvent);\n/**\n * An event published when a connection pool is cleared\n */\n\n\nvar ConnectionPoolClearedEvent = /*#__PURE__*/function (_ConnectionPoolMonito10) {\n  _inherits(ConnectionPoolClearedEvent, _ConnectionPoolMonito10);\n\n  var _super10 = _createSuper(ConnectionPoolClearedEvent);\n\n  function ConnectionPoolClearedEvent(pool) {\n    _classCallCheck(this, ConnectionPoolClearedEvent);\n\n    return _super10.call(this, pool);\n  }\n\n  return ConnectionPoolClearedEvent;\n}(ConnectionPoolMonitoringEvent);\n\nvar CMAP_EVENT_NAMES = ['connectionPoolCreated', 'connectionPoolClosed', 'connectionCreated', 'connectionReady', 'connectionClosed', 'connectionCheckOutStarted', 'connectionCheckOutFailed', 'connectionCheckedOut', 'connectionCheckedIn', 'connectionPoolCleared'];\nmodule.exports = {\n  CMAP_EVENT_NAMES: CMAP_EVENT_NAMES,\n  ConnectionPoolCreatedEvent: ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent: ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent: ConnectionCreatedEvent,\n  ConnectionReadyEvent: ConnectionReadyEvent,\n  ConnectionClosedEvent: ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent: ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent: ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent: ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent: ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent: ConnectionPoolClearedEvent\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/cmap/events.js"],"names":["ConnectionPoolMonitoringEvent","pool","time","Date","address","ConnectionPoolCreatedEvent","options","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","CMAP_EVENT_NAMES","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * The base class for all monitoring events published from the connection pool\n *\n * @property {number} time A timestamp when the event was created\n * @property {string} address The address (host/port pair) of the pool\n */\nclass ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n *\n * @property {Object} options The options used to create this connection pool\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n *\n * @property {number} connectionId A monotonically increasing, per-pool id for the newly created connection\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n *\n * @property {number} connectionId The id of the connection\n * @property {string} reason The reason the connection was closed\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n *\n * @property {string} reason The reason the attempt to check out failed\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n *\n * @property {number} connectionId The id of the connection\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  constructor(pool) {\n    super(pool);\n  }\n}\n\nconst CMAP_EVENT_NAMES = [\n  'connectionPoolCreated',\n  'connectionPoolClosed',\n  'connectionCreated',\n  'connectionReady',\n  'connectionClosed',\n  'connectionCheckOutStarted',\n  'connectionCheckOutFailed',\n  'connectionCheckedOut',\n  'connectionCheckedIn',\n  'connectionPoolCleared'\n];\n\nmodule.exports = {\n  CMAP_EVENT_NAMES,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionReadyEvent,\n  ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent\n};\n"]},"metadata":{},"sourceType":"script"}