{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/App.js\";\nimport React, { Component } from 'react';\n\nconst MongoClient = require('mongodb').MongoClient;\n\nconst uri = 'mongodb+srv://shambhavir:s8uxeaQZcw@S-Px@cluster0-xrzxq.mongodb.net/test?authSource=admin&replicaSet=Cluster0-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true'; // MongoClient.connect('mongodb+srv://shambhavir:s8uxeaQZcw@S-Px@cluster0-xrzxq.mongodb.net/test?authSource=admin&replicaSet=Cluster0-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true', {useUnifiedTopology: true})\n\nMongoClient.connect(uri, {\n  useNewUrlParser: true\n}, function (err, client) {\n  if (err) {//error\n  } else {\n    var collection = client.db('test').collection('devices');\n    collection.update(); //client.close() should be called after you are done performing actions such as collection.update, etc.\n  }\n});\n\nclass MyForm extends React.Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.target); // const db = data.db('reviews'); \n\n    fetch('/api/form-submit-url', {\n      method: 'POST',\n      body: data\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Enter username\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"username\",\n      name: \"username\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Enter your email\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"email\",\n      name: \"email\",\n      type: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"birthdate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, \"Enter your birth date\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"birthdate\",\n      name: \"birthdate\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, \"Send data!\"));\n  }\n\n}\n\nexport default MyForm;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/App.js"],"names":["React","Component","MongoClient","require","uri","connect","useNewUrlParser","err","client","collection","db","update","MyForm","constructor","handleSubmit","bind","event","preventDefault","data","FormData","target","fetch","method","body","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,WAAvC;;AACA,MAAME,GAAG,GAAG,iLAAZ,C,CACA;;AAGAF,WAAW,CAACG,OAAZ,CAAoBD,GAApB,EAAyB;AAAEE,EAAAA,eAAe,EAAE;AAAnB,CAAzB,EAAoD,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAExE,MAAID,GAAJ,EAAS,CAEH;AAEL,GAJD,MAIO;AAED,QAAIE,UAAU,GAAGD,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkBD,UAAlB,CAA6B,SAA7B,CAAjB;AACAA,IAAAA,UAAU,CAACE,MAAX,GAHC,CAID;AAEL;AACF,CAbD;;AAeA,MAAMC,MAAN,SAAqBZ,KAAK,CAACC,SAA3B,CAAqC;AACnCY,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAKGD,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,KAAK,CAACI,MAAnB,CAAb,CAFkB,CAGlB;;AACAC,IAAAA,KAAK,CAAC,sBAAD,EAAyB;AAC5BC,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,IAAI,EAAEL;AAFsB,KAAzB,CAAL;AAID;;AAMLM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,QAAQ,EAAE,KAAKV,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAO,MAAA,EAAE,EAAC,UAAV;AAAqB,MAAA,IAAI,EAAC,UAA1B;AAAqC,MAAA,IAAI,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAIE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJF,eAKE;AAAO,MAAA,EAAE,EAAC,OAAV;AAAkB,MAAA,IAAI,EAAC,OAAvB;AAA+B,MAAA,IAAI,EAAC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAOE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAPF,eAQE;AAAO,MAAA,EAAE,EAAC,WAAV;AAAsB,MAAA,IAAI,EAAC,WAA3B;AAAuC,MAAA,IAAI,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,CADF;AAcD;;AAtCkC;;AAwCrC,eAAeF,MAAf","sourcesContent":["import React, {Component} from 'react'; \nconst MongoClient = require('mongodb').MongoClient\nconst uri = 'mongodb+srv://shambhavir:s8uxeaQZcw@S-Px@cluster0-xrzxq.mongodb.net/test?authSource=admin&replicaSet=Cluster0-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true'\n// MongoClient.connect('mongodb+srv://shambhavir:s8uxeaQZcw@S-Px@cluster0-xrzxq.mongodb.net/test?authSource=admin&replicaSet=Cluster0-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true', {useUnifiedTopology: true})\n\n\nMongoClient.connect(uri, { useNewUrlParser: true }, function(err, client) {\n\n  if (err) {\n\n        //error\n\n  } else {\n\n        var collection = client.db('test').collection('devices');\n        collection.update(); \n        //client.close() should be called after you are done performing actions such as collection.update, etc.\n\n  }\n});\n\nclass MyForm extends React.Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  \n  \n      handleSubmit(event) {\n        event.preventDefault();\n        const data = new FormData(event.target);\n        // const db = data.db('reviews'); \n        fetch('/api/form-submit-url', {\n          method: 'POST',\n          body: data,\n        });\n      }\n      \n\n\n  \n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"username\">Enter username</label>\n        <input id=\"username\" name=\"username\" type=\"text\" />\n\n        <label htmlFor=\"email\">Enter your email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" />\n\n        <label htmlFor=\"birthdate\">Enter your birth date</label>\n        <input id=\"birthdate\" name=\"birthdate\" type=\"text\" />\n\n        <button>Send data!</button>\n      </form>\n    );\n  }\n}\nexport default MyForm; "]},"metadata":{},"sourceType":"module"}