{"ast":null,"code":"'use strict';\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _assertThisInitialized = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar MongoError = /*#__PURE__*/function (_Error) {\n  _inherits(MongoError, _Error);\n\n  var _super = _createSuper(MongoError);\n\n  function MongoError(message) {\n    var _this;\n\n    _classCallCheck(this, MongoError);\n\n    if (message instanceof Error) {\n      _this = _super.call(this, message.message);\n      _this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        _this = _super.call(this, message);\n      } else {\n        _this = _super.call(this, message.message || message.errmsg || message.$err || 'n/a');\n\n        for (var name in message) {\n          if (name === 'errmsg') {\n            continue;\n          }\n\n          _this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    }\n\n    _this.name = 'MongoError';\n    return _possibleConstructorReturn(_this);\n  }\n  /**\n   * Legacy name for server error responses\n   */\n\n\n  _createClass(MongoError, [{\n    key: \"hasErrorLabel\",\n\n    /**\n     * Checks the error to see if it has an error label\n     * @param {string} label The error label to check for\n     * @returns {boolean} returns true if the error has the provided error label\n     */\n    value: function hasErrorLabel(label) {\n      return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\n    }\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this.message;\n    }\n    /**\n     * Creates a new MongoError object\n     *\n     * @param {Error|string|object} options The options used to create the error.\n     * @return {MongoError} A MongoError instance\n     * @deprecated Use `new MongoError()` instead.\n     */\n\n  }], [{\n    key: \"create\",\n    value: function create(options) {\n      return new MongoError(options);\n    }\n  }]);\n\n  return MongoError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\n\n\nvar MongoNetworkError = /*#__PURE__*/function (_MongoError) {\n  _inherits(MongoNetworkError, _MongoError);\n\n  var _super2 = _createSuper(MongoNetworkError);\n\n  function MongoNetworkError(message) {\n    var _this2;\n\n    _classCallCheck(this, MongoNetworkError);\n\n    _this2 = _super2.call(this, message);\n    _this2.name = 'MongoNetworkError';\n    return _this2;\n  }\n\n  return MongoNetworkError;\n}(MongoError);\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\n\n\nvar MongoParseError = /*#__PURE__*/function (_MongoError2) {\n  _inherits(MongoParseError, _MongoError2);\n\n  var _super3 = _createSuper(MongoParseError);\n\n  function MongoParseError(message) {\n    var _this3;\n\n    _classCallCheck(this, MongoParseError);\n\n    _this3 = _super3.call(this, message);\n    _this3.name = 'MongoParseError';\n    return _this3;\n  }\n\n  return MongoParseError;\n}(MongoError);\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\n\n\nvar MongoTimeoutError = /*#__PURE__*/function (_MongoError3) {\n  _inherits(MongoTimeoutError, _MongoError3);\n\n  var _super4 = _createSuper(MongoTimeoutError);\n\n  function MongoTimeoutError(message, reason) {\n    var _this4;\n\n    _classCallCheck(this, MongoTimeoutError);\n\n    if (reason && reason.error) {\n      _this4 = _super4.call(this, reason.error.message || reason.error);\n    } else {\n      _this4 = _super4.call(this, message);\n    }\n\n    _this4.name = 'MongoTimeoutError';\n\n    if (reason) {\n      _this4.reason = reason;\n    }\n\n    return _possibleConstructorReturn(_this4);\n  }\n\n  return MongoTimeoutError;\n}(MongoError);\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\n\n\nvar MongoServerSelectionError = /*#__PURE__*/function (_MongoTimeoutError) {\n  _inherits(MongoServerSelectionError, _MongoTimeoutError);\n\n  var _super5 = _createSuper(MongoServerSelectionError);\n\n  function MongoServerSelectionError(message, reason) {\n    var _this5;\n\n    _classCallCheck(this, MongoServerSelectionError);\n\n    _this5 = _super5.call(this, message, reason);\n    _this5.name = 'MongoServerSelectionError';\n    return _this5;\n  }\n\n  return MongoServerSelectionError;\n}(MongoTimeoutError);\n\nfunction makeWriteConcernResultObject(input) {\n  var output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\n\n\nvar MongoWriteConcernError = /*#__PURE__*/function (_MongoError4) {\n  _inherits(MongoWriteConcernError, _MongoError4);\n\n  var _super6 = _createSuper(MongoWriteConcernError);\n\n  function MongoWriteConcernError(message, result) {\n    var _this6;\n\n    _classCallCheck(this, MongoWriteConcernError);\n\n    _this6 = _super6.call(this, message);\n    _this6.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      _this6.result = makeWriteConcernResultObject(result);\n    }\n\n    return _this6;\n  }\n\n  return MongoWriteConcernError;\n}(MongoError); // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\n\nvar RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable\n7, // HostNotFound\n89, // NetworkTimeout\n91, // ShutdownInProgress\n189, // PrimarySteppedDown\n9001, // SocketException\n10107, // NotMaster\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13435, // NotMasterNoSlaveOk\n13436 // NotMasterOrSecondary\n]);\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\n\nfunction isRetryableError(error) {\n  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);\n}\n\nvar SDAM_RECOVERING_CODES = new Set([91, // ShutdownInProgress\n189, // PrimarySteppedDown\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13436 // NotMasterOrSecondary\n]);\nvar SDAM_NOTMASTER_CODES = new Set([10107, // NotMaster\n13435 // NotMasterNoSlaveOk\n]);\nvar SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([11600, // InterruptedAtShutdown\n91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\n\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isNetworkTimeoutError(err) {\n  return err instanceof MongoNetworkError && err.message.match(/timed out/);\n}\n\nmodule.exports = {\n  MongoError: MongoError,\n  MongoNetworkError: MongoNetworkError,\n  MongoParseError: MongoParseError,\n  MongoTimeoutError: MongoTimeoutError,\n  MongoServerSelectionError: MongoServerSelectionError,\n  MongoWriteConcernError: MongoWriteConcernError,\n  isRetryableError: isRetryableError,\n  isSDAMUnrecoverableError: isSDAMUnrecoverableError,\n  isNodeShuttingDownError: isNodeShuttingDownError,\n  isNetworkTimeoutError: isNetworkTimeoutError\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/error.js"],"names":["MongoError","message","Error","stack","errmsg","$err","name","captureStackTrace","constructor","label","errorLabels","indexOf","options","MongoNetworkError","MongoParseError","MongoTimeoutError","reason","error","MongoServerSelectionError","makeWriteConcernResultObject","input","output","Object","assign","ok","code","codeName","MongoWriteConcernError","result","RETRYABLE_ERROR_CODES","Set","isRetryableError","has","match","SDAM_RECOVERING_CODES","SDAM_NOTMASTER_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","err","isNotMasterError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        for (var name in message) {\n          if (name === 'errmsg') {\n            continue;\n          }\n\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n  }\n\n  /**\n   * Legacy name for server error responses\n   */\n  get errmsg() {\n    return this.message;\n  }\n\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   * @param {string} label The error label to check for\n   * @returns {boolean} returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\n  }\n}\n\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoNetworkError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n}\n\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    this.name = 'MongoTimeoutError';\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoServerSelectionError extends MongoTimeoutError {\n  constructor(message, reason) {\n    super(message, reason);\n    this.name = 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([\n  6, // HostUnreachable\n  7, // HostNotFound\n  89, // NetworkTimeout\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  9001, // SocketException\n  10107, // NotMaster\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13435, // NotMasterNoSlaveOk\n  13436 // NotMasterOrSecondary\n]);\n\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\nfunction isRetryableError(error) {\n  return (\n    RETRYABLE_ERROR_CODES.has(error.code) ||\n    error instanceof MongoNetworkError ||\n    error.message.match(/not master/) ||\n    error.message.match(/node is recovering/)\n  );\n}\n\nconst SDAM_RECOVERING_CODES = new Set([\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13436 // NotMasterOrSecondary\n]);\n\nconst SDAM_NOTMASTER_CODES = new Set([\n  10107, // NotMaster\n  13435 // NotMasterNoSlaveOk\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n  11600, // InterruptedAtShutdown\n  91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isNetworkTimeoutError(err) {\n  return err instanceof MongoNetworkError && err.message.match(/timed out/);\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoServerSelectionError,\n  MongoWriteConcernError,\n  isRetryableError,\n  isSDAMUnrecoverableError,\n  isNodeShuttingDownError,\n  isNetworkTimeoutError\n};\n"]},"metadata":{},"sourceType":"script"}