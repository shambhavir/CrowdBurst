{"ast":null,"code":"import { EJSON } from \"bson\";\nimport StitchServiceError from \"../../StitchServiceError\";\nimport { StitchServiceErrorCode, stitchServiceErrorCodeFromApi } from \"../../StitchServiceErrorCode\";\nimport Event from \"./Event\";\n\nvar StitchEvent = function () {\n  function StitchEvent(eventName, data, decoder) {\n    this.eventName = eventName;\n    data = data ? data : \"\";\n    var decodedStringBuffer = [];\n\n    for (var chIdx = 0; chIdx < data.length; chIdx++) {\n      var c = data[chIdx];\n\n      switch (c) {\n        case '%':\n          if (chIdx + 2 >= data.length) {\n            break;\n          }\n\n          var code = data.substring(chIdx + 1, chIdx + 3);\n          var found = void 0;\n\n          switch (code) {\n            case \"25\":\n              found = true;\n              decodedStringBuffer.push(\"%\");\n              break;\n\n            case \"0A\":\n              found = true;\n              decodedStringBuffer.push(\"\\n\");\n              break;\n\n            case \"0D\":\n              found = true;\n              decodedStringBuffer.push(\"\\r\");\n              break;\n\n            default:\n              found = false;\n          }\n\n          if (found) {\n            chIdx += 2;\n            continue;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      decodedStringBuffer.push(c);\n    }\n\n    var decodedData = decodedStringBuffer.join('');\n\n    switch (this.eventName) {\n      case StitchEvent.ERROR_EVENT_NAME:\n        var errorMsg = void 0;\n        var errorCode = void 0;\n\n        try {\n          var errorDoc = EJSON.parse(decodedData, {\n            strict: false\n          });\n          errorMsg = errorDoc[ErrorFields.Error];\n          errorCode = stitchServiceErrorCodeFromApi(errorDoc[ErrorFields.ErrorCode]);\n        } catch (error) {\n          errorMsg = decodedData;\n          errorCode = StitchServiceErrorCode.Unknown;\n        }\n\n        this.error = new StitchServiceError(errorMsg, errorCode);\n        break;\n\n      case Event.MESSAGE_EVENT:\n        this.data = EJSON.parse(decodedData, {\n          strict: false\n        });\n\n        if (decoder) {\n          this.data = decoder.decode(this.data);\n        }\n\n        break;\n    }\n  }\n\n  StitchEvent.fromEvent = function (event, decoder) {\n    return new StitchEvent(event.eventName, event.data, decoder);\n  };\n\n  StitchEvent.ERROR_EVENT_NAME = \"error\";\n  return StitchEvent;\n}();\n\nexport default StitchEvent;\nvar ErrorFields;\n\n(function (ErrorFields) {\n  ErrorFields[\"Error\"] = \"error\";\n  ErrorFields[\"ErrorCode\"] = \"error_code\";\n})(ErrorFields || (ErrorFields = {}));","map":{"version":3,"sources":["../../../../src/internal/net/StitchEvent.ts"],"names":[],"mappings":"AAgBA,SAAS,KAAT,QAAsB,MAAtB;AACA,OAAO,kBAAP,MAA+B,0BAA/B;AACA,SAAS,sBAAT,EAAiC,6BAAjC,QAAsE,8BAAtE;AAEA,OAAO,KAAP,MAAkB,SAAlB;;AAIA,IAAA,WAAA,GAAA,YAAA;AAcE,WAAA,WAAA,CACE,SADF,EAEE,IAFF,EAGE,OAHF,EAGsB;AAEpB,SAAK,SAAL,GAAiB,SAAjB;AAEA,IAAA,IAAI,GAAG,IAAI,GAAG,IAAH,GAAU,EAArB;AACA,QAAM,mBAAmB,GAAa,EAAtC;;AACA,SAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,IAAI,CAAC,MAAjC,EAAyC,KAAK,EAA9C,EAAkD;AAChD,UAAM,CAAC,GAAG,IAAI,CAAC,KAAD,CAAd;;AACA,cAAQ,CAAR;AACE,aAAK,GAAL;AACE,cAAI,KAAK,GAAG,CAAR,IAAa,IAAI,CAAC,MAAtB,EAA8B;AAC5B;AACD;;AACD,cAAM,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,KAAK,GAAG,CAAvB,EAA0B,KAAK,GAAG,CAAlC,CAAb;AACA,cAAI,KAAK,GAAA,KAAA,CAAT;;AACA,kBAAQ,IAAR;AACE,iBAAK,IAAL;AACE,cAAA,KAAK,GAAG,IAAR;AACA,cAAA,mBAAmB,CAAC,IAApB,CAAyB,GAAzB;AACA;;AACF,iBAAK,IAAL;AACE,cAAA,KAAK,GAAG,IAAR;AACA,cAAA,mBAAmB,CAAC,IAApB,CAAyB,IAAzB;AACA;;AACF,iBAAK,IAAL;AACE,cAAA,KAAK,GAAG,IAAR;AACA,cAAA,mBAAmB,CAAC,IAApB,CAAyB,IAAzB;AACA;;AACF;AACE,cAAA,KAAK,GAAG,KAAR;AAdJ;;AAgBA,cAAI,KAAJ,EAAW;AACT,YAAA,KAAK,IAAI,CAAT;AACA;AACD;;AACD;;AACF;AACE;AA7BJ;;AA+BA,MAAA,mBAAmB,CAAC,IAApB,CAAyB,CAAzB;AACD;;AACD,QAAM,WAAW,GAAG,mBAAmB,CAAC,IAApB,CAAyB,EAAzB,CAApB;;AAEA,YAAQ,KAAK,SAAb;AACE,WAAK,WAAW,CAAC,gBAAjB;AACE,YAAI,QAAQ,GAAA,KAAA,CAAZ;AACA,YAAI,SAAS,GAAA,KAAA,CAAb;;AAEA,YAAI;AAMF,cAAM,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,WAAZ,EAAyB;AAAE,YAAA,MAAM,EAAE;AAAV,WAAzB,CAAjB;AACA,UAAA,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAb,CAAnB;AACA,UAAA,SAAS,GAAG,6BAA6B,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAb,CAAT,CAAzC;AACD,SATD,CASE,OAAO,KAAP,EAAc;AACd,UAAA,QAAQ,GAAG,WAAX;AACA,UAAA,SAAS,GAAG,sBAAsB,CAAC,OAAnC;AACD;;AACD,aAAK,KAAL,GAAa,IAAI,kBAAJ,CAAuB,QAAvB,EAAiC,SAAjC,CAAb;AACA;;AACF,WAAK,KAAK,CAAC,aAAX;AACE,aAAK,IAAL,GAAY,KAAK,CAAC,KAAN,CAAY,WAAZ,EAAyB;AAAE,UAAA,MAAM,EAAE;AAAV,SAAzB,CAAZ;;AACA,YAAI,OAAJ,EAAa;AACX,eAAK,IAAL,GAAY,OAAO,CAAC,MAAR,CAAe,KAAK,IAApB,CAAZ;AACD;;AACD;AAzBJ;AA2BD;;AAnFa,EAAA,WAAA,CAAA,SAAA,GAAd,UACE,KADF,EAEE,OAFF,EAEsB;AACpB,WAAO,IAAI,WAAJ,CAAmB,KAAK,CAAC,SAAzB,EAAoC,KAAK,CAAC,IAA1C,EAAgD,OAAhD,CAAP;AACD,GAJa;;AAFS,EAAA,WAAA,CAAA,gBAAA,GAAmB,OAAnB;AAsFzB,SAAA,WAAA;AAAC,CAxFD,EAAA;;eAAqB,W;AA0FrB,IAAK,WAAL;;AAAA,CAAA,UAAK,WAAL,EAAgB;AACd,EAAA,WAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,GAAA,YAAA;AACD,CAHD,EAAK,WAAW,KAAX,WAAW,GAAA,EAAA,CAAhB","sourceRoot":"","sourcesContent":["import { EJSON } from \"bson\";\nimport StitchServiceError from \"../../StitchServiceError\";\nimport { StitchServiceErrorCode, stitchServiceErrorCodeFromApi } from \"../../StitchServiceErrorCode\";\nimport Event from \"./Event\";\nvar StitchEvent = (function () {\n    function StitchEvent(eventName, data, decoder) {\n        this.eventName = eventName;\n        data = data ? data : \"\";\n        var decodedStringBuffer = [];\n        for (var chIdx = 0; chIdx < data.length; chIdx++) {\n            var c = data[chIdx];\n            switch (c) {\n                case '%':\n                    if (chIdx + 2 >= data.length) {\n                        break;\n                    }\n                    var code = data.substring(chIdx + 1, chIdx + 3);\n                    var found = void 0;\n                    switch (code) {\n                        case \"25\":\n                            found = true;\n                            decodedStringBuffer.push(\"%\");\n                            break;\n                        case \"0A\":\n                            found = true;\n                            decodedStringBuffer.push(\"\\n\");\n                            break;\n                        case \"0D\":\n                            found = true;\n                            decodedStringBuffer.push(\"\\r\");\n                            break;\n                        default:\n                            found = false;\n                    }\n                    if (found) {\n                        chIdx += 2;\n                        continue;\n                    }\n                    break;\n                default:\n                    break;\n            }\n            decodedStringBuffer.push(c);\n        }\n        var decodedData = decodedStringBuffer.join('');\n        switch (this.eventName) {\n            case StitchEvent.ERROR_EVENT_NAME:\n                var errorMsg = void 0;\n                var errorCode = void 0;\n                try {\n                    var errorDoc = EJSON.parse(decodedData, { strict: false });\n                    errorMsg = errorDoc[ErrorFields.Error];\n                    errorCode = stitchServiceErrorCodeFromApi(errorDoc[ErrorFields.ErrorCode]);\n                }\n                catch (error) {\n                    errorMsg = decodedData;\n                    errorCode = StitchServiceErrorCode.Unknown;\n                }\n                this.error = new StitchServiceError(errorMsg, errorCode);\n                break;\n            case Event.MESSAGE_EVENT:\n                this.data = EJSON.parse(decodedData, { strict: false });\n                if (decoder) {\n                    this.data = decoder.decode(this.data);\n                }\n                break;\n        }\n    }\n    StitchEvent.fromEvent = function (event, decoder) {\n        return new StitchEvent(event.eventName, event.data, decoder);\n    };\n    StitchEvent.ERROR_EVENT_NAME = \"error\";\n    return StitchEvent;\n}());\nexport default StitchEvent;\nvar ErrorFields;\n(function (ErrorFields) {\n    ErrorFields[\"Error\"] = \"error\";\n    ErrorFields[\"ErrorCode\"] = \"error_code\";\n})(ErrorFields || (ErrorFields = {}));\n//# sourceMappingURL=StitchEvent.js.map"]},"metadata":{},"sourceType":"module"}