{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/client/src/Stitch2.js\";\n// import React, {Component} from 'react';\n// // import {View, Text, SafeAreaView} from 'react-native';\n// import { \n//     Stitch,\n//     RemoteMongoClient,\n//     AnonymousCredential\n//   } from \"mongodb-stitch-browser-sdk\";\n// class Stitch2 extends Component {\n//     constructor() {\n//       super();\n//       this.state = {\n//         reviews: [],\n//         value: \"\"\n//       };\n//       this.handleChange = this.handleChange.bind(this);\n//       this.displayTodos = this.displayTodos.bind(this);\n//       this.addTodo = this.addTodo.bind(this);\n//     }\n//     componentDidMount() {\n//       // Initialize the App Client\n//       this.client = Stitch.initializeDefaultAppClient(\"crowdburst-dlnyx\");\n//       // Get a MongoDB Service Client, used for logging in and communicating with Stitch\n//       const mongodb = this.client.getServiceClient(\n//         RemoteMongoClient.factory,\n//         \"mongodb-atlas\"\n//       );\n//       // Get a reference to the todo database\n//       this.db = mongodb.db(\"reviews\");\n//       this.displayTodosOnLoad();\n//     }\n//     displayTodos() {\n//       this.db\n//         .collection(\"item\")\n//         .find({}, { limit: 1000 })\n//         .asArray()\n//         .then(reviewss => {\n//           this.setState({\n//             reviewss\n//           });\n//         });\n//     }\n//     displayTodosOnLoad() {\n//       this.client.auth\n//         .loginWithCredential(new AnonymousCredential())\n//         .then(this.displayTodos)\n//         .catch(console.error);\n//     }\n//     addTodo(event) {\n//       event.preventDefault();\n//       const { value } = this.state;\n//       this.db\n//         .collection(\"item\")\n//         .insertOne({\n//         owner_id: this.client.auth.user.id,\n//           item: value\n//         })\n//         .then(this.displayTodos)\n//         // .catch(console.error)\n//     }\n//     handleChange(event) {\n//       this.setState({ value: event.target.value });\n//     }\n//     render() {\n//       return (\n//         <div className=\"App\">\n//           <h3>This is a todo app</h3>\n//           <hr />\n//           <p>Add a Todo Item:</p>\n//           <form onSubmit={this.addTodo}>\n//             <label>\n//               <input\n//                 type=\"text\"\n//                 value={this.state.value}\n//                 onChange={this.handleChange}\n//               />\n//             </label>\n//             <input type=\"submit\" value=\"Submit\" />\n//           </form>\n//           <ul>\n//             {this.state.reviewss.map(review => {\n//               return <li>{review.item}</li>;\n//             })}\n//           </ul>\n//         </div>\n//       );\n//     }\n// }\n//   export default Stitch2;\nimport React, { Component } from \"react\";\nimport { Stitch, AnonymousCredential, RemoteMongoClient } from \"mongodb-stitch-browser-sdk\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [hello],\n      value: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.displayTodos = this.displayTodos.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentDidMount() {\n    // Initialize the App Client\n    this.client = Stitch.initializeDefaultAppClient(\"crowdburst-ffpqc\"); // Get a MongoDB Service Client\n    // This is used for logging in and communicating with Stitch\n\n    const mongodb = this.client.getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\"); // Get a reference to the todo database\n\n    this.db = mongodb.db(\"todos\");\n    this.displayTodosOnLoad();\n  }\n\n  displayTodos() {\n    // query the remote DB and update the component state\n    this.db.collection(\"item\").find({}, {\n      limit: 1000\n    }).asArray().then(todos => {\n      this.setState({\n        todos\n      });\n    });\n  }\n\n  displayTodosOnLoad() {\n    // Anonymously log in and display comments on load\n    this.client.auth.loginWithCredential(new AnonymousCredential()).then(this.displayTodos).catch(console.error);\n  }\n\n  addTodo(event) {\n    event.preventDefault();\n    const {\n      value\n    } = this.state; // insert the todo into the remote Stitch DB\n    // then re-query the DB and display the new todos\n\n    this.db.collection(\"item\").insertOne({\n      owner_id: this.client.auth.user.id //   // id: this.client.auth.user.id, \n      //   item: value\n\n    }).then(this.displayTodos).catch(console.error);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }, \"This is a todo app\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, \"Add a Todo Item:\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.addTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, this.state.todos.map(todo => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }\n      }, todo.item); // return <li key={todo._id}>{todo.item}</li>;\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/Stitch2.js"],"names":["React","Component","Stitch","AnonymousCredential","RemoteMongoClient","App","constructor","state","todos","hello","value","handleChange","bind","displayTodos","addTodo","componentDidMount","client","initializeDefaultAppClient","mongodb","getServiceClient","factory","db","displayTodosOnLoad","collection","find","limit","asArray","then","setState","auth","loginWithCredential","catch","console","error","event","preventDefault","insertOne","owner_id","user","id","target","render","map","todo","item"],"mappings":"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","sourcesContent":["// import React, {Component} from 'react';\n// // import {View, Text, SafeAreaView} from 'react-native';\n// import { \n//     Stitch,\n//     RemoteMongoClient,\n//     AnonymousCredential\n//   } from \"mongodb-stitch-browser-sdk\";\n\n\n\n// class Stitch2 extends Component {\n//     constructor() {\n//       super();\n//       this.state = {\n//         reviews: [],\n//         value: \"\"\n//       };\n  \n//       this.handleChange = this.handleChange.bind(this);\n//       this.displayTodos = this.displayTodos.bind(this);\n//       this.addTodo = this.addTodo.bind(this);\n//     }\n  \n//     componentDidMount() {\n//       // Initialize the App Client\n//       this.client = Stitch.initializeDefaultAppClient(\"crowdburst-dlnyx\");\n//       // Get a MongoDB Service Client, used for logging in and communicating with Stitch\n//       const mongodb = this.client.getServiceClient(\n//         RemoteMongoClient.factory,\n//         \"mongodb-atlas\"\n//       );\n//       // Get a reference to the todo database\n//       this.db = mongodb.db(\"reviews\");\n  \n//       this.displayTodosOnLoad();\n//     }\n  \n//     displayTodos() {\n//       this.db\n//         .collection(\"item\")\n//         .find({}, { limit: 1000 })\n//         .asArray()\n//         .then(reviewss => {\n//           this.setState({\n//             reviewss\n//           });\n//         });\n//     }\n  \n//     displayTodosOnLoad() {\n//       this.client.auth\n//         .loginWithCredential(new AnonymousCredential())\n//         .then(this.displayTodos)\n//         .catch(console.error);\n//     }\n  \n//     addTodo(event) {\n//       event.preventDefault();\n//       const { value } = this.state;\n  \n//       this.db\n//         .collection(\"item\")\n//         .insertOne({\n//         owner_id: this.client.auth.user.id,\n//           item: value\n//         })\n//         .then(this.displayTodos)\n//         // .catch(console.error)\n\n//     }\n  \n//     handleChange(event) {\n//       this.setState({ value: event.target.value });\n//     }\n  \n//     render() {\n//       return (\n//         <div className=\"App\">\n//           <h3>This is a todo app</h3>\n//           <hr />\n//           <p>Add a Todo Item:</p>\n//           <form onSubmit={this.addTodo}>\n//             <label>\n//               <input\n//                 type=\"text\"\n//                 value={this.state.value}\n//                 onChange={this.handleChange}\n//               />\n//             </label>\n//             <input type=\"submit\" value=\"Submit\" />\n//           </form>\n//           <ul>\n//             {this.state.reviewss.map(review => {\n//               return <li>{review.item}</li>;\n//             })}\n//           </ul>\n//         </div>\n//       );\n//     }\n\n// }\n\n\n  \n//   export default Stitch2;\n\n\n\n\nimport React, { Component } from \"react\";\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from \"mongodb-stitch-browser-sdk\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor() {\n      super();\n      this.state = {\n        todos: [hello],\n        value: \"\"\n      };\n      this.handleChange = this.handleChange.bind(this);\n      this.displayTodos = this.displayTodos.bind(this);\n      this.addTodo = this.addTodo.bind(this);\n    }\n    \n    componentDidMount() {\n      // Initialize the App Client\n      this.client = Stitch.initializeDefaultAppClient(\"crowdburst-ffpqc\");\n\n\n      // Get a MongoDB Service Client\n    // This is used for logging in and communicating with Stitch\n    const mongodb = this.client.getServiceClient(\n        RemoteMongoClient.factory,\n        \"mongodb-atlas\"\n      );\n\n      // Get a reference to the todo database\n    this.db = mongodb.db(\"todos\");\n    this.displayTodosOnLoad();\n  }\n  \n  displayTodos() {\n    // query the remote DB and update the component state\n    this.db\n      .collection(\"item\")\n      .find({}, { limit: 1000 })\n      .asArray()\n      .then(todos => {\n        this.setState({todos});\n      });\n   }\n   displayTodosOnLoad() {\n    // Anonymously log in and display comments on load\n    this.client.auth\n      .loginWithCredential(new AnonymousCredential())\n      .then(this.displayTodos)\n      .catch(console.error);\n  }\n  addTodo(event) {\n    event.preventDefault();\n    const { value } = this.state;\n    // insert the todo into the remote Stitch DB\n    // then re-query the DB and display the new todos\n\n    this.db\n      .collection(\"item\")\n      .insertOne({\n        owner_id: this.client.auth.user.id,\n      //   // id: this.client.auth.user.id, \n      //   item: value\n      })\n      .then(this.displayTodos)\n      .catch(console.error);\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>This is a todo app</h3>\n        <hr />\n        <p>Add a Todo Item:</p>\n        <form onSubmit={this.addTodo}>\n          <label>\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <ul>\n          {/* Map over the todos from our remote DB */}\n          {this.state.todos.map(todo => {\n             return <li>{todo.item}</li>;\n            // return <li key={todo._id}>{todo.item}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}