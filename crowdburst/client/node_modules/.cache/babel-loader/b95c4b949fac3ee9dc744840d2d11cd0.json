{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar MongoError = require('../core').MongoError;\n\nvar OptionsOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(OptionsOperation, _OperationBase);\n\n  var _super = _createSuper(OptionsOperation);\n\n  function OptionsOperation(collection, options) {\n    var _this;\n\n    _classCallCheck(this, OptionsOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    return _this;\n  }\n\n  _createClass(OptionsOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var opts = this.options;\n      coll.s.db.listCollections({\n        name: coll.collectionName\n      }, opts).toArray(function (err, collections) {\n        if (err) return handleCallback(callback, err);\n\n        if (collections.length === 0) {\n          return handleCallback(callback, MongoError.create({\n            message: \"collection \".concat(coll.namespace, \" not found\"),\n            driver: true\n          }));\n        }\n\n        handleCallback(callback, err, collections[0].options || null);\n      });\n    }\n  }]);\n\n  return OptionsOperation;\n}(OperationBase);\n\nmodule.exports = OptionsOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/options_operation.js"],"names":["OperationBase","require","handleCallback","MongoError","OptionsOperation","collection","options","callback","coll","opts","s","db","listCollections","name","collectionName","toArray","err","collections","length","create","message","namespace","driver","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,IAAME,cAAc,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,cAA3C;;AACA,IAAMC,UAAU,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,UAAtC;;IAEMC,gB;;;;;AACJ,4BAAYC,UAAZ,EAAwBC,OAAxB,EAAiC;AAAA;;AAAA;;AAC/B,8BAAMA,OAAN;AAEA,UAAKD,UAAL,GAAkBA,UAAlB;AAH+B;AAIhC;;;;4BAEOE,Q,EAAU;AAChB,UAAMC,IAAI,GAAG,KAAKH,UAAlB;AACA,UAAMI,IAAI,GAAG,KAAKH,OAAlB;AAEAE,MAAAA,IAAI,CAACE,CAAL,CAAOC,EAAP,CAAUC,eAAV,CAA0B;AAAEC,QAAAA,IAAI,EAAEL,IAAI,CAACM;AAAb,OAA1B,EAAyDL,IAAzD,EAA+DM,OAA/D,CAAuE,UAACC,GAAD,EAAMC,WAAN,EAAsB;AAC3F,YAAID,GAAJ,EAAS,OAAOd,cAAc,CAACK,QAAD,EAAWS,GAAX,CAArB;;AACT,YAAIC,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,iBAAOhB,cAAc,CACnBK,QADmB,EAEnBJ,UAAU,CAACgB,MAAX,CAAkB;AAAEC,YAAAA,OAAO,uBAAgBZ,IAAI,CAACa,SAArB,eAAT;AAAqDC,YAAAA,MAAM,EAAE;AAA7D,WAAlB,CAFmB,CAArB;AAID;;AAEDpB,QAAAA,cAAc,CAACK,QAAD,EAAWS,GAAX,EAAgBC,WAAW,CAAC,CAAD,CAAX,CAAeX,OAAf,IAA0B,IAA1C,CAAd;AACD,OAVD;AAWD;;;;EAtB4BN,a;;AAyB/BuB,MAAM,CAACC,OAAP,GAAiBpB,gBAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\n\nclass OptionsOperation extends OperationBase {\n  constructor(collection, options) {\n    super(options);\n\n    this.collection = collection;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const opts = this.options;\n\n    coll.s.db.listCollections({ name: coll.collectionName }, opts).toArray((err, collections) => {\n      if (err) return handleCallback(callback, err);\n      if (collections.length === 0) {\n        return handleCallback(\n          callback,\n          MongoError.create({ message: `collection ${coll.namespace} not found`, driver: true })\n        );\n      }\n\n      handleCallback(callback, err, collections[0].options || null);\n    });\n  }\n}\n\nmodule.exports = OptionsOperation;\n"]},"metadata":{},"sourceType":"script"}