{"ast":null,"code":"import React,{Component}from'react';import ReactDOM from'react-dom';import'./index.css';import{render}from'react-dom';import{ApolloProvider}from'@apollo/client';import{ApolloClient,HttpLink,InMemoryCache,split}from'@apollo/client';import{getMainDefinition}from'@apollo/client/utilities';import{WebSocketLink}from'@apollo/link-ws';import{BrowserRouter,Route,Switch}from\"react-router-dom\";import Groceries from'./Components/Groceries';import GrocerySearch2 from'./GrocerySearch2';import axios from'axios';import bt from'./bt';import App from'./App';import AppFront from'./AppFront';// import server from './server'; \n// import App3 from './test6/my-app/src2';\n//import { render } from 'ejs';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \nvar client=new ApolloClient({cache:new InMemoryCache(),link:new HttpLink({uri:'https://crowdburst.herokuapp.com/v1/graphql'})});// const data = new Array()\nvar data=new Array();// const id = 0\n// const message = null\n// const intervalIsSet = false\n// const idToDelete = null\n// const idToUpdate = null\n// const objectToUpdate = null\nvar App2=function App2(){return/*#__PURE__*/React.createElement(BrowserRouter,null,/*#__PURE__*/React.createElement(ApolloProvider,{client:client},/*#__PURE__*/React.createElement(App,null),/*#__PURE__*/React.createElement(AppFront,null),/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/grocery/:id\",component:Groceries}),/*#__PURE__*/React.createElement(Route,{path:\"/\",component:GrocerySearch2}))));};// ReactDOM.render(<App2 />, document.getElementById('root'))\nReactDOM.render(/*#__PURE__*/React.createElement(App2,null),document.getElementById('root'));// requireServiceWorker(); \n// render(<App2/>, document.getElementById('root')); \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/index.js"],"names":["React","Component","ReactDOM","render","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","BrowserRouter","Route","Switch","Groceries","GrocerySearch2","axios","bt","App","AppFront","client","cache","link","uri","data","Array","App2","document","getElementById"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,aAAP,CACA,OAASC,MAAT,KAAuB,WAAvB,CACA,OAASC,cAAT,KAA+B,gBAA/B,CACA,OAASC,YAAT,CAAuBC,QAAvB,CAAiCC,aAAjC,CAA+CC,KAA/C,KAA4D,gBAA5D,CACA,OAAQC,iBAAR,KAAgC,0BAAhC,CACA,OAAQC,aAAR,KAA4B,iBAA5B,CACA,OAASC,aAAT,CAAwBC,KAAxB,CAA+BC,MAA/B,KAA6C,kBAA7C,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,EAAP,KAAe,MAAf,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,MAAM,CAAG,GAAIf,CAAAA,YAAJ,CAAiB,CAC9BgB,KAAK,CAAE,GAAId,CAAAA,aAAJ,EADuB,CAE9Be,IAAI,CAAE,GAAIhB,CAAAA,QAAJ,CAAa,CACjBiB,GAAG,CAAE,6CADY,CAAb,CAFwB,CAAjB,CAAf,CAMA;AAGM,GAAMC,CAAAA,IAAI,CAAI,GAAIC,CAAAA,KAAJ,EAAd,CACA;AACA;AACA;AACA;AACA;AACA;AAKN,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,sBAIb,oBAAC,aAAD,mBACE,oBAAC,cAAD,EAAgB,MAAM,CAAIN,MAA1B,eAQE,oBAAC,GAAD,MARF,cASE,oBAAC,QAAD,MATF,cAWA,oBAAC,MAAD,mBACM,oBAAC,KAAD,EAAO,IAAI,CAAC,cAAZ,CAA2B,SAAS,CAAEN,SAAtC,EADN,cAEM,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,SAAS,CAAEC,cAA3B,EAFN,CAXA,CADF,CAJa,EAAb,CA0BA;AACAb,QAAQ,CAACC,MAAT,cAAgB,oBAAC,IAAD,MAAhB,CAAyBwB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,EACA;AAEA;AAGA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache,split } from '@apollo/client'; \nimport {getMainDefinition} from '@apollo/client/utilities'; \nimport {WebSocketLink} from '@apollo/link-ws'; \nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries'; \nimport GrocerySearch2 from './GrocerySearch2'; \nimport axios from 'axios';\nimport bt from './bt'; \nimport App from './App'; \nimport AppFront from './AppFront'; \n// import server from './server'; \n\n// import App3 from './test6/my-app/src2';\n\n//import { render } from 'ejs';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n\n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n\n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n\n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n  })\n}); \n// const data = new Array()\n\n\n      const data =  new Array()\n      // const id = 0\n      // const message = null\n      // const intervalIsSet = false\n      // const idToDelete = null\n      // const idToUpdate = null\n      // const objectToUpdate = null\n  \n\n     \n\nconst App2 = () => (\n  \n  \n\n<BrowserRouter>\n  <ApolloProvider client = {client}>\n    {/* <div>\n      <h2>My first React App</h2>\n    </div> */}\n\n    {/* <Grocery/> */}\n    {/* <App3/> */}\n\n    <App/>\n    <AppFront/>\n    {/* <server/> */}\n  <Switch> \n        <Route path=\"/grocery/:id\" component={Groceries} />\n        <Route path=\"/\" component={GrocerySearch2} />\n  </Switch> \n  </ApolloProvider>\n  </BrowserRouter>\n); \n\n\n\n// ReactDOM.render(<App2 />, document.getElementById('root'))\nReactDOM.render(<App2/>, document.getElementById('root')); \n// requireServiceWorker(); \n\n// render(<App2/>, document.getElementById('root')); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}