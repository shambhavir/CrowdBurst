{"ast":null,"code":"// import React , {Component} from 'react'; \n// // import { render } from '@testing-library/react';\n// // class buttontester extends React.Component{\n// //   constructor(props){\n// //     super(props)\n// //     this.state = \n// //     {\n// //       list:\n// //       [\n// //       ]\n// //     }\n// //     this.setState = this.setState.bind(this)\n// //   }\n// //   setState(e){\n// //     e.preventDefault();\n// //     const onChange={(e) => this.setState({ message: e.target.value })}\n// //   }\n// // const buttontester = () =>\n// // {\n// //   return (\n// //     <div style={{ padding: '10px' }}>\n// //     <input\n// //       type=\"text\"\n// //       // onChange={(e) => this.setState({ message: e.target.value })}\n// //       onChange= { (e) => this.setState({message: e.target.value})}\n// //       placeholder=\"add something in the database\"\n// //       style={{ width: '200px' }}\n// //     />\n// //     <button onClick={() => this.putDataToDB(this.state.message)}>\n// //       ADD\n// //     </button>\n// //   </div>\n// //   );\n// //   return (\n// //   <div>\n// //     <h1>this app looks like a virus</h1>\n// //   </div>\n// //   ); \n// // };  \n// // export default buttontester; \n// //}\n// // import React, { Component } from 'react';\n// // import axios from 'axios';\n// class App3 extends React.Component {\n//   // initialize our state\n//   state = {\n//     data: [],\n//     id: 0,\n//     message: null,\n//     intervalIsSet: false,\n//     idToDelete: null,\n//     idToUpdate: null,\n//     objectToUpdate: null,\n//   };\n// //   const App3 = () => {\n// //   // export default App3(\n// //   //   {\n// //   //     state = {\n// //   //       data: [],\n// //   //       id: 0,\n// //   //       message: null,\n// //   //       intervalIsSet: false,\n// //   //       idToDelete: null,\n// //   //       idToUpdate: null,\n// //   //       objectToUpdate: null,\n// //   //     }\n// //   //   }\n// //   // ); \n// //   // const App3  =  \n// //   //   `\n// //   //   state = {\n// //   //     data: [],\n// //   //     id: 0,\n// //   //     message: null,\n// //   //     intervalIsSet: false,\n// //   //     idToDelete: null,\n// //   //     idToUpdate: null,\n// //   //     objectToUpdate: null,\n// //   //     `; \n// //   // when component mounts, first thing it does is fetch all existing data in our db\n// //   // then we incorporate a polling logic so that we can easily see if our db has\n// //   // changed and implement those changes into our UI\n//   componentDidMount() {\n//     this.getDataFromDb();\n//     if (!this.state.intervalIsSet) {\n//       let interval = setInterval(this.getDataFromDb, 1000);\n//       this.setState({ intervalIsSet: interval });\n//     }\n//   }\n// //   // never let a process live forever\n// //   // always kill a process everytime we are done using it\n//   componentWillUnmount() {\n//     if (this.state.intervalIsSet) {\n//       clearInterval(this.state.intervalIsSet);\n//       this.setState({ intervalIsSet: null });\n//     }\n//   }\n// //   // just a note, here, in the front end, we use the id key of our data object\n// //   // in order to identify which we want to Update or delete.\n// //   // for our back end, we use the object id assigned by MongoDB to modify\n// //   // data base entries\n// //   // our first get method that uses our backend api to\n// //   // fetch data from our data base\n//   getDataFromDb = () => {\n//     fetch('http://localhost:3001/api/getData')\n//       .then((data) => data.json())\n//       .then((res) => this.setState({ data: res.data }));\n//   };\n// //   // // // our put method that uses our backend api\n// //   // // // to create new query into our data base\n//   putDataToDB = (message) => {\n//     let currentIds = this.state.data.map((data) => data.id);\n//     let idToBeAdded = 0;\n//     while (currentIds.includes(idToBeAdded)) {\n//       ++idToBeAdded;\n//     }\n//     axios.post('http://localhost:3001/api/putData', {\n//       id: idToBeAdded,\n//       message: message,\n//     });\n//   };\n// //   // our delete method that uses our backend api\n// //   // to remove existing database information\n//   deleteFromDB = (idTodelete) => {\n//     parseInt(idTodelete);\n//     let objIdToDelete = null;\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idTodelete) {\n//         objIdToDelete = dat._id;\n//       }\n//     });\n//     axios.delete('http://localhost:3001/api/deleteData', {\n//       data: {\n//         id: objIdToDelete,\n//       },\n//     });\n//   };\n// //   // our update method that uses our backend api\n// //   // to overwrite existing data base information\n//   updateDB = (idToUpdate, updateToApply) => {\n//     let objIdToUpdate = null;\n//     parseInt(idToUpdate);\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idToUpdate) {\n//         objIdToUpdate = dat._id;\n//       }\n//     });\n//     axios.post('http://localhost:3001/api/updateData', {\n//       id: objIdToUpdate,\n//       update: { message: updateToApply },\n//     });\n//   };\n// //   // here is our UI\n// //   // it is easy to understand their functions when you\n// //   // see them render into our screen\n//   render() {\n//     const { data } = this.state;\n//     return (\n//       <div>\n//         <ul>\n//           {data.length <= 0\n//             ? 'NO DB ENTRIES YET'\n//             : data.map((dat) => (\n//                 <li style={{ padding: '10px' }} key={data.message}>\n//                   <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n//                   <span style={{ color: 'gray' }}> data: </span>\n//                   {dat.message}\n//                 </li>\n//               ))}\n//         </ul>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             onChange={(e) => this.setState({ message: e.target.value })}\n//             placeholder=\"add something in the database\"\n//             style={{ width: '200px' }}\n//           />\n//           <button onClick={() => this.putDataToDB(this.state.message)}>\n//             ADD\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToDelete: e.target.value })}\n//             placeholder=\"put id of item to delete here\"\n//           />\n//           <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n//             DELETE\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n//             placeholder=\"id of item to update here\"\n//           />\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ updateToApply: e.target.value })}\n//             placeholder=\"put new value of the item here\"\n//           />\n//           <button\n//             onClick={() =>\n//               this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n//             }\n//           >\n//             UPDATE\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// // export default App3;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/bt.js"],"names":[],"mappingssourcesContent":["// import React , {Component} from 'react'; \n// // import { render } from '@testing-library/react';\n\n// // class buttontester extends React.Component{\n// //   constructor(props){\n// //     super(props)\n// //     this.state = \n// //     {\n// //       list:\n// //       [\n\n// //       ]\n// //     }\n// //     this.setState = this.setState.bind(this)\n// //   }\n\n// //   setState(e){\n// //     e.preventDefault();\n// //     const onChange={(e) => this.setState({ message: e.target.value })}\n// //   }\n\n\n\n// // const buttontester = () =>\n// // {\n \n// //   return (\n// //     <div style={{ padding: '10px' }}>\n// //     <input\n// //       type=\"text\"\n// //       // onChange={(e) => this.setState({ message: e.target.value })}\n      \n// //       onChange= { (e) => this.setState({message: e.target.value})}\n// //       placeholder=\"add something in the database\"\n// //       style={{ width: '200px' }}\n// //     />\n// //     <button onClick={() => this.putDataToDB(this.state.message)}>\n// //       ADD\n// //     </button>\n// //   </div>\n// //   );\n// //   return (\n// //   <div>\n// //     <h1>this app looks like a virus</h1>\n// //   </div>\n// //   ); \n// // };  \n\n// // export default buttontester; \n// //}\n\n\n\n// // import React, { Component } from 'react';\n// // import axios from 'axios';\n\n// class App3 extends React.Component {\n//   // initialize our state\n//   state = {\n//     data: [],\n//     id: 0,\n//     message: null,\n//     intervalIsSet: false,\n//     idToDelete: null,\n//     idToUpdate: null,\n//     objectToUpdate: null,\n//   };\n\n// //   const App3 = () => {\n\n// //   // export default App3(\n// //   //   {\n// //   //     state = {\n// //   //       data: [],\n// //   //       id: 0,\n// //   //       message: null,\n// //   //       intervalIsSet: false,\n// //   //       idToDelete: null,\n// //   //       idToUpdate: null,\n// //   //       objectToUpdate: null,\n// //   //     }\n// //   //   }\n// //   // ); \n\n// //   // const App3  =  \n// //   //   `\n// //   //   state = {\n// //   //     data: [],\n// //   //     id: 0,\n// //   //     message: null,\n// //   //     intervalIsSet: false,\n// //   //     idToDelete: null,\n// //   //     idToUpdate: null,\n// //   //     objectToUpdate: null,\n// //   //     `; \n  \n\n// //   // when component mounts, first thing it does is fetch all existing data in our db\n// //   // then we incorporate a polling logic so that we can easily see if our db has\n// //   // changed and implement those changes into our UI\n//   componentDidMount() {\n//     this.getDataFromDb();\n//     if (!this.state.intervalIsSet) {\n//       let interval = setInterval(this.getDataFromDb, 1000);\n//       this.setState({ intervalIsSet: interval });\n//     }\n//   }\n\n// //   // never let a process live forever\n// //   // always kill a process everytime we are done using it\n//   componentWillUnmount() {\n//     if (this.state.intervalIsSet) {\n//       clearInterval(this.state.intervalIsSet);\n//       this.setState({ intervalIsSet: null });\n//     }\n//   }\n\n// //   // just a note, here, in the front end, we use the id key of our data object\n// //   // in order to identify which we want to Update or delete.\n// //   // for our back end, we use the object id assigned by MongoDB to modify\n// //   // data base entries\n\n// //   // our first get method that uses our backend api to\n// //   // fetch data from our data base\n//   getDataFromDb = () => {\n//     fetch('http://localhost:3001/api/getData')\n//       .then((data) => data.json())\n//       .then((res) => this.setState({ data: res.data }));\n//   };\n\n// //   // // // our put method that uses our backend api\n// //   // // // to create new query into our data base\n//   putDataToDB = (message) => {\n//     let currentIds = this.state.data.map((data) => data.id);\n//     let idToBeAdded = 0;\n//     while (currentIds.includes(idToBeAdded)) {\n//       ++idToBeAdded;\n//     }\n\n//     axios.post('http://localhost:3001/api/putData', {\n//       id: idToBeAdded,\n//       message: message,\n//     });\n//   };\n\n// //   // our delete method that uses our backend api\n// //   // to remove existing database information\n//   deleteFromDB = (idTodelete) => {\n//     parseInt(idTodelete);\n//     let objIdToDelete = null;\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idTodelete) {\n//         objIdToDelete = dat._id;\n//       }\n//     });\n\n//     axios.delete('http://localhost:3001/api/deleteData', {\n//       data: {\n//         id: objIdToDelete,\n//       },\n//     });\n//   };\n\n// //   // our update method that uses our backend api\n// //   // to overwrite existing data base information\n//   updateDB = (idToUpdate, updateToApply) => {\n//     let objIdToUpdate = null;\n//     parseInt(idToUpdate);\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idToUpdate) {\n//         objIdToUpdate = dat._id;\n//       }\n//     });\n\n//     axios.post('http://localhost:3001/api/updateData', {\n//       id: objIdToUpdate,\n//       update: { message: updateToApply },\n//     });\n//   };\n\n// //   // here is our UI\n// //   // it is easy to understand their functions when you\n// //   // see them render into our screen\n//   render() {\n//     const { data } = this.state;\n//     return (\n//       <div>\n//         <ul>\n//           {data.length <= 0\n//             ? 'NO DB ENTRIES YET'\n//             : data.map((dat) => (\n//                 <li style={{ padding: '10px' }} key={data.message}>\n//                   <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n//                   <span style={{ color: 'gray' }}> data: </span>\n//                   {dat.message}\n//                 </li>\n//               ))}\n//         </ul>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             onChange={(e) => this.setState({ message: e.target.value })}\n//             placeholder=\"add something in the database\"\n//             style={{ width: '200px' }}\n//           />\n//           <button onClick={() => this.putDataToDB(this.state.message)}>\n//             ADD\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToDelete: e.target.value })}\n//             placeholder=\"put id of item to delete here\"\n//           />\n//           <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n//             DELETE\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n//             placeholder=\"id of item to update here\"\n//           />\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ updateToApply: e.target.value })}\n//             placeholder=\"put new value of the item here\"\n//           />\n//           <button\n//             onClick={() =>\n//               this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n//             }\n//           >\n//             UPDATE\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// // export default App3; \n"]},"metadata":{},"sourceType":"module"}