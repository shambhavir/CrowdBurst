{"ast":null,"code":"var StitchRequest = function () {\n  function StitchRequest(method, path, headers, startedAt, body) {\n    this.method = method;\n    this.path = path;\n    this.headers = headers;\n    this.body = body;\n    this.startedAt = startedAt;\n  }\n\n  Object.defineProperty(StitchRequest.prototype, \"builder\", {\n    get: function () {\n      return new StitchRequest.Builder(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return StitchRequest;\n}();\n\nexport { StitchRequest };\n\n(function (StitchRequest) {\n  var Builder = function () {\n    function Builder(request) {\n      if (request !== undefined) {\n        this.method = request.method;\n        this.path = request.path;\n        this.headers = request.headers;\n        this.body = request.body;\n        this.startedAt = request.startedAt;\n      }\n    }\n\n    Builder.prototype.withMethod = function (method) {\n      this.method = method;\n      return this;\n    };\n\n    Builder.prototype.withPath = function (path) {\n      this.path = path;\n      return this;\n    };\n\n    Builder.prototype.withHeaders = function (headers) {\n      this.headers = headers;\n      return this;\n    };\n\n    Builder.prototype.withBody = function (body) {\n      this.body = body;\n      return this;\n    };\n\n    Builder.prototype.build = function () {\n      if (this.method === undefined) {\n        throw Error(\"must set method\");\n      }\n\n      if (this.path === undefined) {\n        throw Error(\"must set non-empty path\");\n      }\n\n      if (this.startedAt === undefined) {\n        this.startedAt = Date.now() / 1000;\n      }\n\n      return new StitchRequest(this.method, this.path, this.headers === undefined ? {} : this.headers, this.startedAt, this.body);\n    };\n\n    return Builder;\n  }();\n\n  StitchRequest.Builder = Builder;\n})(StitchRequest || (StitchRequest = {}));","map":{"version":3,"sources":["../../../../src/internal/net/StitchRequest.ts"],"names":[],"mappings":"AAmBA,IAAA,aAAA,GAAA,YAAA;AAOE,WAAA,aAAA,CACE,MADF,EAEE,IAFF,EAGE,OAHF,EAIE,SAJF,EAKE,IALF,EAKe;AAEb,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;SAAlB,YAAA;AACE,aAAO,IAAI,aAAa,CAAC,OAAlB,CAA0B,IAA1B,CAAP;AACD,KAFiB;oBAAA;;AAAA,GAAlB;AAGF,SAAA,aAAA;AAAC,CAxBD,EAAA;;;;AA2BA,CAAA,UAAiB,aAAjB,EAA8B;AAC5B,MAAA,OAAA,GAAA,YAAA;AAOE,aAAA,OAAA,CAAmB,OAAnB,EAA0C;AACxC,UAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,aAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;AACA,aAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,aAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACA,aAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,aAAK,SAAL,GAAiB,OAAO,CAAC,SAAzB;AACD;AACF;;AAEM,IAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,MAAlB,EAAgC;AAC9B,WAAK,MAAL,GAAc,MAAd;AACA,aAAO,IAAP;AACD,KAHM;;AAKA,IAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA4B;AAC1B,WAAK,IAAL,GAAY,IAAZ;AACA,aAAO,IAAP;AACD,KAHM;;AAKA,IAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,OAAnB,EAAqD;AACnD,WAAK,OAAL,GAAe,OAAf;AACA,aAAO,IAAP;AACD,KAHM;;AAKA,IAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA4B;AAC1B,WAAK,IAAL,GAAY,IAAZ;AACA,aAAO,IAAP;AACD,KAHM;;AAKA,IAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACE,UAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC7B,cAAM,KAAK,CAAC,iBAAD,CAAX;AACD;;AACD,UAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAC3B,cAAM,KAAK,CAAC,yBAAD,CAAX;AACD;;AACD,UAAI,KAAK,SAAL,KAAmB,SAAvB,EAAkC;AAChC,aAAK,SAAL,GAAiB,IAAI,CAAC,GAAL,KAAa,IAA9B;AACD;;AACD,aAAO,IAAI,aAAJ,CACL,KAAK,MADA,EAEL,KAAK,IAFA,EAGL,KAAK,OAAL,KAAiB,SAAjB,GAA6B,EAA7B,GAAkC,KAAK,OAHlC,EAIL,KAAK,SAJA,EAKL,KAAK,IALA,CAAP;AAOD,KAjBM;;AAkBT,WAAA,OAAA;AAAC,GAvDD,EAAA;;AAAa,EAAA,aAAA,CAAA,OAAA,GAAO,OAAP;AAwDd,CAzDD,EAAiB,aAAa,KAAb,aAAa,GAAA,EAAA,CAA9B","sourceRoot":"","sourcesContent":["var StitchRequest = (function () {\n    function StitchRequest(method, path, headers, startedAt, body) {\n        this.method = method;\n        this.path = path;\n        this.headers = headers;\n        this.body = body;\n        this.startedAt = startedAt;\n    }\n    Object.defineProperty(StitchRequest.prototype, \"builder\", {\n        get: function () {\n            return new StitchRequest.Builder(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return StitchRequest;\n}());\nexport { StitchRequest };\n(function (StitchRequest) {\n    var Builder = (function () {\n        function Builder(request) {\n            if (request !== undefined) {\n                this.method = request.method;\n                this.path = request.path;\n                this.headers = request.headers;\n                this.body = request.body;\n                this.startedAt = request.startedAt;\n            }\n        }\n        Builder.prototype.withMethod = function (method) {\n            this.method = method;\n            return this;\n        };\n        Builder.prototype.withPath = function (path) {\n            this.path = path;\n            return this;\n        };\n        Builder.prototype.withHeaders = function (headers) {\n            this.headers = headers;\n            return this;\n        };\n        Builder.prototype.withBody = function (body) {\n            this.body = body;\n            return this;\n        };\n        Builder.prototype.build = function () {\n            if (this.method === undefined) {\n                throw Error(\"must set method\");\n            }\n            if (this.path === undefined) {\n                throw Error(\"must set non-empty path\");\n            }\n            if (this.startedAt === undefined) {\n                this.startedAt = Date.now() / 1000;\n            }\n            return new StitchRequest(this.method, this.path, this.headers === undefined ? {} : this.headers, this.startedAt, this.body);\n        };\n        return Builder;\n    }());\n    StitchRequest.Builder = Builder;\n})(StitchRequest || (StitchRequest = {}));\n//# sourceMappingURL=StitchRequest.js.map"]},"metadata":{},"sourceType":"module"}