{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Groceries.js\";\nimport React, { useState } from 'react';\nimport { useMutation, gql, useSubscription, useLazyQuery } from '@apollo/client';\nimport { useQuery } from '@apollo/client'; // import {useSubscription} from '@apollo/client'; \n\nimport { List, ListItem } from './shared/List';\nimport Search2 from './Search2';\nimport Form2 from './Form2';\nimport axios from 'axios';\nconst IHATECODE = gql`\n\nquery MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n   `;\nconst data = new Array(); // const GRO = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// }\n// `\n\nconst componentDidMount = () => {\n  this.getDataFromDb();\n\n  if (!this.state.intervalIsSet) {\n    let interval = setInterval(this.getDataFromDb, 1000);\n    this.setState({\n      intervalIsSet: interval\n    });\n  }\n};\n\nconst componentWillUnmount = () => {\n  if (this.state.intervalIsSet) {\n    clearInterval(this.state.intervalIsSet);\n    this.setState({\n      intervalIsSet: null\n    });\n  }\n};\n\nconst getDataFromDb = () => {\n  fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n    data: res.data\n  }));\n};\n\nconst putDataToDB = message => {\n  let currentIds = this.state.data.map(data => data.id);\n  let idToBeAdded = 0;\n\n  while (currentIds.includes(idToBeAdded)) {\n    ++idToBeAdded;\n  }\n\n  axios.post('http://localhost:3001/api/putData', {\n    id: idToBeAdded,\n    message: message\n  });\n};\n\nconst Groceries = ({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(IHATECODE, {\n    variables: {\n      id\n    }\n  }); // const {loading, error, data} = useSubscription(GRO, {variables: {id}}); \n  // const {loading, error, data} = useSubscription(GRO); \n\n  const [inputVal, setInputVal] = useState(\"\");\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, \"Loading ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 23\n    }\n  }, \"Error :(\");\n  const {\n    name,\n    address,\n    finrevs\n  } = data.grocery_by_pk;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, name, \" \", address), /*#__PURE__*/React.createElement(\"addReview\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Search2, {\n    inputVal: inputVal,\n    onChange: e => setInputVal(e.target.value),\n    onSubmit: () => {},\n    buttonText: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, finrevs.map(finrevs => /*#__PURE__*/React.createElement(ListItem, {\n    key: finrevs.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, finrevs.body))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default Groceries;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Groceries.js"],"names":["React","useState","useMutation","gql","useSubscription","useLazyQuery","useQuery","List","ListItem","Search2","Form2","axios","IHATECODE","data","Array","componentDidMount","getDataFromDb","state","intervalIsSet","interval","setInterval","setState","componentWillUnmount","clearInterval","fetch","then","json","res","putDataToDB","message","currentIds","map","id","idToBeAdded","includes","post","Groceries","match","params","loading","error","variables","inputVal","setInputVal","name","address","finrevs","grocery_by_pk","e","target","value","body"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {useMutation, gql, useSubscription, useLazyQuery} from '@apollo/client';\nimport {useQuery} from '@apollo/client'; \n// import {useSubscription} from '@apollo/client'; \nimport {List, ListItem} from './shared/List';\nimport Search2 from './Search2'; \nimport Form2 from './Form2';\nimport axios from 'axios';\n\n\n\n\n\nconst IHATECODE = gql \n`\n\nquery MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n   `;\n\n   const data =  new Array()\n\n// const GRO = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// }\n// `\n\nconst componentDidMount = () => {\n  this.getDataFromDb();\n  if (!this.state.intervalIsSet) {\n    let interval = setInterval(this.getDataFromDb, 1000);\n    this.setState({ intervalIsSet: interval });\n  }\n}\nconst  componentWillUnmount = () => {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({ intervalIsSet: null });\n      }\n}\nconst  getDataFromDb = () => {\n          fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n        };\nconst putDataToDB = (message) => {\n  let currentIds = this.state.data.map((data) => data.id);\n  let idToBeAdded = 0;\n  while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\naxios.post('http://localhost:3001/api/putData', {\n    id: idToBeAdded,\n    message: message,\n   });\n  };\n\n\n\n\n\n\n\n\n\n\n\nconst Groceries = ({\n    match: {\n      params: { id },\n    },\n  }) => {\n    const {loading, error, data} = useQuery(IHATECODE, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO); \n\n\n\n    const [inputVal, setInputVal] = useState(\"\"); \n    if (loading) return <p>Loading ...</p>;\n    if (error) return <p>Error :(</p>;\n\n\n    const { name, address, finrevs } = data.grocery_by_pk;\n\n    return (\n        <div>\n          <h3>\n            {name} {address}\n          </h3>\n          {/* <Form2></Form2> */}\n          <addReview></addReview>\n\n          <Search2\n            inputVal = {inputVal}\n            onChange = {(e) => setInputVal(e.target.value)}\n            onSubmit = {() => {}}\n            buttonText = \"Submit\"\n            />\n          <List>\n            {finrevs.map((finrevs) => (\n              <ListItem key={finrevs.id}>{finrevs.body}</ListItem>\n            ))}\n          </List>\n\n\n          <div>\n      \n        {/* <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            // onChange={(e) => this.setState({ message: e.target.value })}\n            \n            onChange= { (e) => this.setState({message: e.target.value})}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div> */}\n        \n        \n            </div>\n        </div>\n      );\n    };\n\nexport default Groceries;"]},"metadata":{},"sourceType":"module"}