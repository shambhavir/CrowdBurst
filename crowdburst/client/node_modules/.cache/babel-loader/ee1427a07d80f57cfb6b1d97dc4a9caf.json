{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar indexInformationDb = require('./db_ops').indexInformation;\n\nvar IndexExistsOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(IndexExistsOperation, _OperationBase);\n\n  var _super = _createSuper(IndexExistsOperation);\n\n  function IndexExistsOperation(collection, indexes, options) {\n    var _this;\n\n    _classCallCheck(this, IndexExistsOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    _this.indexes = indexes;\n    return _this;\n  }\n\n  _createClass(IndexExistsOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var indexes = this.indexes;\n      var options = this.options;\n      indexInformationDb(coll.s.db, coll.collectionName, options, function (err, indexInformation) {\n        // If we have an error return\n        if (err != null) return handleCallback(callback, err, null); // Let's check for the index names\n\n        if (!Array.isArray(indexes)) return handleCallback(callback, null, indexInformation[indexes] != null); // Check in list of indexes\n\n        for (var i = 0; i < indexes.length; i++) {\n          if (indexInformation[indexes[i]] == null) {\n            return handleCallback(callback, null, false);\n          }\n        } // All keys found return true\n\n\n        return handleCallback(callback, null, true);\n      });\n    }\n  }]);\n\n  return IndexExistsOperation;\n}(OperationBase);\n\nmodule.exports = IndexExistsOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/index_exists.js"],"names":["OperationBase","require","handleCallback","indexInformationDb","indexInformation","IndexExistsOperation","collection","indexes","options","callback","coll","s","db","collectionName","err","Array","isArray","i","length","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,IAAME,cAAc,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,cAA3C;;AACA,IAAMC,kBAAkB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBG,gBAA/C;;IAEMC,oB;;;;;AACJ,gCAAYC,UAAZ,EAAwBC,OAAxB,EAAiCC,OAAjC,EAA0C;AAAA;;AAAA;;AACxC,8BAAMA,OAAN;AAEA,UAAKF,UAAL,GAAkBA,UAAlB;AACA,UAAKC,OAAL,GAAeA,OAAf;AAJwC;AAKzC;;;;4BAEOE,Q,EAAU;AAChB,UAAMC,IAAI,GAAG,KAAKJ,UAAlB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;AAEAL,MAAAA,kBAAkB,CAACO,IAAI,CAACC,CAAL,CAAOC,EAAR,EAAYF,IAAI,CAACG,cAAjB,EAAiCL,OAAjC,EAA0C,UAACM,GAAD,EAAMV,gBAAN,EAA2B;AACrF;AACA,YAAIU,GAAG,IAAI,IAAX,EAAiB,OAAOZ,cAAc,CAACO,QAAD,EAAWK,GAAX,EAAgB,IAAhB,CAArB,CAFoE,CAGrF;;AACA,YAAI,CAACC,KAAK,CAACC,OAAN,CAAcT,OAAd,CAAL,EACE,OAAOL,cAAc,CAACO,QAAD,EAAW,IAAX,EAAiBL,gBAAgB,CAACG,OAAD,CAAhB,IAA6B,IAA9C,CAArB,CALmF,CAMrF;;AACA,aAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAACW,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,cAAIb,gBAAgB,CAACG,OAAO,CAACU,CAAD,CAAR,CAAhB,IAAgC,IAApC,EAA0C;AACxC,mBAAOf,cAAc,CAACO,QAAD,EAAW,IAAX,EAAiB,KAAjB,CAArB;AACD;AACF,SAXoF,CAarF;;;AACA,eAAOP,cAAc,CAACO,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAArB;AACD,OAfiB,CAAlB;AAgBD;;;;EA7BgCT,a;;AAgCnCmB,MAAM,CAACC,OAAP,GAAiBf,oBAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst handleCallback = require('../utils').handleCallback;\nconst indexInformationDb = require('./db_ops').indexInformation;\n\nclass IndexExistsOperation extends OperationBase {\n  constructor(collection, indexes, options) {\n    super(options);\n\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const indexes = this.indexes;\n    const options = this.options;\n\n    indexInformationDb(coll.s.db, coll.collectionName, options, (err, indexInformation) => {\n      // If we have an error return\n      if (err != null) return handleCallback(callback, err, null);\n      // Let's check for the index names\n      if (!Array.isArray(indexes))\n        return handleCallback(callback, null, indexInformation[indexes] != null);\n      // Check in list of indexes\n      for (let i = 0; i < indexes.length; i++) {\n        if (indexInformation[indexes[i]] == null) {\n          return handleCallback(callback, null, false);\n        }\n      }\n\n      // All keys found return true\n      return handleCallback(callback, null, true);\n    });\n  }\n}\n\nmodule.exports = IndexExistsOperation;\n"]},"metadata":{},"sourceType":"script"}