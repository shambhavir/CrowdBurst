{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _defineProperty = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _makeStateMachine;\n\nvar Denque = require('denque');\n\nvar EventEmitter = require('events');\n\nvar ServerDescription = require('./server_description').ServerDescription;\n\nvar ServerType = require('./common').ServerType;\n\nvar TopologyDescription = require('./topology_description').TopologyDescription;\n\nvar TopologyType = require('./common').TopologyType;\n\nvar events = require('./events');\n\nvar Server = require('./server').Server;\n\nvar relayEvents = require('../utils').relayEvents;\n\nvar ReadPreference = require('../topologies/read_preference');\n\nvar isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\n\nvar CoreCursor = require('../cursor').CoreCursor;\n\nvar deprecate = require('util').deprecate;\n\nvar BSON = require('../connection/utils').retrieveBSON();\n\nvar createCompressionInfo = require('../topologies/shared').createCompressionInfo;\n\nvar isRetryableError = require('../error').isRetryableError;\n\nvar ClientSession = require('../sessions').ClientSession;\n\nvar MongoError = require('../error').MongoError;\n\nvar MongoServerSelectionError = require('../error').MongoServerSelectionError;\n\nvar resolveClusterTime = require('../topologies/shared').resolveClusterTime;\n\nvar SrvPoller = require('./srv_polling').SrvPoller;\n\nvar getMMAPError = require('../topologies/shared').getMMAPError;\n\nvar makeStateMachine = require('../utils').makeStateMachine;\n\nvar eachAsync = require('../utils').eachAsync;\n\nvar emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\n\nvar ServerSessionPool = require('../sessions').ServerSessionPool;\n\nvar makeClientMetadata = require('../utils').makeClientMetadata;\n\nvar CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nvar common = require('./common');\n\nvar drainTimerQueue = common.drainTimerQueue;\nvar clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nvar serverSelection = require('./server_selection');\n\nvar readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nvar writableServerSelector = serverSelection.writableServerSelector; // Global state\n\nvar globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nvar SERVER_RELAY_EVENTS = ['serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'commandStarted', 'commandSucceeded', 'commandFailed', // NOTE: Legacy events\n'monitoring'].concat(CMAP_EVENT_NAMES); // all events we listen to from `Server` instances\n\nvar LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\nvar STATE_CLOSING = common.STATE_CLOSING;\nvar STATE_CLOSED = common.STATE_CLOSED;\nvar STATE_CONNECTING = common.STATE_CONNECTING;\nvar STATE_CONNECTED = common.STATE_CONNECTED;\nvar stateTransition = makeStateMachine((_makeStateMachine = {}, _defineProperty(_makeStateMachine, STATE_CLOSED, [STATE_CLOSED, STATE_CONNECTING]), _defineProperty(_makeStateMachine, STATE_CONNECTING, [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED]), _defineProperty(_makeStateMachine, STATE_CONNECTED, [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED]), _defineProperty(_makeStateMachine, STATE_CLOSING, [STATE_CLOSING, STATE_CLOSED]), _makeStateMachine));\nvar DEPRECATED_OPTIONS = new Set(['autoReconnect', 'reconnectTries', 'reconnectInterval', 'bufferMaxEntries']);\nvar kCancelled = Symbol('cancelled');\nvar kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\n\nvar Topology = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Topology, _EventEmitter);\n\n  var _super = _createSuper(Topology);\n\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  function Topology(seedlist, options) {\n    var _this;\n\n    _classCallCheck(this, Topology);\n\n    _this = _super.call(this);\n\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = []; // this is for legacy single server constructor support\n\n      if (options.host) {\n        seedlist.push({\n          host: options.host,\n          port: options.port\n        });\n      }\n    }\n\n    seedlist = seedlist || [];\n\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(Object.assign(options, {\n      metadata: makeClientMetadata(options),\n      compression: {\n        compressors: createCompressionInfo(options)\n      }\n    }));\n    DEPRECATED_OPTIONS.forEach(function (optionName) {\n      if (options[optionName]) {\n        emitDeprecationWarning(\"The option `\".concat(optionName, \"` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6\"), 'DeprecationWarning');\n      }\n    });\n    var topologyType = topologyTypeFromSeedlist(seedlist, options);\n    var topologyId = globalTopologyCounter++;\n    var serverDescriptions = seedlist.reduce(function (result, seed) {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      var address = seed.port ? \"\".concat(seed.host, \":\").concat(seed.port) : \"\".concat(seed.host, \":27017\");\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n    _this[kWaitQueue] = new Denque();\n    _this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options: options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(topologyType, serverDescriptions, options.replicaSet, null, null, null, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(_assertThisInitialized(_this)),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      _this.s.srvPoller = options.srvPoller || new SrvPoller({\n        heartbeatFrequencyMS: _this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        // TODO: GET THIS\n        logger: options.logger,\n        loggerLevel: options.loggerLevel\n      });\n\n      _this.s.detectTopologyDescriptionChange = function (ev) {\n        var previousType = ev.previousDescription.type;\n        var newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          _this.s.handleSrvPolling = srvPollingHandler(_assertThisInitialized(_this));\n\n          _this.s.srvPoller.on('srvRecordDiscovery', _this.s.handleSrvPolling);\n\n          _this.s.srvPoller.start();\n        }\n      };\n\n      _this.on('topologyDescriptionChanged', _this.s.detectTopologyDescriptionChange);\n    } // NOTE: remove this when NODE-1709 is resolved\n\n\n    _this.setMaxListeners(Infinity);\n\n    return _this;\n  }\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n\n\n  _createClass(Topology, [{\n    key: \"connect\",\n\n    /**\n     * Initiate server connect\n     *\n     * @param {Object} [options] Optional settings\n     * @param {Array} [options.auth=null] Array of auth options to apply on connect\n     * @param {function} [callback] An optional callback called once on the first connected server\n     */\n    value: function connect(options, callback) {\n      var _this2 = this;\n\n      if (typeof options === 'function') callback = options, options = {};\n      options = options || {};\n\n      if (this.s.state === STATE_CONNECTED) {\n        if (typeof callback === 'function') {\n          callback();\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTING); // emit SDAM monitoring events\n\n      this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n      this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n      this.s.description)); // connect all known servers, then attempt server selection to connect\n\n      connectServers(this, Array.from(this.s.description.servers.values()));\n      translateReadPreference(options);\n      var readPreference = options.readPreference || ReadPreference.primary;\n      this.selectServer(readPreferenceServerSelector(readPreference), options, function (err) {\n        if (err) {\n          _this2.close();\n\n          if (typeof callback === 'function') {\n            callback(err);\n          } else {\n            _this2.emit('error', err);\n          }\n\n          return;\n        }\n\n        stateTransition(_this2, STATE_CONNECTED);\n\n        _this2.emit('open', err, _this2);\n\n        _this2.emit('connect', _this2);\n\n        if (typeof callback === 'function') callback(err, _this2);\n      });\n    }\n    /**\n     * Close this topology\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(options, callback) {\n      var _this3 = this;\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (typeof options === 'boolean') {\n        options = {\n          force: options\n        };\n      }\n\n      options = options || {};\n\n      if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n        if (typeof callback === 'function') {\n          callback();\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CLOSING);\n      drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n      drainTimerQueue(this.s.connectionTimers);\n\n      if (this.s.srvPoller) {\n        this.s.srvPoller.stop();\n\n        if (this.s.handleSrvPolling) {\n          this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n          delete this.s.handleSrvPolling;\n        }\n      }\n\n      if (this.s.detectTopologyDescriptionChange) {\n        this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n        delete this.s.detectTopologyDescriptionChange;\n      }\n\n      this.s.sessions.forEach(function (session) {\n        return session.endSession();\n      });\n      this.s.sessionPool.endAllPooledSessions(function () {\n        eachAsync(Array.from(_this3.s.servers.values()), function (server, cb) {\n          return destroyServer(server, _this3, options, cb);\n        }, function (err) {\n          _this3.s.servers.clear(); // emit an event for close\n\n\n          _this3.emit('topologyClosed', new events.TopologyClosedEvent(_this3.s.id));\n\n          stateTransition(_this3, STATE_CLOSED);\n\n          _this3.emit('close');\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        });\n      });\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param {object} [options] Optional settings related to server selection\n     * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n     * @param {function} callback The callback used to indicate success or failure\n     * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n     */\n\n  }, {\n    key: \"selectServer\",\n    value: function selectServer(selector, options, callback) {\n      var _this4 = this;\n\n      if (typeof options === 'function') {\n        callback = options;\n\n        if (typeof selector !== 'function') {\n          options = selector;\n          var readPreference;\n\n          if (selector instanceof ReadPreference) {\n            readPreference = selector;\n          } else if (typeof selector === 'string') {\n            readPreference = new ReadPreference(selector);\n          } else {\n            translateReadPreference(options);\n            readPreference = options.readPreference || ReadPreference.primary;\n          }\n\n          selector = readPreferenceServerSelector(readPreference);\n        } else {\n          options = {};\n        }\n      }\n\n      options = Object.assign({}, {\n        serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n      }, options);\n      var isSharded = this.description.type === TopologyType.Sharded;\n      var session = options.session;\n      var transaction = session && session.transaction;\n\n      if (isSharded && transaction && transaction.server) {\n        callback(undefined, transaction.server);\n        return;\n      } // support server selection by options with readPreference\n\n\n      var serverSelector = selector;\n\n      if (typeof selector === 'object') {\n        var _readPreference = selector.readPreference ? selector.readPreference : ReadPreference.primary;\n\n        serverSelector = readPreferenceServerSelector(_readPreference);\n      }\n\n      var waitQueueMember = {\n        serverSelector: serverSelector,\n        transaction: transaction,\n        callback: callback\n      };\n      var serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n      if (serverSelectionTimeoutMS) {\n        waitQueueMember.timer = setTimeout(function () {\n          waitQueueMember[kCancelled] = true;\n          waitQueueMember.timer = undefined;\n          var timeoutError = new MongoServerSelectionError(\"Server selection timed out after \".concat(serverSelectionTimeoutMS, \" ms\"), _this4.description);\n          waitQueueMember.callback(timeoutError);\n        }, serverSelectionTimeoutMS);\n      }\n\n      this[kWaitQueue].push(waitQueueMember);\n      processWaitQueue(this);\n    } // Sessions related methods\n\n    /**\n     * @return Whether the topology should initiate selection to determine session support\n     */\n\n  }, {\n    key: \"shouldCheckForSessionSupport\",\n    value: function shouldCheckForSessionSupport() {\n      if (this.description.type === TopologyType.Single) {\n        return !this.description.hasKnownServers;\n      }\n\n      return !this.description.hasDataBearingServers;\n    }\n    /**\n     * @return Whether sessions are supported on the current topology\n     */\n\n  }, {\n    key: \"hasSessionSupport\",\n    value: function hasSessionSupport() {\n      return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    /**\n     * Start a logical session\n     */\n\n  }, {\n    key: \"startSession\",\n    value: function startSession(options, clientOptions) {\n      var _this5 = this;\n\n      var session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n      session.once('ended', function () {\n        _this5.s.sessions.delete(session);\n      });\n      this.s.sessions.add(session);\n      return session;\n    }\n    /**\n     * Send endSessions command(s) with the given session ids\n     *\n     * @param {Array} sessions The sessions to end\n     * @param {function} [callback]\n     */\n\n  }, {\n    key: \"endSessions\",\n    value: function endSessions(sessions, callback) {\n      if (!Array.isArray(sessions)) {\n        sessions = [sessions];\n      }\n\n      this.command('admin.$cmd', {\n        endSessions: sessions\n      }, {\n        readPreference: ReadPreference.primaryPreferred,\n        noResponse: true\n      }, function () {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      });\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param {object} serverDescription The server to update in the internal list of server descriptions\n     */\n\n  }, {\n    key: \"serverUpdateHandler\",\n    value: function serverUpdateHandler(serverDescription) {\n      if (!this.s.description.hasServer(serverDescription.address)) {\n        return;\n      } // these will be used for monitoring events later\n\n\n      var previousTopologyDescription = this.s.description;\n      var previousServerDescription = this.s.description.servers.get(serverDescription.address); // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n      // a server it MUST compare it to the current highest seen cluster time\n      // for the deployment. If the new cluster time is higher than the\n      // highest seen cluster time it MUST become the new highest seen cluster\n      // time. Two cluster times are compared using only the BsonTimestamp\n      // value of the clusterTime embedded field.\"\n\n      var clusterTime = serverDescription.$clusterTime;\n\n      if (clusterTime) {\n        resolveClusterTime(this, clusterTime);\n      } // If we already know all the information contained in this updated description, then\n      // we don't need to emit SDAM events, but still need to update the description, in order\n      // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n      var equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n      this.s.description = this.s.description.update(serverDescription);\n\n      if (this.s.description.compatibilityError) {\n        this.emit('error', new MongoError(this.s.description.compatibilityError));\n        return;\n      } // emit monitoring events for this change\n\n\n      if (!equalDescriptions) {\n        this.emit('serverDescriptionChanged', new events.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, this.s.description.servers.get(serverDescription.address)));\n      } // update server list from updated descriptions\n\n\n      updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n      if (this[kWaitQueue].length > 0) {\n        processWaitQueue(this);\n      }\n\n      if (!equalDescriptions) {\n        this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n      }\n    }\n  }, {\n    key: \"auth\",\n    value: function auth(credentials, callback) {\n      if (typeof credentials === 'function') callback = credentials, credentials = null;\n      if (typeof callback === 'function') callback(null, true);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(callback) {\n      if (typeof callback === 'function') callback(null, true);\n    } // Basic operation support. Eventually this should be moved into command construction\n    // during the command refactor.\n\n    /**\n     * Insert one or more documents\n     *\n     * @param {String} ns The full qualified namespace for this operation\n     * @param {Array} ops An array of documents to insert\n     * @param {Boolean} [options.ordered=true] Execute in order or out of order\n     * @param {Object} [options.writeConcern] Write concern for the operation\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n     * @param {ClientSession} [options.session] Session to use for the operation\n     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(ns, ops, options, callback) {\n      executeWriteOperation({\n        topology: this,\n        op: 'insert',\n        ns: ns,\n        ops: ops\n      }, options, callback);\n    }\n    /**\n     * Perform one or more update operations\n     *\n     * @param {string} ns The fully qualified namespace for this operation\n     * @param {array} ops An array of updates\n     * @param {boolean} [options.ordered=true] Execute in order or out of order\n     * @param {object} [options.writeConcern] Write concern for the operation\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n     * @param {ClientSession} [options.session] Session to use for the operation\n     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(ns, ops, options, callback) {\n      executeWriteOperation({\n        topology: this,\n        op: 'update',\n        ns: ns,\n        ops: ops\n      }, options, callback);\n    }\n    /**\n     * Perform one or more remove operations\n     *\n     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n     * @param {array} ops An array of removes\n     * @param {boolean} [options.ordered=true] Execute in order or out of order\n     * @param {object} [options.writeConcern={}] Write concern for the operation\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n     * @param {ClientSession} [options.session=null] Session to use for the operation\n     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(ns, ops, options, callback) {\n      executeWriteOperation({\n        topology: this,\n        op: 'remove',\n        ns: ns,\n        ops: ops\n      }, options, callback);\n    }\n    /**\n     * Execute a command\n     *\n     * @method\n     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n     * @param {object} cmd The command hash\n     * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n     * @param {Connection} [options.connection] Specify connection object to execute command against\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n     * @param {ClientSession} [options.session=null] Session to use for the operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"command\",\n    value: function command(ns, cmd, options, callback) {\n      var _this6 = this;\n\n      if (typeof options === 'function') {\n        callback = options, options = {}, options = options || {};\n      }\n\n      translateReadPreference(options);\n      var readPreference = options.readPreference || ReadPreference.primary;\n      this.selectServer(readPreferenceServerSelector(readPreference), options, function (err, server) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var willRetryWrite = !options.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(_this6) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n        var cb = function cb(err, result) {\n          if (!err) return callback(null, result);\n\n          if (!isRetryableError(err)) {\n            return callback(err);\n          }\n\n          if (willRetryWrite) {\n            var newOptions = Object.assign({}, options, {\n              retrying: true\n            });\n            return _this6.command(ns, cmd, newOptions, callback);\n          }\n\n          return callback(err);\n        }; // increment and assign txnNumber\n\n\n        if (willRetryWrite) {\n          options.session.incrementTransactionNumber();\n          options.willRetryWrite = willRetryWrite;\n        }\n\n        server.command(ns, cmd, options, cb);\n      });\n    }\n    /**\n     * Create a new cursor\n     *\n     * @method\n     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n     * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n     * @param {object} [options] Options for the cursor\n     * @param {object} [options.batchSize=0] Batchsize for the operation\n     * @param {array} [options.documents=[]] Initial documents list for cursor\n     * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n     * @param {ClientSession} [options.session=null] Session to use for the operation\n     * @param {object} [options.topology] The internal topology of the created cursor\n     * @returns {Cursor}\n     */\n\n  }, {\n    key: \"cursor\",\n    value: function cursor(ns, cmd, options) {\n      options = options || {};\n      var topology = options.topology || this;\n      var CursorClass = options.cursorFactory || this.s.Cursor;\n      translateReadPreference(options);\n      return new CursorClass(topology, ns, cmd, options);\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this.s.state === STATE_CONNECTED;\n    }\n  }, {\n    key: \"isDestroyed\",\n    value: function isDestroyed() {\n      return this.s.state === STATE_CLOSED;\n    }\n  }, {\n    key: \"unref\",\n    value: function unref() {\n      console.log('not implemented: `unref`');\n    } // NOTE: There are many places in code where we explicitly check the last isMaster\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first isMaster seen, which should suffice.\n\n  }, {\n    key: \"lastIsMaster\",\n    value: function lastIsMaster() {\n      var serverDescriptions = Array.from(this.description.servers.values());\n      if (serverDescriptions.length === 0) return {};\n      var sd = serverDescriptions.filter(function (sd) {\n        return sd.type !== ServerType.Unknown;\n      })[0];\n      var result = sd || {\n        maxWireVersion: this.description.commonWireVersion\n      };\n      return result;\n    }\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this.s.description;\n    }\n  }, {\n    key: \"parserType\",\n    get: function get() {\n      return BSON.native ? 'c++' : 'js';\n    }\n  }, {\n    key: \"clientMetadata\",\n    get: function get() {\n      return this.s.options.metadata;\n    }\n  }, {\n    key: \"logicalSessionTimeoutMinutes\",\n    get: function get() {\n      return this.description.logicalSessionTimeoutMinutes;\n    }\n  }, {\n    key: \"bson\",\n    get: function get() {\n      return this.s.bson;\n    }\n  }]);\n\n  return Topology;\n}(EventEmitter);\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function get() {\n    return this.s.clusterTime;\n  },\n  set: function set(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}); // legacy aliases\n\nTopology.prototype.destroy = deprecate(Topology.prototype.close, 'destroy() is deprecated, please use close() instead');\nvar RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(function (op) {\n    return command[op];\n  });\n}\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\n\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(function (event) {\n    return server.removeAllListeners(event);\n  });\n  server.destroy(options, function () {\n    topology.emit('serverClosed', new events.ServerClosedEvent(topology.s.id, server.description.address));\n    SERVER_RELAY_EVENTS.forEach(function (event) {\n      return server.removeAllListeners(event);\n    });\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\n\n\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(function (seed) {\n    return {\n      host: seed.split(':')[0],\n      port: seed.split(':')[1] || 27017\n    };\n  });\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  var replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (seedlist.length === 1 && !replicaSet) return TopologyType.Single;\n  if (replicaSet) return TopologyType.ReplicaSetNoPrimary;\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit('serverOpening', new events.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  var server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n\n  if (connectDelay) {\n    var connectTimer = setTimeout(function () {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce(function (servers, serverDescription) {\n    var server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    var server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  var _iterator = _createForOfIteratorHelper(topology.description.servers.values()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var serverDescription = _step.value;\n\n      if (!topology.s.servers.has(serverDescription.address)) {\n        var _server = createAndConnectServer(topology, serverDescription);\n\n        topology.s.servers.set(serverDescription.address, _server);\n      }\n    } // for all servers no longer known, remove their descriptions and destroy their instances\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(topology.s.servers),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var entry = _step2.value;\n      var serverAddress = entry[0];\n\n      if (topology.description.hasServer(serverAddress)) {\n        continue;\n      }\n\n      var _server2 = topology.s.servers.get(serverAddress);\n\n      topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n      destroyServer(_server2, topology);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  var topology = args.topology;\n  var op = args.op;\n  var ns = args.ns;\n  var ops = args.ops;\n  var willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(topology) && !options.session.inTransaction();\n  topology.selectServer(writableServerSelector(), options, function (err, server) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    var handler = function handler(err, result) {\n      if (!err) return callback(null, result);\n\n      if (!isRetryableError(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        var newArgs = Object.assign({}, args, {\n          retrying: true\n        });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    } // increment and assign txnNumber\n\n\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    } // execute the write operation\n\n\n    server[op](ns, ops, options, handler);\n  });\n}\n\nfunction translateReadPreference(options) {\n  if (options.readPreference == null) {\n    return;\n  }\n\n  var r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    var mode = r.mode || r.preference;\n\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    var previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n    topology.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(topology.s.id, previousTopologyDescription, topology.s.description));\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    var waitQueueMember = queue.shift();\n    clearTimeout(waitQueueMember.timer);\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  var serverDescriptions = Array.from(topology.description.servers.values());\n  var membersToProcess = topology[kWaitQueue].length;\n\n  for (var i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\n    var waitQueueMember = topology[kWaitQueue].shift();\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    var selectedDescriptions = void 0;\n\n    try {\n      var serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    var selectedServerDescription = randomSelection(selectedDescriptions);\n    var selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    var transaction = waitQueueMember.transaction;\n    var isSharded = topology.description.type === TopologyType.Sharded;\n\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(function (server) {\n      return process.nextTick(function () {\n        return server.requestCheck();\n      });\n    });\n  }\n}\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\n\nmodule.exports = {\n  Topology: Topology\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/sdam/topology.js"],"names":["Denque","require","EventEmitter","ServerDescription","ServerType","TopologyDescription","TopologyType","events","Server","relayEvents","ReadPreference","isRetryableWritesSupported","CoreCursor","deprecate","BSON","retrieveBSON","createCompressionInfo","isRetryableError","ClientSession","MongoError","MongoServerSelectionError","resolveClusterTime","SrvPoller","getMMAPError","makeStateMachine","eachAsync","emitDeprecationWarning","ServerSessionPool","makeClientMetadata","CMAP_EVENT_NAMES","common","drainTimerQueue","clearAndRemoveTimerFrom","serverSelection","readPreferenceServerSelector","writableServerSelector","globalTopologyCounter","SERVER_RELAY_EVENTS","concat","LOCAL_SERVER_EVENTS","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","stateTransition","DEPRECATED_OPTIONS","Set","kCancelled","Symbol","kWaitQueue","Topology","seedlist","options","host","push","port","parseStringSeedlist","Object","assign","TOPOLOGY_DEFAULTS","freeze","metadata","compression","compressors","forEach","optionName","topologyType","topologyTypeFromSeedlist","topologyId","serverDescriptions","reduce","result","seed","domain_socket","address","set","Map","s","id","state","description","replicaSet","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Cursor","cursorFactory","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","MaxKey","MinKey","ObjectId","BSONRegExp","Timestamp","servers","sessionPool","sessions","promiseLibrary","Promise","credentials","clusterTime","connectionTimers","srvHost","srvPoller","logger","loggerLevel","detectTopologyDescriptionChange","ev","previousType","previousDescription","type","newType","newDescription","Sharded","handleSrvPolling","srvPollingHandler","on","start","setMaxListeners","Infinity","callback","emit","TopologyOpeningEvent","TopologyDescriptionChangedEvent","Unknown","connectServers","Array","from","values","translateReadPreference","readPreference","primary","selectServer","err","close","force","drainWaitQueue","stop","removeListener","session","endSession","endAllPooledSessions","server","cb","destroyServer","clear","TopologyClosedEvent","selector","isSharded","transaction","undefined","serverSelector","waitQueueMember","timer","setTimeout","timeoutError","processWaitQueue","Single","hasKnownServers","hasDataBearingServers","logicalSessionTimeoutMinutes","clientOptions","once","delete","add","isArray","command","endSessions","primaryPreferred","noResponse","serverDescription","hasServer","previousTopologyDescription","previousServerDescription","get","$clusterTime","equalDescriptions","equals","update","compatibilityError","ServerDescriptionChangedEvent","updateServers","length","ns","ops","executeWriteOperation","topology","op","cmd","willRetryWrite","retrying","retryWrites","inTransaction","isWriteCommand","newOptions","incrementTransactionNumber","CursorClass","console","log","sd","filter","maxWireVersion","commonWireVersion","native","defineProperty","prototype","enumerable","destroy","RETRYABLE_WRITE_OPERATIONS","some","event","removeAllListeners","ServerClosedEvent","split","map","setName","rs_name","ReplicaSetNoPrimary","randomSelection","array","Math","floor","random","createAndConnectServer","connectDelay","ServerOpeningEvent","serverUpdateHandler","bind","connectTimer","connect","incomingServerDescription","has","entry","serverAddress","args","handler","newArgs","operationId","r","mode","preference","tags","maxStalenessSeconds","TypeError","updateFromSrvPollingEvent","queue","shift","clearTimeout","membersToProcess","i","selectedDescriptions","e","selectedServerDescription","selectedServer","isActive","pinServer","process","nextTick","requestCheck","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst Denque = require('denque');\nconst EventEmitter = require('events');\nconst ServerDescription = require('./server_description').ServerDescription;\nconst ServerType = require('./common').ServerType;\nconst TopologyDescription = require('./topology_description').TopologyDescription;\nconst TopologyType = require('./common').TopologyType;\nconst events = require('./events');\nconst Server = require('./server').Server;\nconst relayEvents = require('../utils').relayEvents;\nconst ReadPreference = require('../topologies/read_preference');\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst deprecate = require('util').deprecate;\nconst BSON = require('../connection/utils').retrieveBSON();\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\nconst isRetryableError = require('../error').isRetryableError;\nconst ClientSession = require('../sessions').ClientSession;\nconst MongoError = require('../error').MongoError;\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\nconst SrvPoller = require('./srv_polling').SrvPoller;\nconst getMMAPError = require('../topologies/shared').getMMAPError;\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst eachAsync = require('../utils').eachAsync;\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nconst common = require('./common');\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector;\n\n// Global state\nlet globalTopologyCounter = 0;\n\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'commandStarted',\n  'commandSucceeded',\n  'commandFailed',\n\n  // NOTE: Legacy events\n  'monitoring'\n].concat(CMAP_EVENT_NAMES);\n\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\n\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\nconst DEPRECATED_OPTIONS = new Set([\n  'autoReconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'bufferMaxEntries'\n]);\n\nconst kCancelled = Symbol('cancelled');\nconst kWaitQueue = Symbol('waitQueue');\n\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = [];\n\n      // this is for legacy single server constructor support\n      if (options.host) {\n        seedlist.push({ host: options.host, port: options.port });\n      }\n    }\n\n    seedlist = seedlist || [];\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(\n      Object.assign(options, {\n        metadata: makeClientMetadata(options),\n        compression: { compressors: createCompressionInfo(options) }\n      })\n    );\n\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(\n          `The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,\n          'DeprecationWarning'\n        );\n      }\n    });\n\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        null,\n        null,\n        null,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      this.s.srvPoller =\n        options.srvPoller ||\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost, // TODO: GET THIS\n          logger: options.logger,\n          loggerLevel: options.loggerLevel\n        });\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    }\n\n    // NOTE: remove this when NODE-1709 is resolved\n    this.setMaxListeners(Infinity);\n  }\n\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n  connect(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    connectServers(this, Array.from(this.s.description.servers.values()));\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, err => {\n      if (err) {\n        this.close();\n\n        if (typeof callback === 'function') {\n          callback(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit('open', err, this);\n      this.emit('connect', this);\n\n      if (typeof callback === 'function') callback(err, this);\n    });\n  }\n\n  /**\n   * Close this topology\n   */\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n\n    options = options || {};\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    this.s.sessions.forEach(session => session.endSession());\n    this.s.sessionPool.endAllPooledSessions(() => {\n      eachAsync(\n        Array.from(this.s.servers.values()),\n        (server, cb) => destroyServer(server, this, options, cb),\n        err => {\n          this.s.servers.clear();\n\n          // emit an event for close\n          this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\n\n          stateTransition(this, STATE_CLOSED);\n          this.emit('close');\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      if (typeof selector !== 'function') {\n        options = selector;\n\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else if (typeof selector === 'string') {\n          readPreference = new ReadPreference(selector);\n        } else {\n          translateReadPreference(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    // support server selection by options with readPreference\n    let serverSelector = selector;\n    if (typeof selector === 'object') {\n      const readPreference = selector.readPreference\n        ? selector.readPreference\n        : ReadPreference.primary;\n\n      serverSelector = readPreferenceServerSelector(readPreference);\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /**\n   * Start a logical session\n   */\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred, noResponse: true },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      this.emit(\n        'serverDescriptionChanged',\n        new events.ServerDescriptionChangedEvent(\n          this.s.id,\n          serverDescription.address,\n          previousServerDescription,\n          this.s.description.servers.get(serverDescription.address)\n        )\n      );\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(\n        'topologyDescriptionChanged',\n        new events.TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = null);\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'remove', ns, ops }, options, callback);\n  }\n\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite =\n        !options.retrying &&\n        !!options.retryWrites &&\n        options.session &&\n        isRetryableWritesSupported(this) &&\n        !options.session.inTransaction() &&\n        isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n        if (!isRetryableError(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, { retrying: true });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      };\n\n      // increment and assign txnNumber\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    translateReadPreference(options);\n\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    console.log('not implemented: `unref`');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function() {\n    return this.s.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n});\n\n// legacy aliases\nTopology.prototype.destroy = deprecate(\n  Topology.prototype.close,\n  'destroy() is deprecated, please use close() instead'\n);\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n\n  server.destroy(options, () => {\n    topology.emit(\n      'serverClosed',\n      new events.ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (seedlist.length === 1 && !replicaSet) return TopologyType.Single;\n  if (replicaSet) return TopologyType.ReplicaSetNoPrimary;\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit(\n    'serverOpening',\n    new events.ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    destroyServer(server, topology);\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(topology) &&\n    !options.session.inTransaction();\n\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n      if (!isRetryableError(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, { retrying: true });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    }\n\n    // increment and assign txnNumber\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    }\n\n    // execute the write operation\n    server[op](ns, ops, options, handler);\n  });\n}\n\nfunction translateReadPreference(options) {\n  if (options.readPreference == null) {\n    return;\n  }\n\n  let r = options.readPreference;\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n\n    topology.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        topology.s.id,\n        previousTopologyDescription,\n        topology.s.description\n      )\n    );\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    clearTimeout(waitQueueMember.timer);\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    const isSharded = topology.description.type === TopologyType.Sharded;\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\n  }\n}\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\nmodule.exports = {\n  Topology\n};\n"]},"metadata":{},"sourceType":"script"}