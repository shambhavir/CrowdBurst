{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/List2.js\";\nimport React, { Component } from 'react';\n\nclass List2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filtered: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      filtered: this.props.items\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      filtered: nextProps.items\n    });\n  }\n\n  handleChange(e) {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase(); //const lc = \"hello\"; \n        // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); //const filter = e.target.value; \n        // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter); //return lc; \n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    this.setState({\n      filtered: newList\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      onChange: this.handleChange,\n      placeholder: \"Search...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 6\n      }\n    }, this.state.filtered.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      key: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 8\n      }\n    }, item, \" \\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"delete\",\n      onClick: () => this.props.delete(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    })))));\n  }\n\n}\n\nexport default List2;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/List2.js"],"names":["React","Component","List2","constructor","props","state","filtered","handleChange","bind","componentDidMount","setState","items","componentWillReceiveProps","nextProps","e","currentList","newList","target","value","filter","item","lc","toLowerCase","includes","render","map","delete"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACC,SAA1B,CAAoC;AACnCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE;AADE,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA;;AAEDC,EAAAA,iBAAiB,GAAG;AACjB,SAAKC,QAAL,CAAc;AACZJ,MAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWO;AADT,KAAd;AAGD;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,SAAKH,QAAL,CAAc;AACZJ,MAAAA,QAAQ,EAAEO,SAAS,CAACF;AADR,KAAd;AAGD;;AAEFJ,EAAAA,YAAY,CAACO,CAAD,EAAI;AACf;AACE,QAAIC,WAAW,GAAG,EAAlB,CAFa,CAGf;;AACE,QAAIC,OAAO,GAAG,EAAd,CAJa,CAMf;;AACE,QAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AAC5B;AACGH,MAAAA,WAAW,GAAG,KAAKX,KAAL,CAAWO,KAAzB,CAFyB,CAI5B;AACA;;AACGK,MAAAA,OAAO,GAAGD,WAAW,CAACI,MAAZ,CAAmBC,IAAI,IAAI;AACvC;AACF,cAAMC,EAAE,GAAGD,IAAI,CAACE,WAAL,EAAX,CAFyC,CAGzC;AACE;;AACF,cAAMH,MAAM,GAAGL,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeI,WAAf,EAAf,CALyC,CAMzC;AACE;AACA;AACA;;AACF,eAAOD,EAAE,CAACE,QAAH,CAAYJ,MAAZ,CAAP,CAVyC,CAWzC;AACK,OAZS,CAAV;AAaD,KAnBD,MAmBO;AACR;AACGH,MAAAA,OAAO,GAAG,KAAKZ,KAAL,CAAWO,KAArB;AACD,KA7BY,CA8Bf;;;AACE,SAAKD,QAAL,CAAc;AACZJ,MAAAA,QAAQ,EAAEU;AADE,KAAd;AAGD;;AAEFQ,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,SAAS,EAAC,OAA7B;AAAqC,MAAA,QAAQ,EAAE,KAAKjB,YAApD;AAAkE,MAAA,WAAW,EAAC,WAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKF,KAAL,CAAWC,QAAX,CAAoBmB,GAApB,CAAwBL,IAAI,iBAC5B;AAAI,MAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEA,IADF,wBAEC;AACC,MAAA,SAAS,EAAC,QADX;AAEC,MAAA,OAAO,EAAE,MAAM,KAAKhB,KAAL,CAAWsB,MAAX,CAAkBN,IAAlB,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADA,CADF,CAFF,CADD;AAgBA;;AA1EkC;;AA6EpC,eAAelB,KAAf","sourcesContent":["import React, {Component} from 'react';\n\nclass List2 extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfiltered: []\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\t\n\tcomponentDidMount() {\n    this.setState({\n      filtered: this.props.items\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      filtered: nextProps.items\n    });\n  }\n\t\n\thandleChange(e) {\n\t\t// Variable to hold the original version of the list\n    let currentList = [];\n\t\t// Variable to hold the filtered list before putting into state\n    let newList = [];\n\t\t\n\t\t// If the search bar isn't empty\n    if (e.target.value !== \"\") {\n\t\t\t// Assign the original list to currentList\n      currentList = this.props.items;\n\t\t\t\n\t\t\t// Use .filter() to determine which items should be displayed\n\t\t\t// based on the search terms\n      newList = currentList.filter(item => {\n\t\t\t\t// change current item to lowercase\n\t\tconst lc = item.toLowerCase();\n\t\t//const lc = \"hello\"; \n\t\t\t\t// change search term to lowercase\n\t\tconst filter = e.target.value.toLowerCase();\n\t\t//const filter = e.target.value; \n\t\t\t\t// check to see if the current list item includes the search term\n\t\t\t\t// If it does, it will be added to newList. Using lowercase eliminates\n\t\t\t\t// issues with capitalization in search terms and search content\n\t\treturn lc.includes(filter);\n\t\t//return lc; \n      });\n    } else {\n\t\t\t// If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    }\n\t\t// Set the filtered state based on what our rules added to newList\n    this.setState({\n      filtered: newList\n    });\n  }\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search...\" />\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.filtered.map(item => (\n\t\t\t\t\t\t\t<li key={item}>\n\t\t\t\t\t\t\t\t{item} &nbsp;\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName=\"delete\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.props.delete(item)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default List2"]},"metadata":{},"sourceType":"module"}