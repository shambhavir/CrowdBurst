{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BaseEventStream, Event, StitchClientError, StitchClientErrorCode, StitchEvent } from \"mongodb-stitch-core-sdk\";\n\nvar EventSourceEventStream = function (_super) {\n  __extends(EventSourceEventStream, _super);\n\n  function EventSourceEventStream(evtSrc, onOpen, onOpenError, reconnecter) {\n    var _this = _super.call(this, reconnecter) || this;\n\n    _this.evtSrc = evtSrc;\n    _this.onOpenError = onOpenError;\n    _this.openedOnce = false;\n\n    _this.evtSrc.onopen = function (e) {\n      onOpen(_this);\n      _this.openedOnce = true;\n    };\n\n    _this.reset();\n\n    return _this;\n  }\n\n  EventSourceEventStream.prototype.open = function () {\n    if (this.closed) {\n      throw new StitchClientError(StitchClientErrorCode.StreamClosed);\n    }\n  };\n\n  EventSourceEventStream.prototype.afterClose = function () {\n    this.evtSrc.close();\n  };\n\n  EventSourceEventStream.prototype.onReconnect = function (next) {\n    this.evtSrc = next.evtSrc;\n    this.reset();\n    this.events = next.events.concat(this.events);\n  };\n\n  EventSourceEventStream.prototype.reset = function () {\n    var _this = this;\n\n    this.evtSrc.onmessage = function (e) {\n      _this.events.push(new Event(Event.MESSAGE_EVENT, e.data));\n\n      _this.poll();\n    };\n\n    this.evtSrc.onerror = function (e) {\n      if (e instanceof MessageEvent) {\n        _this.lastErr = e.data;\n\n        _this.events.push(new Event(StitchEvent.ERROR_EVENT_NAME, _this.lastErr));\n\n        _this.close();\n\n        _this.poll();\n\n        return;\n      }\n\n      if (!_this.openedOnce) {\n        _this.close();\n\n        _this.onOpenError(new Error(\"event source failed to open and will not reconnect; check network log for more details\"));\n\n        return;\n      }\n\n      _this.evtSrc.close();\n\n      _this.reconnect();\n    };\n  };\n\n  return EventSourceEventStream;\n}(BaseEventStream);\n\nexport default EventSourceEventStream;","map":{"version":3,"sources":["../../../../../src/core/internal/net/EventSourceEventStream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAgBA,SACE,eADF,EAEE,KAFF,EAGE,iBAHF,EAIE,qBAJF,EAKE,WALF,QAMO,yBANP;;AASA,IAAA,sBAAA,GAAA,UAAA,MAAA,EAAA;AAAoD,EAAA,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;;AAKlD,WAAA,sBAAA,CACE,MADF,EAEE,MAFF,EAGE,WAHF,EAIE,WAJF,EAIqD;AAJrD,QAAA,KAAA,GAME,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN,KAAkB,IANpB;;AAOE,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AACA,IAAA,KAAI,CAAC,WAAL,GAAmB,WAAnB;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAlB;;AAEA,IAAA,KAAI,CAAC,MAAL,CAAY,MAAZ,GAAqB,UAAA,CAAA,EAAC;AACpB,MAAA,MAAM,CAAC,KAAD,CAAN;AACA,MAAA,KAAI,CAAC,UAAL,GAAkB,IAAlB;AACD,KAHD;;AAIA,IAAA,KAAI,CAAC,KAAL;;;AACD;;AAEM,EAAA,sBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACE,QAAI,KAAK,MAAT,EAAiB;AACf,YAAM,IAAI,iBAAJ,CAAsB,qBAAqB,CAAC,YAA5C,CAAN;AACD;AACF,GAJM;;AAMA,EAAA,sBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,SAAK,MAAL,CAAY,KAAZ;AACD,GAFM;;AAIG,EAAA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,IAAtB,EAAkD;AAChD,SAAK,MAAL,GAAc,IAAI,CAAC,MAAnB;AACA,SAAK,KAAL;AACA,SAAK,MAAL,GAAc,IAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,KAAK,MAAxB,CAAd;AACD,GAJS;;AAMF,EAAA,sBAAA,CAAA,SAAA,CAAA,KAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,MAAL,CAAY,SAAZ,GAAwB,UAAA,CAAA,EAAC;AACvB,MAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,IAAI,KAAJ,CAAU,KAAK,CAAC,aAAhB,EAA+B,CAAC,CAAC,IAAjC,CAAjB;;AACA,MAAA,KAAI,CAAC,IAAL;AACD,KAHD;;AAIA,SAAK,MAAL,CAAY,OAAZ,GAAsB,UAAA,CAAA,EAAC;AACrB,UAAI,CAAC,YAAY,YAAjB,EAA+B;AAC7B,QAAA,KAAI,CAAC,OAAL,GAAe,CAAC,CAAC,IAAjB;;AACA,QAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,IAAI,KAAJ,CAAU,WAAW,CAAC,gBAAtB,EAAwC,KAAI,CAAC,OAA7C,CAAjB;;AACA,QAAA,KAAI,CAAC,KAAL;;AACA,QAAA,KAAI,CAAC,IAAL;;AACA;AACD;;AACD,UAAI,CAAC,KAAI,CAAC,UAAV,EAAsB;AACpB,QAAA,KAAI,CAAC,KAAL;;AACA,QAAA,KAAI,CAAC,WAAL,CAAiB,IAAI,KAAJ,CAAU,wFAAV,CAAjB;;AACA;AACD;;AACD,MAAA,KAAI,CAAC,MAAL,CAAY,KAAZ;;AACA,MAAA,KAAI,CAAC,SAAL;AACD,KAfD;AAgBD,GArBO;;AAsBV,SAAA,sBAAA;AAAC,CA7DD,CAAoD,eAApD,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseEventStream, Event, StitchClientError, StitchClientErrorCode, StitchEvent } from \"mongodb-stitch-core-sdk\";\nvar EventSourceEventStream = (function (_super) {\n    __extends(EventSourceEventStream, _super);\n    function EventSourceEventStream(evtSrc, onOpen, onOpenError, reconnecter) {\n        var _this = _super.call(this, reconnecter) || this;\n        _this.evtSrc = evtSrc;\n        _this.onOpenError = onOpenError;\n        _this.openedOnce = false;\n        _this.evtSrc.onopen = function (e) {\n            onOpen(_this);\n            _this.openedOnce = true;\n        };\n        _this.reset();\n        return _this;\n    }\n    EventSourceEventStream.prototype.open = function () {\n        if (this.closed) {\n            throw new StitchClientError(StitchClientErrorCode.StreamClosed);\n        }\n    };\n    EventSourceEventStream.prototype.afterClose = function () {\n        this.evtSrc.close();\n    };\n    EventSourceEventStream.prototype.onReconnect = function (next) {\n        this.evtSrc = next.evtSrc;\n        this.reset();\n        this.events = next.events.concat(this.events);\n    };\n    EventSourceEventStream.prototype.reset = function () {\n        var _this = this;\n        this.evtSrc.onmessage = function (e) {\n            _this.events.push(new Event(Event.MESSAGE_EVENT, e.data));\n            _this.poll();\n        };\n        this.evtSrc.onerror = function (e) {\n            if (e instanceof MessageEvent) {\n                _this.lastErr = e.data;\n                _this.events.push(new Event(StitchEvent.ERROR_EVENT_NAME, _this.lastErr));\n                _this.close();\n                _this.poll();\n                return;\n            }\n            if (!_this.openedOnce) {\n                _this.close();\n                _this.onOpenError(new Error(\"event source failed to open and will not reconnect; check network log for more details\"));\n                return;\n            }\n            _this.evtSrc.close();\n            _this.reconnect();\n        };\n    };\n    return EventSourceEventStream;\n}(BaseEventStream));\nexport default EventSourceEventStream;\n//# sourceMappingURL=EventSourceEventStream.js.map"]},"metadata":{},"sourceType":"module"}