{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar crypto = require('crypto');\n\nvar AuthProvider = require('./auth_provider').AuthProvider;\n/**\n * Creates a new MongoCR authentication mechanism\n *\n * @extends AuthProvider\n */\n\n\nvar MongoCR = /*#__PURE__*/function (_AuthProvider) {\n  _inherits(MongoCR, _AuthProvider);\n\n  var _super = _createSuper(MongoCR);\n\n  function MongoCR() {\n    _classCallCheck(this, MongoCR);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MongoCR, [{\n    key: \"_authenticateSingleConnection\",\n\n    /**\n     * Implementation of authentication for a single connection\n     * @override\n     */\n    value: function _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n      var username = credentials.username;\n      var password = credentials.password;\n      var source = credentials.source;\n      sendAuthCommand(connection, \"\".concat(source, \".$cmd\"), {\n        getnonce: 1\n      }, function (err, r) {\n        var nonce = null;\n        var key = null; // Get nonce\n\n        if (err == null) {\n          nonce = r.nonce; // Use node md5 generator\n\n          var md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n          md5.update(username + ':mongo:' + password, 'utf8');\n          var hash_password = md5.digest('hex'); // Final key\n\n          md5 = crypto.createHash('md5');\n          md5.update(nonce + username + hash_password, 'utf8');\n          key = md5.digest('hex');\n        }\n\n        var authenticateCommand = {\n          authenticate: 1,\n          user: username,\n          nonce: nonce,\n          key: key\n        };\n        sendAuthCommand(connection, \"\".concat(source, \".$cmd\"), authenticateCommand, callback);\n      });\n    }\n  }]);\n\n  return MongoCR;\n}(AuthProvider);\n\nmodule.exports = MongoCR;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/auth/mongocr.js"],"names":["crypto","require","AuthProvider","MongoCR","sendAuthCommand","connection","credentials","callback","username","password","source","getnonce","err","r","nonce","key","md5","createHash","update","hash_password","digest","authenticateCommand","authenticate","user","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,YAAhD;AAEA;;;;;;;IAKMC,O;;;;;;;;;;;;;;AACJ;;;;kDAI8BC,e,EAAiBC,U,EAAYC,W,EAAaC,Q,EAAU;AAChF,UAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;AACA,UAAMC,QAAQ,GAAGH,WAAW,CAACG,QAA7B;AACA,UAAMC,MAAM,GAAGJ,WAAW,CAACI,MAA3B;AAEAN,MAAAA,eAAe,CAACC,UAAD,YAAgBK,MAAhB,YAA+B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA/B,EAAgD,UAACC,GAAD,EAAMC,CAAN,EAAY;AACzE,YAAIC,KAAK,GAAG,IAAZ;AACA,YAAIC,GAAG,GAAG,IAAV,CAFyE,CAIzE;;AACA,YAAIH,GAAG,IAAI,IAAX,EAAiB;AACfE,UAAAA,KAAK,GAAGD,CAAC,CAACC,KAAV,CADe,CAEf;;AACA,cAAIE,GAAG,GAAGhB,MAAM,CAACiB,UAAP,CAAkB,KAAlB,CAAV,CAHe,CAIf;;AACAD,UAAAA,GAAG,CAACE,MAAJ,CAAWV,QAAQ,GAAG,SAAX,GAAuBC,QAAlC,EAA4C,MAA5C;AACA,cAAMU,aAAa,GAAGH,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAtB,CANe,CAOf;;AACAJ,UAAAA,GAAG,GAAGhB,MAAM,CAACiB,UAAP,CAAkB,KAAlB,CAAN;AACAD,UAAAA,GAAG,CAACE,MAAJ,CAAWJ,KAAK,GAAGN,QAAR,GAAmBW,aAA9B,EAA6C,MAA7C;AACAJ,UAAAA,GAAG,GAAGC,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAN;AACD;;AAED,YAAMC,mBAAmB,GAAG;AAC1BC,UAAAA,YAAY,EAAE,CADY;AAE1BC,UAAAA,IAAI,EAAEf,QAFoB;AAG1BM,UAAAA,KAAK,EAALA,KAH0B;AAI1BC,UAAAA,GAAG,EAAHA;AAJ0B,SAA5B;AAOAX,QAAAA,eAAe,CAACC,UAAD,YAAgBK,MAAhB,YAA+BW,mBAA/B,EAAoDd,QAApD,CAAf;AACD,OA1Bc,CAAf;AA2BD;;;;EArCmBL,Y;;AAwCtBsB,MAAM,CAACC,OAAP,GAAiBtB,OAAjB","sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\n/**\n * Creates a new MongoCR authentication mechanism\n *\n * @extends AuthProvider\n */\nclass MongoCR extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n\n    sendAuthCommand(connection, `${source}.$cmd`, { getnonce: 1 }, (err, r) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        nonce = r.nonce;\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex');\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n\n      sendAuthCommand(connection, `${source}.$cmd`, authenticateCommand, callback);\n    });\n  }\n}\n\nmodule.exports = MongoCR;\n"]},"metadata":{},"sourceType":"script"}