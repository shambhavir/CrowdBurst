{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar BulkWriteOperation = require('./bulk_write');\n\nvar MongoError = require('../core').MongoError;\n\nvar prepareDocs = require('./common_functions').prepareDocs;\n\nvar InsertManyOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(InsertManyOperation, _OperationBase);\n\n  var _super = _createSuper(InsertManyOperation);\n\n  function InsertManyOperation(collection, docs, options) {\n    var _this;\n\n    _classCallCheck(this, InsertManyOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    _this.docs = docs;\n    return _this;\n  }\n\n  _createClass(InsertManyOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var docs = this.docs;\n      var options = this.options;\n\n      if (!Array.isArray(docs)) {\n        return callback(MongoError.create({\n          message: 'docs parameter must be an array of documents',\n          driver: true\n        }));\n      } // If keep going set unordered\n\n\n      options['serializeFunctions'] = options['serializeFunctions'] || coll.s.serializeFunctions;\n      docs = prepareDocs(coll, docs, options); // Generate the bulk write operations\n\n      var operations = [{\n        insertMany: docs\n      }];\n      var bulkWriteOperation = new BulkWriteOperation(coll, operations, options);\n      bulkWriteOperation.execute(function (err, result) {\n        if (err) return callback(err, null);\n        callback(null, mapInsertManyResults(docs, result));\n      });\n    }\n  }]);\n\n  return InsertManyOperation;\n}(OperationBase);\n\nfunction mapInsertManyResults(docs, r) {\n  var finalResult = {\n    result: {\n      ok: 1,\n      n: r.insertedCount\n    },\n    ops: docs,\n    insertedCount: r.insertedCount,\n    insertedIds: r.insertedIds\n  };\n\n  if (r.getLastOp()) {\n    finalResult.result.opTime = r.getLastOp();\n  }\n\n  return finalResult;\n}\n\nmodule.exports = InsertManyOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/insert_many.js"],"names":["OperationBase","require","BulkWriteOperation","MongoError","prepareDocs","InsertManyOperation","collection","docs","options","callback","coll","Array","isArray","create","message","driver","s","serializeFunctions","operations","insertMany","bulkWriteOperation","execute","err","result","mapInsertManyResults","r","finalResult","ok","n","insertedCount","ops","insertedIds","getLastOp","opTime","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,IAAME,kBAAkB,GAAGD,OAAO,CAAC,cAAD,CAAlC;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,UAAtC;;AACA,IAAMC,WAAW,GAAGH,OAAO,CAAC,oBAAD,CAAP,CAA8BG,WAAlD;;IAEMC,mB;;;;;AACJ,+BAAYC,UAAZ,EAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AAAA;;AAAA;;AACrC,8BAAMA,OAAN;AAEA,UAAKF,UAAL,GAAkBA,UAAlB;AACA,UAAKC,IAAL,GAAYA,IAAZ;AAJqC;AAKtC;;;;4BAEOE,Q,EAAU;AAChB,UAAMC,IAAI,GAAG,KAAKJ,UAAlB;AACA,UAAIC,IAAI,GAAG,KAAKA,IAAhB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAL,EAA0B;AACxB,eAAOE,QAAQ,CACbN,UAAU,CAACU,MAAX,CAAkB;AAAEC,UAAAA,OAAO,EAAE,8CAAX;AAA2DC,UAAAA,MAAM,EAAE;AAAnE,SAAlB,CADa,CAAf;AAGD,OATe,CAWhB;;;AACAP,MAAAA,OAAO,CAAC,oBAAD,CAAP,GAAgCA,OAAO,CAAC,oBAAD,CAAP,IAAiCE,IAAI,CAACM,CAAL,CAAOC,kBAAxE;AAEAV,MAAAA,IAAI,GAAGH,WAAW,CAACM,IAAD,EAAOH,IAAP,EAAaC,OAAb,CAAlB,CAdgB,CAgBhB;;AACA,UAAMU,UAAU,GAAG,CACjB;AACEC,QAAAA,UAAU,EAAEZ;AADd,OADiB,CAAnB;AAMA,UAAMa,kBAAkB,GAAG,IAAIlB,kBAAJ,CAAuBQ,IAAvB,EAA6BQ,UAA7B,EAAyCV,OAAzC,CAA3B;AAEAY,MAAAA,kBAAkB,CAACC,OAAnB,CAA2B,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC1C,YAAID,GAAJ,EAAS,OAAOb,QAAQ,CAACa,GAAD,EAAM,IAAN,CAAf;AACTb,QAAAA,QAAQ,CAAC,IAAD,EAAOe,oBAAoB,CAACjB,IAAD,EAAOgB,MAAP,CAA3B,CAAR;AACD,OAHD;AAID;;;;EArC+BvB,a;;AAwClC,SAASwB,oBAAT,CAA8BjB,IAA9B,EAAoCkB,CAApC,EAAuC;AACrC,MAAMC,WAAW,GAAG;AAClBH,IAAAA,MAAM,EAAE;AAAEI,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,CAAC,EAAEH,CAAC,CAACI;AAAd,KADU;AAElBC,IAAAA,GAAG,EAAEvB,IAFa;AAGlBsB,IAAAA,aAAa,EAAEJ,CAAC,CAACI,aAHC;AAIlBE,IAAAA,WAAW,EAAEN,CAAC,CAACM;AAJG,GAApB;;AAOA,MAAIN,CAAC,CAACO,SAAF,EAAJ,EAAmB;AACjBN,IAAAA,WAAW,CAACH,MAAZ,CAAmBU,MAAnB,GAA4BR,CAAC,CAACO,SAAF,EAA5B;AACD;;AAED,SAAON,WAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB9B,mBAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst BulkWriteOperation = require('./bulk_write');\nconst MongoError = require('../core').MongoError;\nconst prepareDocs = require('./common_functions').prepareDocs;\n\nclass InsertManyOperation extends OperationBase {\n  constructor(collection, docs, options) {\n    super(options);\n\n    this.collection = collection;\n    this.docs = docs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    let docs = this.docs;\n    const options = this.options;\n\n    if (!Array.isArray(docs)) {\n      return callback(\n        MongoError.create({ message: 'docs parameter must be an array of documents', driver: true })\n      );\n    }\n\n    // If keep going set unordered\n    options['serializeFunctions'] = options['serializeFunctions'] || coll.s.serializeFunctions;\n\n    docs = prepareDocs(coll, docs, options);\n\n    // Generate the bulk write operations\n    const operations = [\n      {\n        insertMany: docs\n      }\n    ];\n\n    const bulkWriteOperation = new BulkWriteOperation(coll, operations, options);\n\n    bulkWriteOperation.execute((err, result) => {\n      if (err) return callback(err, null);\n      callback(null, mapInsertManyResults(docs, result));\n    });\n  }\n}\n\nfunction mapInsertManyResults(docs, r) {\n  const finalResult = {\n    result: { ok: 1, n: r.insertedCount },\n    ops: docs,\n    insertedCount: r.insertedCount,\n    insertedIds: r.insertedIds\n  };\n\n  if (r.getLastOp()) {\n    finalResult.result.opTime = r.getLastOp();\n  }\n\n  return finalResult;\n}\n\nmodule.exports = InsertManyOperation;\n"]},"metadata":{},"sourceType":"script"}