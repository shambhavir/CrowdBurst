{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Form2 from './Components/Form2';\nimport * as serviceWorker from './serviceWorker';\nimport Grocery from \"./Components/Grocery\"; // import Groceries from './Components/Groceries'; \n// import GrocerySearch2 from './GrocerySearch2'; \n//import Search from './Components/Search'; \n//import { render } from 'ejs';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql'\n  })\n});\n\nconst App2 = () => /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Form2, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Grocery, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }\n})); // ReactDOM.render(<App2 />, document.getElementById('root'))\n\n\nrender( /*#__PURE__*/React.createElement(App2, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 8\n  }\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js"],"names":["React","Component","ReactDOM","render","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","BrowserRouter","Route","Switch","Form2","serviceWorker","Grocery","client","cache","link","uri","App2","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAA+CC,KAA/C,QAA4D,gBAA5D;AACA,SAAQC,iBAAR,QAAgC,0BAAhC;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;AAC9Ba,EAAAA,KAAK,EAAE,IAAIX,aAAJ,EADuB;AAE9BY,EAAAA,IAAI,EAAE,IAAIb,QAAJ,CAAa;AACjBc,IAAAA,GAAG,EAAE;AADY,GAAb;AAFwB,CAAjB,CAAf;;AAOA,MAAMC,IAAI,GAAG,mBAGX,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAIJ,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAIE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,eAKE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALF,CAHF,C,CAiBA;;;AAEAd,MAAM,eAAC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,EAAUmB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAV,CAAN,C,CAGA;AACA;AACA;;AACAR,aAAa,CAACS,UAAd","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache,split } from '@apollo/client'; \nimport {getMainDefinition} from '@apollo/client/utilities'; \nimport {WebSocketLink} from '@apollo/link-ws'; \nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Form2 from './Components/Form2';\nimport * as serviceWorker from './serviceWorker';\nimport Grocery from \"./Components/Grocery\"; \n// import Groceries from './Components/Groceries'; \n// import GrocerySearch2 from './GrocerySearch2'; \n//import Search from './Components/Search'; \n\n//import { render } from 'ejs';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n\n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n\n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n\n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n  })\n}); \n\nconst App2 = () => (\n  \n\n  <ApolloProvider client = {client}>\n    {/* <div>\n      <h2>My first React App</h2>\n    </div> */}\n    <Form2/>\n    <Grocery/>\n  {/* <Switch> \n        <Route path=\"/grocery/:id\" component={Groceries} />\n        <Route path=\"/\" component={GrocerySearch2} />\n  </Switch>  */}\n  </ApolloProvider>\n); \n\n\n// ReactDOM.render(<App2 />, document.getElementById('root'))\n\nrender(<App2/>, document.getElementById('root')); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}