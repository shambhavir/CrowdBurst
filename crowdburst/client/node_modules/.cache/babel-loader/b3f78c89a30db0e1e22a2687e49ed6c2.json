{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Denque = require('denque');\n\nvar EventEmitter = require('events');\n\nvar isResumableError = require('./error').isResumableError;\n\nvar MongoError = require('./core').MongoError;\n\nvar Cursor = require('./cursor');\n\nvar relayEvents = require('./core/utils').relayEvents;\n\nvar maxWireVersion = require('./core/utils').maxWireVersion;\n\nvar maybePromise = require('./utils').maybePromise;\n\nvar AggregateOperation = require('./operations/aggregate');\n\nvar kResumeQueue = Symbol('resumeQueue');\nvar CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nvar CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nvar CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n/**\n * @typedef ResumeToken\n * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.\n * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token\n */\n\n/**\n * @typedef OperationTime\n * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\n\n/**\n * @typedef ChangeStreamOptions\n * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.\n * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.\n * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.\n * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.\n * @property {number} [batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n */\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @class ChangeStream\n * @since 3.0.0\n * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n * @param {ChangeStreamOptions} [options] Optional settings\n * @fires ChangeStream#close\n * @fires ChangeStream#change\n * @fires ChangeStream#end\n * @fires ChangeStream#error\n * @fires ChangeStream#resumeTokenChanged\n * @return {ChangeStream} a ChangeStream instance.\n */\n\nvar ChangeStream = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(ChangeStream, _EventEmitter);\n\n  var _super = _createSuper(ChangeStream);\n\n  function ChangeStream(parent, pipeline, options) {\n    var _this;\n\n    _classCallCheck(this, ChangeStream);\n\n    _this = _super.call(this);\n\n    var Collection = require('./collection');\n\n    var Db = require('./db');\n\n    var MongoClient = require('./mongo_client');\n\n    _this.pipeline = pipeline || [];\n    _this.options = options || {};\n    _this.parent = parent;\n    _this.namespace = parent.s.namespace;\n\n    if (parent instanceof Collection) {\n      _this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      _this.topology = parent.s.db.serverConfig;\n    } else if (parent instanceof Db) {\n      _this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      _this.topology = parent.serverConfig;\n    } else if (parent instanceof MongoClient) {\n      _this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      _this.topology = parent.topology;\n    } else {\n      throw new TypeError('parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient');\n    }\n\n    _this.promiseLibrary = parent.s.promiseLibrary;\n\n    if (!_this.options.readPreference && parent.s.readPreference) {\n      _this.options.readPreference = parent.s.readPreference;\n    }\n\n    _this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    _this.cursor = createChangeStreamCursor(_assertThisInitialized(_this), options);\n    _this.closed = false; // Listen for any `change` listeners being added to ChangeStream\n\n    _this.on('newListener', function (eventName) {\n      if (eventName === 'change' && _this.cursor && _this.listenerCount('change') === 0) {\n        _this.cursor.on('data', function (change) {\n          return processNewChange(_assertThisInitialized(_this), change);\n        });\n      }\n    }); // Listen for all `change` listeners being removed from ChangeStream\n\n\n    _this.on('removeListener', function (eventName) {\n      if (eventName === 'change' && _this.listenerCount('change') === 0 && _this.cursor) {\n        _this.cursor.removeAllListeners('data');\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * @property {ResumeToken} resumeToken\n   * The cached resume token that will be used to resume\n   * after the most recently returned change.\n   */\n\n\n  _createClass(ChangeStream, [{\n    key: \"hasNext\",\n\n    /**\n     * Check if there is any document still available in the Change Stream\n     * @function ChangeStream.prototype.hasNext\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @throws {MongoError}\n     * @returns {Promise|void} returns Promise if no callback passed\n     */\n    value: function hasNext(callback) {\n      var _this2 = this;\n\n      return maybePromise(this.parent, callback, function (cb) {\n        getCursor(_this2, function (err, cursor) {\n          if (err) return cb(err); // failed to resume, raise an error\n\n          cursor.hasNext(cb);\n        });\n      });\n    }\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @function ChangeStream.prototype.next\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @throws {MongoError}\n     * @returns {Promise|void} returns Promise if no callback passed\n     */\n\n  }, {\n    key: \"next\",\n    value: function next(callback) {\n      var _this3 = this;\n\n      return maybePromise(this.parent, callback, function (cb) {\n        getCursor(_this3, function (err, cursor) {\n          if (err) return cb(err); // failed to resume, raise an error\n\n          cursor.next(function (error, change) {\n            if (error) {\n              _this3[kResumeQueue].push(function () {\n                return _this3.next(cb);\n              });\n\n              processError(_this3, error, cb);\n              return;\n            }\n\n            processNewChange(_this3, change, cb);\n          });\n        });\n      });\n    }\n    /**\n     * Is the change stream closed\n     * @method ChangeStream.prototype.isClosed\n     * @param  {boolean} [checkCursor=true] also check if the underlying cursor is closed\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this.closed || this.cursor && this.cursor.isClosed();\n    }\n    /**\n     * Close the Change Stream\n     * @method ChangeStream.prototype.close\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @return {Promise} returns Promise if no callback passed\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this4 = this;\n\n      return maybePromise(this.parent, callback, function (cb) {\n        if (_this4.closed) return cb(); // flag the change stream as explicitly closed\n\n        _this4.closed = true;\n        if (!_this4.cursor) return cb(); // Tidy up the existing cursor\n\n        var cursor = _this4.cursor;\n        return cursor.close(function (err) {\n          ['data', 'close', 'end', 'error'].forEach(function (event) {\n            return cursor.removeAllListeners(event);\n          });\n          _this4.cursor = undefined;\n          return cb(err);\n        });\n      });\n    }\n    /**\n     * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n     * @method\n     * @param {Writable} destination The destination for writing data\n     * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\n     * @return {null}\n     */\n\n  }, {\n    key: \"pipe\",\n    value: function pipe(destination, options) {\n      if (!this.pipeDestinations) {\n        this.pipeDestinations = [];\n      }\n\n      this.pipeDestinations.push(destination);\n      return this.cursor.pipe(destination, options);\n    }\n    /**\n     * This method will remove the hooks set up for a previous pipe() call.\n     * @param {Writable} [destination] The destination for writing data\n     * @return {null}\n     */\n\n  }, {\n    key: \"unpipe\",\n    value: function unpipe(destination) {\n      if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n        this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n      }\n\n      return this.cursor.unpipe(destination);\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @method\n     * @param {object} [options] Optional settings.\n     * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n     * @return {Cursor}\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      this.streamOptions = options;\n      return this.cursor.stream(options);\n    }\n    /**\n     * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n     * @return {null}\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      return this.cursor.pause();\n    }\n    /**\n     * This method will cause the readable stream to resume emitting data events.\n     * @return {null}\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      return this.cursor.resume();\n    }\n  }, {\n    key: \"resumeToken\",\n    get: function get() {\n      return this.cursor.resumeToken;\n    }\n  }]);\n\n  return ChangeStream;\n}(EventEmitter);\n\nvar ChangeStreamCursor = /*#__PURE__*/function (_Cursor) {\n  _inherits(ChangeStreamCursor, _Cursor);\n\n  var _super2 = _createSuper(ChangeStreamCursor);\n\n  function ChangeStreamCursor(topology, operation, options) {\n    var _this5;\n\n    _classCallCheck(this, ChangeStreamCursor);\n\n    _this5 = _super2.call(this, topology, operation, options);\n    options = options || {};\n    _this5._resumeToken = null;\n    _this5.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      _this5.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      _this5.resumeToken = options.resumeAfter;\n    }\n\n    return _this5;\n  }\n\n  _createClass(ChangeStreamCursor, [{\n    key: \"cacheResumeToken\",\n    value: function cacheResumeToken(resumeToken) {\n      if (this.bufferedCount() === 0 && this.cursorState.postBatchResumeToken) {\n        this.resumeToken = this.cursorState.postBatchResumeToken;\n      } else {\n        this.resumeToken = resumeToken;\n      }\n\n      this.hasReceived = true;\n    }\n  }, {\n    key: \"_processBatch\",\n    value: function _processBatch(batchName, response) {\n      var cursor = response.cursor;\n\n      if (cursor.postBatchResumeToken) {\n        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n        if (cursor[batchName].length === 0) {\n          this.resumeToken = cursor.postBatchResumeToken;\n        }\n      }\n    }\n  }, {\n    key: \"_initializeCursor\",\n    value: function _initializeCursor(callback) {\n      var _this6 = this;\n\n      _get(_getPrototypeOf(ChangeStreamCursor.prototype), \"_initializeCursor\", this).call(this, function (err, result) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var response = result.documents[0];\n\n        if (_this6.startAtOperationTime == null && _this6.resumeAfter == null && _this6.startAfter == null && maxWireVersion(_this6.server) >= 7) {\n          _this6.startAtOperationTime = response.operationTime;\n        }\n\n        _this6._processBatch('firstBatch', response);\n\n        _this6.emit('init', result);\n\n        _this6.emit('response');\n\n        callback(err, result);\n      });\n    }\n  }, {\n    key: \"_getMore\",\n    value: function _getMore(callback) {\n      var _this7 = this;\n\n      _get(_getPrototypeOf(ChangeStreamCursor.prototype), \"_getMore\", this).call(this, function (err, response) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        _this7._processBatch('nextBatch', response);\n\n        _this7.emit('more', response);\n\n        _this7.emit('response');\n\n        callback(err, response);\n      });\n    }\n  }, {\n    key: \"resumeToken\",\n    set: function set(token) {\n      this._resumeToken = token;\n      this.emit('resumeTokenChanged', token);\n    },\n    get: function get() {\n      return this._resumeToken;\n    }\n  }, {\n    key: \"resumeOptions\",\n    get: function get() {\n      var result = {};\n\n      var _iterator = _createForOfIteratorHelper(CURSOR_OPTIONS),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var optionName = _step.value;\n          if (this.options[optionName]) result[optionName] = this.options[optionName];\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.resumeToken || this.startAtOperationTime) {\n        ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(function (key) {\n          return delete result[key];\n        });\n\n        if (this.resumeToken) {\n          var resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n          result[resumeKey] = this.resumeToken;\n        } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n          result.startAtOperationTime = this.startAtOperationTime;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return ChangeStreamCursor;\n}(Cursor);\n/**\n * @event ChangeStreamCursor#response\n * internal event DO NOT USE\n * @ignore\n */\n// Create a new change stream cursor based on self's configuration\n\n\nfunction createChangeStreamCursor(self, options) {\n  var changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  var pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(self.pipeline);\n  var cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  var changeStreamCursor = new ChangeStreamCursor(self.topology, new AggregateOperation(self.parent, pipeline, options), cursorOptions);\n  relayEvents(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   *\n   * @event ChangeStream#change\n   * @type {object}\n   */\n\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function (change) {\n      processNewChange(self, change);\n    });\n  }\n  /**\n   * Change stream close event\n   *\n   * @event ChangeStream#close\n   * @type {null}\n   */\n\n  /**\n   * Change stream end event\n   *\n   * @event ChangeStream#end\n   * @type {null}\n   */\n\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   *\n   * @event ChangeStream#resumeTokenChanged\n   * @type {ResumeToken}\n   */\n\n  /**\n   * Fired when the stream encounters an error.\n   *\n   * @event ChangeStream#error\n   * @type {Error}\n   */\n\n\n  changeStreamCursor.on('error', function (error) {\n    processError(self, error);\n  });\n\n  if (self.pipeDestinations) {\n    var cursorStream = changeStreamCursor.stream(self.streamOptions);\n\n    for (var pipeDestination in self.pipeDestinations) {\n      cursorStream.pipe(pipeDestination);\n    }\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(function (name) {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n  return target;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nvar SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(function () {\n    if (options && options.start == null) options.start = process.hrtime();\n    var start = options.start || process.hrtime();\n    var timeout = options.timeout || SELECTION_TIMEOUT;\n    var readPreference = options.readPreference;\n    if (topology.isConnected({\n      readPreference: readPreference\n    })) return callback();\n    var hrElapsed = process.hrtime(start);\n    var elapsed = (hrElapsed[0] * 1e9 + hrElapsed[1]) / 1e6;\n    if (elapsed > timeout) return callback(new MongoError('Timed out waiting for connection'));\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  var cursor = changeStream.cursor;\n\n  if (changeStream.closed) {\n    if (callback) callback(new MongoError('ChangeStream is closed'));\n    return;\n  }\n\n  if (change && !change._id) {\n    var noResumeTokenError = new Error('A change stream document has been received that lacks a resume token (_id).');\n    if (!callback) return changeStream.emit('error', noResumeTokenError);\n    return callback(noResumeTokenError);\n  } // cache the resume token\n\n\n  cursor.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (!callback) return changeStream.emit('change', change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  var topology = changeStream.topology;\n  var cursor = changeStream.cursor; // If the change stream has been closed explictly, do not process error.\n\n  if (changeStream.closed) {\n    if (callback) callback(new MongoError('ChangeStream is closed'));\n    return;\n  } // if the resume succeeds, continue with the new cursor\n\n\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  } // otherwise, raise an error and close the change stream\n\n\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit('error', err);\n      changeStream.emit('close');\n    }\n\n    processResumeQueue(changeStream, err);\n    changeStream.closed = true;\n  }\n\n  if (cursor && isResumableError(error, maxWireVersion(cursor.server))) {\n    changeStream.cursor = undefined; // stop listening to all events from old cursor\n\n    ['data', 'close', 'end', 'error'].forEach(function (event) {\n      return cursor.removeAllListeners(event);\n    }); // close internal cursor, ignore errors\n\n    cursor.close();\n    waitForTopologyConnected(topology, {\n      readPreference: cursor.options.readPreference\n    }, function (err) {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n      var newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions); // attempt to continue in emitter mode\n\n      if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n      newCursor.hasNext(function (err) {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  }\n\n  if (!callback) return changeStream.emit('error', error);\n  return callback(error);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param {ChangeStream} changeStream the parent ChangeStream\n * @param {function} callback gets the cursor or error\n * @param {ChangeStreamCursor} [oldCursor] when resuming from an error, carry over options from previous cursor\n */\n\n\nfunction getCursor(changeStream, callback) {\n  if (changeStream.isClosed()) {\n    callback(new MongoError('ChangeStream is closed.'));\n    return;\n  } // if a cursor exists and it is open, return it\n\n\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  } // no cursor, queue callback until topology reconnects\n\n\n  changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param {ChangeStream} changeStream the parent ChangeStream\n * @param {ChangeStreamCursor?} changeStream.cursor the new cursor\n * @param {Error} [err] error getting a new cursor\n */\n\n\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    var request = changeStream[kResumeQueue].pop();\n\n    if (changeStream.isClosed() && !err) {\n      request(new MongoError('Change Stream is not open.'));\n      return;\n    }\n\n    request(err, changeStream.cursor);\n  }\n}\n/**\n * The callback format for results\n * @callback ChangeStream~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n\nmodule.exports = ChangeStream;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/change_stream.js"],"names":["Denque","require","EventEmitter","isResumableError","MongoError","Cursor","relayEvents","maxWireVersion","maybePromise","AggregateOperation","kResumeQueue","Symbol","CHANGE_STREAM_OPTIONS","CURSOR_OPTIONS","concat","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","ChangeStream","parent","pipeline","options","Collection","Db","MongoClient","namespace","s","type","topology","db","serverConfig","TypeError","promiseLibrary","readPreference","cursor","createChangeStreamCursor","closed","on","eventName","listenerCount","change","processNewChange","removeAllListeners","callback","cb","getCursor","err","hasNext","next","error","push","processError","isClosed","close","forEach","event","undefined","destination","pipeDestinations","pipe","indexOf","splice","unpipe","streamOptions","stream","pause","resume","resumeToken","ChangeStreamCursor","operation","_resumeToken","startAtOperationTime","startAfter","resumeAfter","bufferedCount","cursorState","postBatchResumeToken","hasReceived","batchName","response","length","result","documents","server","operationTime","_processBatch","emit","token","optionName","key","resumeKey","self","changeStreamStageOptions","fullDocument","applyKnownOptions","allChangesForCluster","$changeStream","cursorOptions","changeStreamCursor","cursorStream","pipeDestination","target","source","optionNames","name","SELECTION_TIMEOUT","waitForTopologyConnected","setTimeout","start","process","hrtime","timeout","isConnected","hrElapsed","elapsed","changeStream","_id","noResumeTokenError","Error","cacheResumeToken","resumeWithCursor","newCursor","processResumeQueue","unresumableError","resumeOptions","request","pop","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Denque = require('denque');\nconst EventEmitter = require('events');\nconst isResumableError = require('./error').isResumableError;\nconst MongoError = require('./core').MongoError;\nconst Cursor = require('./cursor');\nconst relayEvents = require('./core/utils').relayEvents;\nconst maxWireVersion = require('./core/utils').maxWireVersion;\nconst maybePromise = require('./utils').maybePromise;\nconst AggregateOperation = require('./operations/aggregate');\n\nconst kResumeQueue = Symbol('resumeQueue');\n\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(\n  CHANGE_STREAM_OPTIONS\n);\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\n/**\n * @typedef ResumeToken\n * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.\n * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token\n */\n\n/**\n * @typedef OperationTime\n * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\n\n/**\n * @typedef ChangeStreamOptions\n * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.\n * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.\n * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.\n * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.\n * @property {number} [batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n */\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @class ChangeStream\n * @since 3.0.0\n * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n * @param {ChangeStreamOptions} [options] Optional settings\n * @fires ChangeStream#close\n * @fires ChangeStream#change\n * @fires ChangeStream#end\n * @fires ChangeStream#error\n * @fires ChangeStream#resumeTokenChanged\n * @return {ChangeStream} a ChangeStream instance.\n */\nclass ChangeStream extends EventEmitter {\n  constructor(parent, pipeline, options) {\n    super();\n    const Collection = require('./collection');\n    const Db = require('./db');\n    const MongoClient = require('./mongo_client');\n\n    this.pipeline = pipeline || [];\n    this.options = options || {};\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      this.topology = parent.s.db.serverConfig;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      this.topology = parent.serverConfig;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      this.topology = parent.topology;\n    } else {\n      throw new TypeError(\n        'parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.promiseLibrary = parent.s.promiseLibrary;\n    if (!this.options.readPreference && parent.s.readPreference) {\n      this.options.readPreference = parent.s.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque();\n\n    // Create contained Change Stream cursor\n    this.cursor = createChangeStreamCursor(this, options);\n\n    this.closed = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this.cursor.on('data', change => processNewChange(this, change));\n      }\n    });\n\n    // Listen for all `change` listeners being removed from ChangeStream\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this.cursor.removeAllListeners('data');\n      }\n    });\n  }\n\n  /**\n   * @property {ResumeToken} resumeToken\n   * The cached resume token that will be used to resume\n   * after the most recently returned change.\n   */\n  get resumeToken() {\n    return this.cursor.resumeToken;\n  }\n\n  /**\n   * Check if there is any document still available in the Change Stream\n   * @function ChangeStream.prototype.hasNext\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @returns {Promise|void} returns Promise if no callback passed\n   */\n  hasNext(callback) {\n    return maybePromise(this.parent, callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err) return cb(err); // failed to resume, raise an error\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  /**\n   * Get the next available document from the Change Stream, returns null if no more documents are available.\n   * @function ChangeStream.prototype.next\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @returns {Promise|void} returns Promise if no callback passed\n   */\n  next(callback) {\n    return maybePromise(this.parent, callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err) return cb(err); // failed to resume, raise an error\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n          processNewChange(this, change, cb);\n        });\n      });\n    });\n  }\n\n  /**\n   * Is the change stream closed\n   * @method ChangeStream.prototype.isClosed\n   * @param  {boolean} [checkCursor=true] also check if the underlying cursor is closed\n   * @return {boolean}\n   */\n  isClosed() {\n    return this.closed || (this.cursor && this.cursor.isClosed());\n  }\n\n  /**\n   * Close the Change Stream\n   * @method ChangeStream.prototype.close\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @return {Promise} returns Promise if no callback passed\n   */\n  close(callback) {\n    return maybePromise(this.parent, callback, cb => {\n      if (this.closed) return cb();\n\n      // flag the change stream as explicitly closed\n      this.closed = true;\n\n      if (!this.cursor) return cb();\n\n      // Tidy up the existing cursor\n      const cursor = this.cursor;\n\n      return cursor.close(err => {\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n        this.cursor = undefined;\n\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n   * @method\n   * @param {Writable} destination The destination for writing data\n   * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\n   * @return {null}\n   */\n  pipe(destination, options) {\n    if (!this.pipeDestinations) {\n      this.pipeDestinations = [];\n    }\n    this.pipeDestinations.push(destination);\n    return this.cursor.pipe(destination, options);\n  }\n\n  /**\n   * This method will remove the hooks set up for a previous pipe() call.\n   * @param {Writable} [destination] The destination for writing data\n   * @return {null}\n   */\n  unpipe(destination) {\n    if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n      this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n    }\n    return this.cursor.unpipe(destination);\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @method\n   * @param {object} [options] Optional settings.\n   * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n   * @return {Cursor}\n   */\n  stream(options) {\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n\n  /**\n   * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n   * @return {null}\n   */\n  pause() {\n    return this.cursor.pause();\n  }\n\n  /**\n   * This method will cause the readable stream to resume emitting data events.\n   * @return {null}\n   */\n  resume() {\n    return this.cursor.resume();\n  }\n}\n\nclass ChangeStreamCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n\n    options = options || {};\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit('resumeTokenChanged', token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = {};\n    for (const optionName of CURSOR_OPTIONS) {\n      if (this.options[optionName]) result[optionName] = this.options[optionName];\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => delete result[key]);\n\n      if (this.resumeToken) {\n        const resumeKey =\n          this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        result[resumeKey] = this.resumeToken;\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.cursorState.postBatchResumeToken) {\n      this.resumeToken = this.cursorState.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName, response) {\n    const cursor = response.cursor;\n    if (cursor.postBatchResumeToken) {\n      this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  _initializeCursor(callback) {\n    super._initializeCursor((err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const response = result.documents[0];\n\n      if (\n        this.startAtOperationTime == null &&\n        this.resumeAfter == null &&\n        this.startAfter == null &&\n        maxWireVersion(this.server) >= 7\n      ) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit('init', result);\n      this.emit('response');\n      callback(err, result);\n    });\n  }\n\n  _getMore(callback) {\n    super._getMore((err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit('more', response);\n      this.emit('response');\n      callback(err, response);\n    });\n  }\n}\n\n/**\n * @event ChangeStreamCursor#response\n * internal event DO NOT USE\n * @ignore\n */\n\n// Create a new change stream cursor based on self's configuration\nfunction createChangeStreamCursor(self, options) {\n  const changeStreamStageOptions = { fullDocument: options.fullDocument || 'default' };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{ $changeStream: changeStreamStageOptions }].concat(self.pipeline);\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n\n  const changeStreamCursor = new ChangeStreamCursor(\n    self.topology,\n    new AggregateOperation(self.parent, pipeline, options),\n    cursorOptions\n  );\n\n  relayEvents(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);\n\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   *\n   * @event ChangeStream#change\n   * @type {object}\n   */\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function(change) {\n      processNewChange(self, change);\n    });\n  }\n\n  /**\n   * Change stream close event\n   *\n   * @event ChangeStream#close\n   * @type {null}\n   */\n\n  /**\n   * Change stream end event\n   *\n   * @event ChangeStream#end\n   * @type {null}\n   */\n\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   *\n   * @event ChangeStream#resumeTokenChanged\n   * @type {ResumeToken}\n   */\n\n  /**\n   * Fired when the stream encounters an error.\n   *\n   * @event ChangeStream#error\n   * @type {Error}\n   */\n  changeStreamCursor.on('error', function(error) {\n    processError(self, error);\n  });\n\n  if (self.pipeDestinations) {\n    const cursorStream = changeStreamCursor.stream(self.streamOptions);\n    for (let pipeDestination in self.pipeDestinations) {\n      cursorStream.pipe(pipeDestination);\n    }\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n\n  return target;\n}\n\n// This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\nconst SELECTION_TIMEOUT = 30000;\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) options.start = process.hrtime();\n    const start = options.start || process.hrtime();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n    const readPreference = options.readPreference;\n\n    if (topology.isConnected({ readPreference })) return callback();\n    const hrElapsed = process.hrtime(start);\n    const elapsed = (hrElapsed[0] * 1e9 + hrElapsed[1]) / 1e6;\n    if (elapsed > timeout) return callback(new MongoError('Timed out waiting for connection'));\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  const cursor = changeStream.cursor;\n\n  if (changeStream.closed) {\n    if (callback) callback(new MongoError('ChangeStream is closed'));\n    return;\n  }\n\n  if (change && !change._id) {\n    const noResumeTokenError = new Error(\n      'A change stream document has been received that lacks a resume token (_id).'\n    );\n\n    if (!callback) return changeStream.emit('error', noResumeTokenError);\n    return callback(noResumeTokenError);\n  }\n\n  // cache the resume token\n  cursor.cacheResumeToken(change._id);\n\n  // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n  changeStream.options.startAtOperationTime = undefined;\n\n  // Return the change\n  if (!callback) return changeStream.emit('change', change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  const topology = changeStream.topology;\n  const cursor = changeStream.cursor;\n\n  // If the change stream has been closed explictly, do not process error.\n  if (changeStream.closed) {\n    if (callback) callback(new MongoError('ChangeStream is closed'));\n    return;\n  }\n\n  // if the resume succeeds, continue with the new cursor\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  }\n\n  // otherwise, raise an error and close the change stream\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit('error', err);\n      changeStream.emit('close');\n    }\n    processResumeQueue(changeStream, err);\n    changeStream.closed = true;\n  }\n\n  if (cursor && isResumableError(error, maxWireVersion(cursor.server))) {\n    changeStream.cursor = undefined;\n\n    // stop listening to all events from old cursor\n    ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n\n    // close internal cursor, ignore errors\n    cursor.close();\n\n    waitForTopologyConnected(topology, { readPreference: cursor.options.readPreference }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err);\n\n      // create a new cursor, preserving the old cursor's options\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n\n      // attempt to continue in emitter mode\n      if (!callback) return resumeWithCursor(newCursor);\n\n      // attempt to continue in iterator mode\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  }\n\n  if (!callback) return changeStream.emit('error', error);\n  return callback(error);\n}\n\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param {ChangeStream} changeStream the parent ChangeStream\n * @param {function} callback gets the cursor or error\n * @param {ChangeStreamCursor} [oldCursor] when resuming from an error, carry over options from previous cursor\n */\nfunction getCursor(changeStream, callback) {\n  if (changeStream.isClosed()) {\n    callback(new MongoError('ChangeStream is closed.'));\n    return;\n  }\n\n  // if a cursor exists and it is open, return it\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  }\n\n  // no cursor, queue callback until topology reconnects\n  changeStream[kResumeQueue].push(callback);\n}\n\n/**\n * Drain the resume queue when a new has become available\n *\n * @param {ChangeStream} changeStream the parent ChangeStream\n * @param {ChangeStreamCursor?} changeStream.cursor the new cursor\n * @param {Error} [err] error getting a new cursor\n */\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (changeStream.isClosed() && !err) {\n      request(new MongoError('Change Stream is not open.'));\n      return;\n    }\n    request(err, changeStream.cursor);\n  }\n}\n\n/**\n * The callback format for results\n * @callback ChangeStream~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\nmodule.exports = ChangeStream;\n"]},"metadata":{},"sourceType":"script"}