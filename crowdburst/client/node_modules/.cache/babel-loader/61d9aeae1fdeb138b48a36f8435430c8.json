{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Form2.js\";\nimport React, { Component } from 'react';\nimport Grocery from \"./Components/Grocery\";\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql'\n  })\n});\n\nclass Form2 extends React.Component {\n  // <form>\n  //     <label htmlFor = \"Grocery Store\">Add Grocery Store</label>\n  //     <input type = \"text\" name = \"Grocery Store\" id=\"Grocery Store\"/>\n  //     <button>Add</button>\n  //     <input type = \"submit\" value = \"Submit\"/>\n  // </form>\n  // <button className=\"button is-info\">\n  //     Add Grocery Store\n  // </button>\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [/*#__PURE__*/React.createElement(ApolloProvider, {\n        client: client,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grocery, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      })) //\"trial\"\n      ]\n    };\n    this.addItem = this.addItem.bind(this);\n  }\n\n  addItem(e) {\n    // Prevent button click from submitting form\n    e.preventDefault(); // Create variables for our list, the item to add, and our form\n\n    let list = this.state.list;\n    const newItem = document.getElementById(\"addInput\");\n    const form = document.getElementById(\"addItemForm\"); // If our input has a value\n\n    if (newItem.value != \"\") {\n      // Add the new item to the end of our list array\n      list.push(newItem.value); // Then we use that to set the state for list\n\n      this.setState({\n        list: list\n      }); // Finally, we need to reset the form\n\n      newItem.classList.remove(\"is-danger\");\n      form.reset();\n    } else {\n      // If the input doesn't have a value, make the border red since it's required\n      newItem.classList.add(\"is-danger\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, this.state.list.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      key: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, item))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      id: \"addItemForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      id: \"addInput\",\n      placeholder: \"Grocery Store\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button is-info\",\n      onClick: this.addItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Add Item\")), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      id: \"addItemForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      id: \"addInput\",\n      placeholder: \"Address\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button is-info\",\n      onClick: this.addItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"Add Address\")))));\n  }\n\n}\n\nexport default Form2;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Form2.js"],"names":["React","Component","Grocery","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","client","cache","link","uri","Form2","constructor","props","state","list","addItem","bind","e","preventDefault","newItem","document","getElementById","form","value","push","setState","classList","remove","reset","add","render","map","item"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Grocery from \"./Components/Grocery\"; \nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'; \nconst client = new ApolloClient(\n    {\n      cache: new InMemoryCache(),\n      link: new HttpLink({\n        uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n      })\n    }\n  ); \n\n\n\nclass Form2 extends React.Component {\n    \n    \n        \n        // <form>\n\n\n        //     <label htmlFor = \"Grocery Store\">Add Grocery Store</label>\n        //     <input type = \"text\" name = \"Grocery Store\" id=\"Grocery Store\"/>\n        //     <button>Add</button>\n        //     <input type = \"submit\" value = \"Submit\"/>\n        // </form>\n                    \n                            // <button className=\"button is-info\">\n                            //     Add Grocery Store\n                            // </button>\n                      \n    \n\nconstructor(props)\n{\n    super(props)\n    this.state = \n    {\n        list: \n        [\n            <ApolloProvider client = {client}>\n                <Grocery/>\n            </ApolloProvider>\n            //\"trial\"\n        ]\n    }\n\n    this.addItem = this.addItem.bind(this)\n\n}\n\naddItem(e) {\n  // Prevent button click from submitting form\n  e.preventDefault();\n\n  // Create variables for our list, the item to add, and our form\n  let list = this.state.list;\n  const newItem = document.getElementById(\"addInput\");\n  const form = document.getElementById(\"addItemForm\");\n\n  // If our input has a value\n  if (newItem.value != \"\") {\n    // Add the new item to the end of our list array\n    list.push(newItem.value);\n    // Then we use that to set the state for list\n    this.setState({\n      list: list\n    });\n    // Finally, we need to reset the form\n    newItem.classList.remove(\"is-danger\");\n    form.reset();\n  } else {\n    // If the input doesn't have a value, make the border red since it's required\n    newItem.classList.add(\"is-danger\");\n  }\n}\nrender() {\n    return (\n      <div className=\"content\">\n        <div className=\"container\">\n          <section className=\"section\">\n        \n              {this.state.list.map(item => (\n                <li key={item}>{item}</li>\n              ))}\n            \n          </section>\n          \n          <hr />\n    <section className=\"section\">\n      <form className=\"form\" id=\"addItemForm\">\n        <input type=\"text\" className=\"input\" id=\"addInput\" placeholder=\"Grocery Store\" />\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Item\n        </button>\n      </form>\n      <form className = \"form\" id = \"addItemForm\">\n        <input type = \"text\" className = \"input\" id=\"addInput\" placeholder=\"Address\"/>\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Address\n        </button>\n      </form>\n    </section>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Form2"]},"metadata":{},"sourceType":"module"}