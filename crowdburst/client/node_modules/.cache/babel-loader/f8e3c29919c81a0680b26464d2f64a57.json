{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Form2 from './Components/Form2';\nimport * as serviceWorker from './serviceWorker';\nimport Grocery from \"./Components/Grocery\";\nimport Groceries from '.Components/Groceries';\nimport GrocerySearch2 from './GrocerySearch2'; //import Search from './Components/Search'; \n//import { render } from 'ejs';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nconst httpLink = new HttpLink({\n  uri: \"https://crowdburst.herokuapp.com/v1/graph1l\"\n});\nconst wsLink = new WebSocketLink({\n  uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\n\nconst App2 = () => /*#__PURE__*/React.createElement(BrowserRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Form2, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Grocery, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Route, {\n  path: \"/grocery/:id\",\n  component: Groceries,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/\",\n  component: GrocerySearch2,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }\n}))));\n\nReactDOM.render( /*#__PURE__*/React.createElement(App2, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // render(<App2/>, document.getElementById('root')); \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js"],"names":["React","Component","ReactDOM","render","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","BrowserRouter","Route","Switch","Form2","serviceWorker","Grocery","Groceries","GrocerySearch2","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","client","cache","link","App2","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAA+CC,KAA/C,QAA4D,gBAA5D;AACA,SAAQC,iBAAR,QAAgC,0BAAhC;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAC5Bc,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB;AAIA,MAAMC,MAAM,GAAG,IAAIX,aAAJ,CAAkB;AAC/BU,EAAAA,GAAG,EAAG,0CADyB;AAE/BE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFsB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGhB,KAAK,CACrB,CAAC;AAACiB,EAAAA;AAAD,CAAD,KAAa;AACX,QAAMC,UAAU,GAAGjB,iBAAiB,CAACgB,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBP,MARqB,EASrBF,QATqB,CAAvB;AAYA,MAAMU,MAAM,GAAG,IAAIxB,YAAJ,CACb;AACEyB,EAAAA,KAAK,EAAE,IAAIvB,aAAJ,EADT;AAEEwB,EAAAA,IAAI,EAAEP;AAFR,CADa,CAAf;;AAOA,MAAMQ,IAAI,GAAG,mBACX,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEA,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAIH,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAIE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,eAKE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALF,eAMA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACM,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,cAAZ;AAA2B,EAAA,SAAS,EAAEZ,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADN,eAEM,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,GAAZ;AAAgB,EAAA,SAAS,EAAEC,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFN,CANA,CAFA,CADF;;AAkBAhB,QAAQ,CAACC,MAAT,eAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0B8B,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B,E,CAEA;AAGA;AACA;AACA;;AACAnB,aAAa,CAACoB,UAAd","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache,split } from '@apollo/client'; \nimport {getMainDefinition} from '@apollo/client/utilities'; \nimport {WebSocketLink} from '@apollo/link-ws'; \nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Form2 from './Components/Form2';\nimport * as serviceWorker from './serviceWorker';\nimport Grocery from \"./Components/Grocery\"; \nimport Groceries from '.Components/Groceries'; \nimport GrocerySearch2 from './GrocerySearch2'; \n//import Search from './Components/Search'; \n\n//import { render } from 'ejs';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nconst httpLink = new HttpLink({\n  uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n}); \n\nconst wsLink = new WebSocketLink({\n  uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n  options: {\n    reconnect: true, \n  }\n}); \n\nconst splitLink = split (\n  ({query}) => {\n    const definition = getMainDefinition(query);\n    return(\n      definition.kind === \"OperationDefinition\" && \n      definition.operation === \"subscription\"\n    ); \n  },\n  wsLink,\n  httpLink\n); \n\nconst client = new ApolloClient(\n  {\n    cache: new InMemoryCache(),\n    link: splitLink,\n  }\n); \n\nconst App2 = () => (\n  <BrowserRouter>\n\n  <ApolloProvider client = {client}>\n    {/* <div>\n      <h2>My first React App</h2>\n    </div> */}\n    <Form2/>\n    <Grocery/>\n  <Switch> \n        <Route path=\"/grocery/:id\" component={Groceries} />\n        <Route path=\"/\" component={GrocerySearch2} />\n  </Switch>\n  </ApolloProvider>\n  </BrowserRouter>\n); \n\n\nReactDOM.render(<App2 />, document.getElementById('root'))\n\n// render(<App2/>, document.getElementById('root')); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}