{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar CommandOperationV2 = require('./command_v2');\n\nvar MongoError = require('../core').MongoError;\n\nvar maxWireVersion = require('../core/utils').maxWireVersion;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar DB_AGGREGATE_COLLECTION = 1;\nvar MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n\nvar AggregateOperation = /*#__PURE__*/function (_CommandOperationV) {\n  _inherits(AggregateOperation, _CommandOperationV);\n\n  var _super = _createSuper(AggregateOperation);\n\n  function AggregateOperation(parent, pipeline, options) {\n    var _this;\n\n    _classCallCheck(this, AggregateOperation);\n\n    _this = _super.call(this, parent, options, {\n      fullResponse: true\n    });\n    _this.target = parent.s.namespace && parent.s.namespace.collection ? parent.s.namespace.collection : DB_AGGREGATE_COLLECTION;\n    _this.pipeline = pipeline; // determine if we have a write stage, override read preference if so\n\n    _this.hasWriteStage = false;\n\n    if (typeof options.out === 'string') {\n      _this.pipeline = _this.pipeline.concat({\n        $out: options.out\n      });\n      _this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      var finalStage = pipeline[pipeline.length - 1];\n\n      if (finalStage.$out || finalStage.$merge) {\n        _this.hasWriteStage = true;\n      }\n    }\n\n    if (_this.hasWriteStage) {\n      _this.readPreference = ReadPreference.primary;\n    }\n\n    if (options.explain && (_this.readConcern || _this.writeConcern)) {\n      throw new MongoError('\"explain\" cannot be used on an aggregate call with readConcern/writeConcern');\n    }\n\n    if (options.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoError('cursor options must be an object');\n    }\n\n    return _this;\n  }\n\n  _createClass(AggregateOperation, [{\n    key: \"addToPipeline\",\n    value: function addToPipeline(stage) {\n      this.pipeline.push(stage);\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(server, callback) {\n      var options = this.options;\n      var serverWireVersion = maxWireVersion(server);\n      var command = {\n        aggregate: this.target,\n        pipeline: this.pipeline\n      };\n\n      if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n        this.readConcern = null;\n      }\n\n      if (serverWireVersion >= 5) {\n        if (this.hasWriteStage && this.writeConcern) {\n          Object.assign(command, {\n            writeConcern: this.writeConcern\n          });\n        }\n      }\n\n      if (options.bypassDocumentValidation === true) {\n        command.bypassDocumentValidation = options.bypassDocumentValidation;\n      }\n\n      if (typeof options.allowDiskUse === 'boolean') {\n        command.allowDiskUse = options.allowDiskUse;\n      }\n\n      if (options.hint) {\n        command.hint = options.hint;\n      }\n\n      if (options.explain) {\n        options.full = false;\n        command.explain = options.explain;\n      }\n\n      command.cursor = options.cursor || {};\n\n      if (options.batchSize && !this.hasWriteStage) {\n        command.cursor.batchSize = options.batchSize;\n      }\n\n      _get(_getPrototypeOf(AggregateOperation.prototype), \"executeCommand\", this).call(this, server, command, callback);\n    }\n  }, {\n    key: \"canRetryRead\",\n    get: function get() {\n      return !this.hasWriteStage;\n    }\n  }]);\n\n  return AggregateOperation;\n}(CommandOperationV2);\n\ndefineAspects(AggregateOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = AggregateOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/aggregate.js"],"names":["CommandOperationV2","require","MongoError","maxWireVersion","ReadPreference","Aspect","defineAspects","DB_AGGREGATE_COLLECTION","MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT","AggregateOperation","parent","pipeline","options","fullResponse","target","s","namespace","collection","hasWriteStage","out","concat","$out","length","finalStage","$merge","readPreference","primary","explain","readConcern","writeConcern","cursor","stage","push","server","callback","serverWireVersion","command","aggregate","Object","assign","bypassDocumentValidation","allowDiskUse","hint","full","batchSize","READ_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommandOperationV2 = require('./command_v2');\nconst MongoError = require('../core').MongoError;\nconst maxWireVersion = require('../core/utils').maxWireVersion;\nconst ReadPreference = require('../core').ReadPreference;\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\n\nconst DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n\nclass AggregateOperation extends CommandOperationV2 {\n  constructor(parent, pipeline, options) {\n    super(parent, options, { fullResponse: true });\n\n    this.target =\n      parent.s.namespace && parent.s.namespace.collection\n        ? parent.s.namespace.collection\n        : DB_AGGREGATE_COLLECTION;\n\n    this.pipeline = pipeline;\n\n    // determine if we have a write stage, override read preference if so\n    this.hasWriteStage = false;\n    if (typeof options.out === 'string') {\n      this.pipeline = this.pipeline.concat({ $out: options.out });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.readPreference = ReadPreference.primary;\n    }\n\n    if (options.explain && (this.readConcern || this.writeConcern)) {\n      throw new MongoError(\n        '\"explain\" cannot be used on an aggregate call with readConcern/writeConcern'\n      );\n    }\n\n    if (options.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoError('cursor options must be an object');\n    }\n  }\n\n  get canRetryRead() {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage) {\n    this.pipeline.push(stage);\n  }\n\n  execute(server, callback) {\n    const options = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const command = { aggregate: this.target, pipeline: this.pipeline };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = null;\n    }\n\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, { writeConcern: this.writeConcern });\n      }\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (options.explain) {\n      options.full = false;\n      command.explain = options.explain;\n    }\n\n    command.cursor = options.cursor || {};\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, command, callback);\n  }\n}\n\ndefineAspects(AggregateOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = AggregateOperation;\n"]},"metadata":{},"sourceType":"script"}