{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { List, ListItem } from './shared/List';\nimport { Badge } from './shared/Badge';\nconst GROCERY = gql`\n\nquery GroceryQuery($id: String!) {\n    grocery_by_pk(id: $id) {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n  }\n   \n`; // const GROCERY = gql` \n// {\n//     grocery {\n//       address\n//       alias\n//       display_phone\n//       id\n//       name\n//     }\n// }`;\n//     const {loading, error, data} = useQuery(GROCERY);\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n//     // return data.grocery.map(({id, name, address}) => (\n//     //     <div key = {id}>\n//     //         <p>\n//     //             {name} | {address}\n//     //         </p>\n//     //     </div>\n//     // )); \n//     return(\n//         <List>\n//             {data.grocery.map(({id, name, address}) => (\n//                 <ListItem key = {id}>\n//                     {name} <Badge>{address}</Badge>\n//                 </ListItem>\n//             ))}\n//         </List>\n//     );\n// }\n\nconst Grocery = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GROCERY);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 23\n    }\n  }, \"Error!\");\n  return data.grocery_by_pk.map(({\n    grid,\n    name,\n    address\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: grid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, body)));\n}; // return(\n//     <List>\n//         {data.grocery.map(({id, name, address}) => (\n//             <ListItem key = {id}>\n//                 {name} <Badge>{address}</Badge>\n//             </ListItem>\n//         ))}\n//     </List>\n// );\n// const Grocery = ({\n//     match: {\n//       params: { id },\n//     },\n//   }) => {\n//     const { loading, error, data } = useQuery(GROCERY, {\n//       variables: { id },\n//     });\n//     if (loading) return <p>Loading ...</p>;\n//     if (error) return <p>Error :(</p>;\n//     const { name, address, finrevs } = data.grocery_by_pk;\n//     return (\n//       <div>\n//         <h3>\n//           {name} <Badge>{address}</Badge>\n//         </h3>\n//         <List>\n//           {finrevs.map((finrevs) => (\n//             <ListItem key={finrevs.grid}>{finrevs.body}</ListItem>\n//           ))}\n//         </List>\n//       </div>\n//     );\n//   };\n\n\nexport default Grocery;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js"],"names":["React","useQuery","gql","List","ListItem","Badge","GROCERY","Grocery","loading","error","data","grocery_by_pk","map","grid","name","address","body"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AACA,SAAQC,IAAR,EAAcC,QAAd,QAA6B,eAA7B;AACA,SAAQC,KAAR,QAAoB,gBAApB;AAEA,MAAMC,OAAO,GAAGJ,GAAI;;;;;;;;;;;;;;;CAApB,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,OAAO,GAAG,MAAM;AAClB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBT,QAAQ,CAACK,OAAD,CAAvC;AAEA,MAAGE,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACZ,MAAGC,KAAH,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAEX,SAAOC,IAAI,CAACC,aAAL,CAAmBC,GAAnB,CAAuB,CAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,IAAP;AAAaC,IAAAA;AAAb,GAAD,kBAC1B;AAAK,IAAA,GAAG,EAAIF,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,IADL,CADJ,CADG,CAAP;AAMG,CAZP,C,CAgBI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,eAAeT,OAAf","sourcesContent":["import React from 'react';\nimport {useQuery, gql} from '@apollo/client';\nimport {List, ListItem} from './shared/List';\nimport {Badge} from './shared/Badge';\n\nconst GROCERY = gql`\n\nquery GroceryQuery($id: String!) {\n    grocery_by_pk(id: $id) {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n  }\n   \n`; \n\n// const GROCERY = gql` \n// {\n//     grocery {\n//       address\n//       alias\n//       display_phone\n//       id\n//       name\n//     }\n// }`;\n\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n//     // return data.grocery.map(({id, name, address}) => (\n//     //     <div key = {id}>\n//     //         <p>\n//     //             {name} | {address}\n//     //         </p>\n//     //     </div>\n//     // )); \n\n//     return(\n//         <List>\n//             {data.grocery.map(({id, name, address}) => (\n//                 <ListItem key = {id}>\n//                     {name} <Badge>{address}</Badge>\n//                 </ListItem>\n//             ))}\n//         </List>\n//     );\n// }\nconst Grocery = () => {\n    const {loading, error, data} = useQuery(GROCERY);\n\n    if(loading) return <p>Loading...</p>;\n    if(error)  return <p>Error!</p>;\n\n    return data.grocery_by_pk.map(({grid, name, address}) => (\n        <div key = {grid}>\n            <p>\n                {body}\n            </p>\n        </div>\n    ))}; \n\n\n\n    // return(\n    //     <List>\n    //         {data.grocery.map(({id, name, address}) => (\n    //             <ListItem key = {id}>\n    //                 {name} <Badge>{address}</Badge>\n    //             </ListItem>\n    //         ))}\n    //     </List>\n    // );\n\n\n\n    \n// const Grocery = ({\n//     match: {\n//       params: { id },\n//     },\n//   }) => {\n//     const { loading, error, data } = useQuery(GROCERY, {\n//       variables: { id },\n//     });\n  \n//     if (loading) return <p>Loading ...</p>;\n//     if (error) return <p>Error :(</p>;\n  \n//     const { name, address, finrevs } = data.grocery_by_pk;\n  \n//     return (\n//       <div>\n//         <h3>\n//           {name} <Badge>{address}</Badge>\n//         </h3>\n//         <List>\n//           {finrevs.map((finrevs) => (\n//             <ListItem key={finrevs.grid}>{finrevs.body}</ListItem>\n//           ))}\n//         </List>\n//       </div>\n//     );\n//   };\n  \n  export default Grocery;"]},"metadata":{},"sourceType":"module"}