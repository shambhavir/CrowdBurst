{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar MongoError = require('./core').MongoError;\n\nvar Cursor = require('./cursor');\n\nvar CursorState = require('./core/cursor').CursorState;\n\nvar deprecate = require('util').deprecate;\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\n\n\nvar AggregationCursor = /*#__PURE__*/function (_Cursor) {\n  _inherits(AggregationCursor, _Cursor);\n\n  var _super = _createSuper(AggregationCursor);\n\n  function AggregationCursor(topology, operation, options) {\n    _classCallCheck(this, AggregationCursor);\n\n    return _super.call(this, topology, operation, options);\n  }\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @throws {MongoError}\n   * @return {AggregationCursor}\n   */\n\n\n  _createClass(AggregationCursor, [{\n    key: \"batchSize\",\n    value: function batchSize(value) {\n      if (this.s.state === CursorState.CLOSED || this.isDead()) {\n        throw MongoError.create({\n          message: 'Cursor is closed',\n          driver: true\n        });\n      }\n\n      if (typeof value !== 'number') {\n        throw MongoError.create({\n          message: 'batchSize requires an integer',\n          driver: true\n        });\n      }\n\n      this.operation.options.batchSize = value;\n      this.setCursorBatchSize(value);\n      return this;\n    }\n    /**\n     * Add a geoNear stage to the aggregation pipeline\n     * @method\n     * @param {object} document The geoNear stage document.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"geoNear\",\n    value: function geoNear(document) {\n      this.operation.addToPipeline({\n        $geoNear: document\n      });\n      return this;\n    }\n    /**\n     * Add a group stage to the aggregation pipeline\n     * @method\n     * @param {object} document The group stage document.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"group\",\n    value: function group(document) {\n      this.operation.addToPipeline({\n        $group: document\n      });\n      return this;\n    }\n    /**\n     * Add a limit stage to the aggregation pipeline\n     * @method\n     * @param {number} value The state limit value.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"limit\",\n    value: function limit(value) {\n      this.operation.addToPipeline({\n        $limit: value\n      });\n      return this;\n    }\n    /**\n     * Add a match stage to the aggregation pipeline\n     * @method\n     * @param {object} document The match stage document.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(document) {\n      this.operation.addToPipeline({\n        $match: document\n      });\n      return this;\n    }\n    /**\n     * Add a maxTimeMS stage to the aggregation pipeline\n     * @method\n     * @param {number} value The state maxTimeMS value.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"maxTimeMS\",\n    value: function maxTimeMS(value) {\n      this.operation.options.maxTimeMS = value;\n      return this;\n    }\n    /**\n     * Add a out stage to the aggregation pipeline\n     * @method\n     * @param {number} destination The destination name.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"out\",\n    value: function out(destination) {\n      this.operation.addToPipeline({\n        $out: destination\n      });\n      return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     * @method\n     * @param {object} document The project stage document.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"project\",\n    value: function project(document) {\n      this.operation.addToPipeline({\n        $project: document\n      });\n      return this;\n    }\n    /**\n     * Add a lookup stage to the aggregation pipeline\n     * @method\n     * @param {object} document The lookup stage document.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"lookup\",\n    value: function lookup(document) {\n      this.operation.addToPipeline({\n        $lookup: document\n      });\n      return this;\n    }\n    /**\n     * Add a redact stage to the aggregation pipeline\n     * @method\n     * @param {object} document The redact stage document.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"redact\",\n    value: function redact(document) {\n      this.operation.addToPipeline({\n        $redact: document\n      });\n      return this;\n    }\n    /**\n     * Add a skip stage to the aggregation pipeline\n     * @method\n     * @param {number} value The state skip value.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"skip\",\n    value: function skip(value) {\n      this.operation.addToPipeline({\n        $skip: value\n      });\n      return this;\n    }\n    /**\n     * Add a sort stage to the aggregation pipeline\n     * @method\n     * @param {object} document The sort stage document.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(document) {\n      this.operation.addToPipeline({\n        $sort: document\n      });\n      return this;\n    }\n    /**\n     * Add a unwind stage to the aggregation pipeline\n     * @method\n     * @param {number} field The unwind field name.\n     * @return {AggregationCursor}\n     */\n\n  }, {\n    key: \"unwind\",\n    value: function unwind(field) {\n      this.operation.addToPipeline({\n        $unwind: field\n      });\n      return this;\n    }\n    /**\n     * Return the cursor logger\n     * @method\n     * @return {Logger} return the cursor logger\n     * @ignore\n     */\n\n  }, {\n    key: \"getLogger\",\n    value: function getLogger() {\n      return this.logger;\n    }\n  }]);\n\n  return AggregationCursor;\n}(Cursor); // aliases\n\n\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray; // deprecated methods\n\ndeprecate(AggregationCursor.prototype.geoNear, 'The `$geoNear` stage is deprecated in MongoDB 4.0, and removed in version 4.2.');\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @deprecated\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n * @method AggregationCursor.prototype.explain\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/**\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nmodule.exports = AggregationCursor;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/aggregation_cursor.js"],"names":["MongoError","require","Cursor","CursorState","deprecate","AggregationCursor","topology","operation","options","value","s","state","CLOSED","isDead","create","message","driver","batchSize","setCursorBatchSize","document","addToPipeline","$geoNear","$group","$limit","$match","maxTimeMS","destination","$out","$project","$lookup","$redact","$skip","$sort","field","$unwind","logger","prototype","get","toArray","geoNear","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst MongoError = require('./core').MongoError;\nconst Cursor = require('./cursor');\nconst CursorState = require('./core/cursor').CursorState;\nconst deprecate = require('util').deprecate;\n\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\nclass AggregationCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @throws {MongoError}\n   * @return {AggregationCursor}\n   */\n  batchSize(value) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n    }\n\n    this.operation.options.batchSize = value;\n    this.setCursorBatchSize(value);\n    return this;\n  }\n\n  /**\n   * Add a geoNear stage to the aggregation pipeline\n   * @method\n   * @param {object} document The geoNear stage document.\n   * @return {AggregationCursor}\n   */\n  geoNear(document) {\n    this.operation.addToPipeline({ $geoNear: document });\n    return this;\n  }\n\n  /**\n   * Add a group stage to the aggregation pipeline\n   * @method\n   * @param {object} document The group stage document.\n   * @return {AggregationCursor}\n   */\n  group(document) {\n    this.operation.addToPipeline({ $group: document });\n    return this;\n  }\n\n  /**\n   * Add a limit stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state limit value.\n   * @return {AggregationCursor}\n   */\n  limit(value) {\n    this.operation.addToPipeline({ $limit: value });\n    return this;\n  }\n\n  /**\n   * Add a match stage to the aggregation pipeline\n   * @method\n   * @param {object} document The match stage document.\n   * @return {AggregationCursor}\n   */\n  match(document) {\n    this.operation.addToPipeline({ $match: document });\n    return this;\n  }\n\n  /**\n   * Add a maxTimeMS stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state maxTimeMS value.\n   * @return {AggregationCursor}\n   */\n  maxTimeMS(value) {\n    this.operation.options.maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a out stage to the aggregation pipeline\n   * @method\n   * @param {number} destination The destination name.\n   * @return {AggregationCursor}\n   */\n  out(destination) {\n    this.operation.addToPipeline({ $out: destination });\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   * @method\n   * @param {object} document The project stage document.\n   * @return {AggregationCursor}\n   */\n  project(document) {\n    this.operation.addToPipeline({ $project: document });\n    return this;\n  }\n\n  /**\n   * Add a lookup stage to the aggregation pipeline\n   * @method\n   * @param {object} document The lookup stage document.\n   * @return {AggregationCursor}\n   */\n  lookup(document) {\n    this.operation.addToPipeline({ $lookup: document });\n    return this;\n  }\n\n  /**\n   * Add a redact stage to the aggregation pipeline\n   * @method\n   * @param {object} document The redact stage document.\n   * @return {AggregationCursor}\n   */\n  redact(document) {\n    this.operation.addToPipeline({ $redact: document });\n    return this;\n  }\n\n  /**\n   * Add a skip stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state skip value.\n   * @return {AggregationCursor}\n   */\n  skip(value) {\n    this.operation.addToPipeline({ $skip: value });\n    return this;\n  }\n\n  /**\n   * Add a sort stage to the aggregation pipeline\n   * @method\n   * @param {object} document The sort stage document.\n   * @return {AggregationCursor}\n   */\n  sort(document) {\n    this.operation.addToPipeline({ $sort: document });\n    return this;\n  }\n\n  /**\n   * Add a unwind stage to the aggregation pipeline\n   * @method\n   * @param {number} field The unwind field name.\n   * @return {AggregationCursor}\n   */\n  unwind(field) {\n    this.operation.addToPipeline({ $unwind: field });\n    return this;\n  }\n\n  /**\n   * Return the cursor logger\n   * @method\n   * @return {Logger} return the cursor logger\n   * @ignore\n   */\n  getLogger() {\n    return this.logger;\n  }\n}\n\n// aliases\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n\n// deprecated methods\ndeprecate(\n  AggregationCursor.prototype.geoNear,\n  'The `$geoNear` stage is deprecated in MongoDB 4.0, and removed in version 4.2.'\n);\n\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @deprecated\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n * @method AggregationCursor.prototype.explain\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/**\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nmodule.exports = AggregationCursor;\n"]},"metadata":{},"sourceType":"script"}