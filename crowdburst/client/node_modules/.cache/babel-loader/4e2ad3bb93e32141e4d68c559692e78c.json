{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar CommandOperation = require('./command');\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar MongoError = require('../core').MongoError;\n\nvar parseIndexOptions = require('../utils').parseIndexOptions;\n\nvar keysToOmit = new Set(['name', 'key', 'writeConcern', 'w', 'wtimeout', 'j', 'fsync', 'readPreference', 'session']);\n\nvar CreateIndexOperation = /*#__PURE__*/function (_CommandOperation) {\n  _inherits(CreateIndexOperation, _CommandOperation);\n\n  var _super = _createSuper(CreateIndexOperation);\n\n  function CreateIndexOperation(db, name, fieldOrSpec, options) {\n    var _this;\n\n    _classCallCheck(this, CreateIndexOperation);\n\n    _this = _super.call(this, db, options); // Build the index\n\n    var indexParameters = parseIndexOptions(fieldOrSpec); // Generate the index name\n\n    var indexName = typeof options.name === 'string' ? options.name : indexParameters.name; // Set up the index\n\n    var indexesObject = {\n      name: indexName,\n      key: indexParameters.fieldHash\n    };\n    _this.name = name;\n    _this.fieldOrSpec = fieldOrSpec;\n    _this.indexes = indexesObject;\n    return _this;\n  }\n\n  _createClass(CreateIndexOperation, [{\n    key: \"_buildCommand\",\n    value: function _buildCommand() {\n      var options = this.options;\n      var name = this.name;\n      var indexes = this.indexes; // merge all the options\n\n      for (var optionName in options) {\n        if (!keysToOmit.has(optionName)) {\n          indexes[optionName] = options[optionName];\n        }\n      } // Create command, apply write concern to command\n\n\n      var cmd = {\n        createIndexes: name,\n        indexes: [indexes]\n      };\n      return cmd;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(callback) {\n      var db = this.db;\n      var options = this.options;\n      var indexes = this.indexes; // Get capabilities\n\n      var capabilities = db.s.topology.capabilities(); // Did the user pass in a collation, check if our write server supports it\n\n      if (options.collation && capabilities && !capabilities.commandsTakeCollation) {\n        // Create a new error\n        var error = new MongoError('server/primary/mongos does not support collation');\n        error.code = 67; // Return the error\n\n        return callback(error);\n      } // Ensure we have a callback\n\n\n      if (options.writeConcern && typeof callback !== 'function') {\n        throw MongoError.create({\n          message: 'Cannot use a writeConcern without a provided callback',\n          driver: true\n        });\n      } // Attempt to run using createIndexes command\n\n\n      _get(_getPrototypeOf(CreateIndexOperation.prototype), \"execute\", this).call(this, function (err, result) {\n        if (err == null) return handleCallback(callback, err, indexes.name);\n        return handleCallback(callback, err, result);\n      });\n    }\n  }]);\n\n  return CreateIndexOperation;\n}(CommandOperation);\n\ndefineAspects(CreateIndexOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateIndexOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/create_index.js"],"names":["Aspect","require","CommandOperation","defineAspects","handleCallback","MongoError","parseIndexOptions","keysToOmit","Set","CreateIndexOperation","db","name","fieldOrSpec","options","indexParameters","indexName","indexesObject","key","fieldHash","indexes","optionName","has","cmd","createIndexes","callback","capabilities","s","topology","collation","commandsTakeCollation","error","code","writeConcern","create","message","driver","err","result","WRITE_OPERATION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst CommandOperation = require('./command');\nconst defineAspects = require('./operation').defineAspects;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\nconst parseIndexOptions = require('../utils').parseIndexOptions;\n\nconst keysToOmit = new Set([\n  'name',\n  'key',\n  'writeConcern',\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'readPreference',\n  'session'\n]);\n\nclass CreateIndexOperation extends CommandOperation {\n  constructor(db, name, fieldOrSpec, options) {\n    super(db, options);\n\n    // Build the index\n    const indexParameters = parseIndexOptions(fieldOrSpec);\n    // Generate the index name\n    const indexName = typeof options.name === 'string' ? options.name : indexParameters.name;\n    // Set up the index\n    const indexesObject = { name: indexName, key: indexParameters.fieldHash };\n\n    this.name = name;\n    this.fieldOrSpec = fieldOrSpec;\n    this.indexes = indexesObject;\n  }\n\n  _buildCommand() {\n    const options = this.options;\n    const name = this.name;\n    const indexes = this.indexes;\n\n    // merge all the options\n    for (let optionName in options) {\n      if (!keysToOmit.has(optionName)) {\n        indexes[optionName] = options[optionName];\n      }\n    }\n\n    // Create command, apply write concern to command\n    const cmd = { createIndexes: name, indexes: [indexes] };\n\n    return cmd;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = this.options;\n    const indexes = this.indexes;\n\n    // Get capabilities\n    const capabilities = db.s.topology.capabilities();\n\n    // Did the user pass in a collation, check if our write server supports it\n    if (options.collation && capabilities && !capabilities.commandsTakeCollation) {\n      // Create a new error\n      const error = new MongoError('server/primary/mongos does not support collation');\n      error.code = 67;\n      // Return the error\n      return callback(error);\n    }\n\n    // Ensure we have a callback\n    if (options.writeConcern && typeof callback !== 'function') {\n      throw MongoError.create({\n        message: 'Cannot use a writeConcern without a provided callback',\n        driver: true\n      });\n    }\n\n    // Attempt to run using createIndexes command\n    super.execute((err, result) => {\n      if (err == null) return handleCallback(callback, err, indexes.name);\n\n      return handleCallback(callback, err, result);\n    });\n  }\n}\n\ndefineAspects(CreateIndexOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = CreateIndexOperation;\n"]},"metadata":{},"sourceType":"script"}