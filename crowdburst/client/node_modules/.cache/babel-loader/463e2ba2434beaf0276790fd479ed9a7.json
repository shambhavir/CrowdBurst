{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/client/src/GrocerySearch2.js\";\nimport React, { useState } from \"react\";\nimport { useLazyQuery, gql, useSubscription } from \"@apollo/client\"; //import Search from \"./Search\";\n\nimport Grocery from \"./Components/Grocery\";\nimport Search2 from \"./Components/Search2\"; // import Form2 from './Components/Form2';\n\nimport Stitch2 from './Stitch2';\nconst SEARCH = gql`\nsubscription MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n\n`; // const SEARCH = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// `; \n//   query Search($match: String) {\n//     grocery(order_by: { name: asc }, where: { name: { _ilike: $match } }) {\n//       name\n//       alias\n//       id\n//     }\n//   }\n// const GrocerySearch = () => {\n// const [inputVal, setInputVal] = useState(\"\");\n// const [search, { loading, error, data }] = useLazyQuery(SEARCH);\n\nconst GrocerySearch = ({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useSubscription(SEARCH, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, \"Loading ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 23\n    }\n  }, \"Error :(\");\n  const {\n    name,\n    address,\n    finrevs\n  } = data.grocery_by_pk;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, name, \" | \", address), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, finrevs.map(finrev => /*#__PURE__*/React.createElement(ListItem, {\n    key: finrev.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, finrev.body))));\n}; //   return (\n//     <div>\n//       {/* <Form2></Form2> */}\n//       <addReview></addReview>\n//       {/* <Stitch2></Stitch2> */}\n//       {/* <Search2\n//         inputVal={inputVal}\n//         onChange={(e) => setInputVal(e.target.value)}\n//         onSubmit={() => search({ variables: { match: `%${inputVal}%` } })}\n//       /> */}\n//       <h1></h1>\n//       <Grocery newGrocery={data ? data.grocery : null} />\n//     </div>\n//   );\n// };\n\n\nexport default GrocerySearch;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/GrocerySearch2.js"],"names":["React","useState","useLazyQuery","gql","useSubscription","Grocery","Search2","Stitch2","SEARCH","GrocerySearch","match","params","id","loading","error","data","variables","name","address","finrevs","grocery_by_pk","map","finrev","body"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,eAA5B,QAAmD,gBAAnD,C,CACA;;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AAIA,MAAMC,MAAM,GAAGL,GAAI;;;;;;;;;;;;;CAAnB,C,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEE;AACA;;AAEA,MAAMM,aAAa,GAAG,CAAC;AACrBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AAACC,MAAAA;AAAD;AADH;AADc,CAAD,KAIhB;AACJ,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,eAAe,CAACI,MAAD,EAAS;AACvDQ,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AAD4C,GAAT,CAAhD;AAGA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,QAAK;AAACG,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,MAA2BJ,IAAI,CAACK,aAArC;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IADH,SACYC,OADZ,CADF,eAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACE,GAAR,CAAaC,MAAD,iBACX,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,MAAM,CAACV,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BU,MAAM,CAACC,IAAlC,CADD,CADH,CAJF,CADF;AAaD,CA1BD,C,CA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEF,eAAed,aAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useLazyQuery, gql, useSubscription } from \"@apollo/client\";\n//import Search from \"./Search\";\nimport Grocery from \"./Components/Grocery\"; \nimport Search2 from \"./Components/Search2\";\n// import Form2 from './Components/Form2';\nimport Stitch2 from './Stitch2'; \n\n\n\nconst SEARCH = gql`\nsubscription MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n\n`;\n\n// const SEARCH = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// `; \n\n//   query Search($match: String) {\n//     grocery(order_by: { name: asc }, where: { name: { _ilike: $match } }) {\n//       name\n//       alias\n//       id\n//     }\n//   }\n\n// const GrocerySearch = () => {\n  \n  // const [inputVal, setInputVal] = useState(\"\");\n  // const [search, { loading, error, data }] = useLazyQuery(SEARCH);\n\n  const GrocerySearch = ({\n    match: {\n      params: {id},\n    },\n  }) => {\n    const { loading, error, data } = useSubscription(SEARCH, {\n      variables: { id },\n    });\n    if (loading) return <p>Loading ...</p>;\n    if (error) return <p>Error :(</p>;\n\n    const{name, address, finrevs} = data.grocery_by_pk;\n\n    return (\n      <div>\n        <h3>\n          {name} | {address}\n        </h3>\n        <List>\n          {finrevs.map((finrev) => (\n            <ListItem key={finrev.id}>{finrev.body}</ListItem>\n          ))}\n        </List>\n      </div>\n    );\n  \n  }; \n  \n\n  //   return (\n  //     <div>\n  //       {/* <Form2></Form2> */}\n  //       <addReview></addReview>\n  //       {/* <Stitch2></Stitch2> */}\n  //       {/* <Search2\n  //         inputVal={inputVal}\n  //         onChange={(e) => setInputVal(e.target.value)}\n  //         onSubmit={() => search({ variables: { match: `%${inputVal}%` } })}\n  //       /> */}\n  //       <h1></h1>\n  //       <Grocery newGrocery={data ? data.grocery : null} />\n  //     </div>\n  //   );\n  // };\n\nexport default GrocerySearch;\n\n"]},"metadata":{},"sourceType":"module"}