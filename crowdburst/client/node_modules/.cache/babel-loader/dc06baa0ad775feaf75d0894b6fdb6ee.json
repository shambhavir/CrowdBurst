{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar OptionsOperation = require('./options_operation');\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar IsCappedOperation = /*#__PURE__*/function (_OptionsOperation) {\n  _inherits(IsCappedOperation, _OptionsOperation);\n\n  var _super = _createSuper(IsCappedOperation);\n\n  function IsCappedOperation(collection, options) {\n    _classCallCheck(this, IsCappedOperation);\n\n    return _super.call(this, collection, options);\n  }\n\n  _createClass(IsCappedOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      _get(_getPrototypeOf(IsCappedOperation.prototype), \"execute\", this).call(this, function (err, document) {\n        if (err) return handleCallback(callback, err);\n        handleCallback(callback, null, !!(document && document.capped));\n      });\n    }\n  }]);\n\n  return IsCappedOperation;\n}(OptionsOperation);\n\nmodule.exports = IsCappedOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/is_capped.js"],"names":["OptionsOperation","require","handleCallback","IsCappedOperation","collection","options","callback","err","document","capped","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,qBAAD,CAAhC;;AACA,IAAMC,cAAc,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,cAA3C;;IAEMC,iB;;;;;AACJ,6BAAYC,UAAZ,EAAwBC,OAAxB,EAAiC;AAAA;;AAAA,6BACzBD,UADyB,EACbC,OADa;AAEhC;;;;4BAEOC,Q,EAAU;AAChB,qFAAc,UAACC,GAAD,EAAMC,QAAN,EAAmB;AAC/B,YAAID,GAAJ,EAAS,OAAOL,cAAc,CAACI,QAAD,EAAWC,GAAX,CAArB;AACTL,QAAAA,cAAc,CAACI,QAAD,EAAW,IAAX,EAAiB,CAAC,EAAEE,QAAQ,IAAIA,QAAQ,CAACC,MAAvB,CAAlB,CAAd;AACD,OAHD;AAID;;;;EAV6BT,gB;;AAahCU,MAAM,CAACC,OAAP,GAAiBR,iBAAjB","sourcesContent":["'use strict';\n\nconst OptionsOperation = require('./options_operation');\nconst handleCallback = require('../utils').handleCallback;\n\nclass IsCappedOperation extends OptionsOperation {\n  constructor(collection, options) {\n    super(collection, options);\n  }\n\n  execute(callback) {\n    super.execute((err, document) => {\n      if (err) return handleCallback(callback, err);\n      handleCallback(callback, null, !!(document && document.capped));\n    });\n  }\n}\n\nmodule.exports = IsCappedOperation;\n"]},"metadata":{},"sourceType":"script"}