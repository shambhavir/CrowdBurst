{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION')\n};\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n */\n\nvar OperationBase = /*#__PURE__*/function () {\n  function OperationBase(options) {\n    _classCallCheck(this, OperationBase);\n\n    this.options = Object.assign({}, options);\n  }\n\n  _createClass(OperationBase, [{\n    key: \"hasAspect\",\n    value: function hasAspect(aspect) {\n      if (this.constructor.aspects == null) {\n        return false;\n      }\n\n      return this.constructor.aspects.has(aspect);\n    }\n  }, {\n    key: \"clearSession\",\n    value: function clearSession() {\n      delete this.options.session;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      throw new TypeError('`execute` must be implemented for OperationBase subclasses');\n    }\n  }, {\n    key: \"session\",\n    set: function set(session) {\n      Object.assign(this.options, {\n        session: session\n      });\n    },\n    get: function get() {\n      return this.options.session;\n    }\n  }, {\n    key: \"canRetryRead\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return OperationBase;\n}();\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nmodule.exports = {\n  Aspect: Aspect,\n  defineAspects: defineAspects,\n  OperationBase: OperationBase\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/operation.js"],"names":["Aspect","READ_OPERATION","Symbol","WRITE_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","OperationBase","options","Object","assign","aspect","constructor","aspects","has","session","TypeError","defineAspects","operation","Array","isArray","Set","defineProperty","value","writable","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAG;AACbC,EAAAA,cAAc,EAAEC,MAAM,CAAC,gBAAD,CADT;AAEbC,EAAAA,eAAe,EAAED,MAAM,CAAC,iBAAD,CAFV;AAGbE,EAAAA,SAAS,EAAEF,MAAM,CAAC,WAAD,CAHJ;AAIbG,EAAAA,sBAAsB,EAAEH,MAAM,CAAC,wBAAD;AAJjB,CAAf;AAOA;;;;;;;IAMMI,a;AACJ,yBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,CAAf;AACD;;;;8BAESG,M,EAAQ;AAChB,UAAI,KAAKC,WAAL,CAAiBC,OAAjB,IAA4B,IAAhC,EAAsC;AACpC,eAAO,KAAP;AACD;;AACD,aAAO,KAAKD,WAAL,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6BH,MAA7B,CAAP;AACD;;;mCAUc;AACb,aAAO,KAAKH,OAAL,CAAaO,OAApB;AACD;;;8BAMS;AACR,YAAM,IAAIC,SAAJ,CAAc,4DAAd,CAAN;AACD;;;sBAlBWD,O,EAAS;AACnBN,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,OAAnB,EAA4B;AAAEO,QAAAA,OAAO,EAAPA;AAAF,OAA5B;AACD,K;wBAEa;AACZ,aAAO,KAAKP,OAAL,CAAaO,OAApB;AACD;;;wBAMkB;AACjB,aAAO,IAAP;AACD;;;;;;AAOH,SAASE,aAAT,CAAuBC,SAAvB,EAAkCL,OAAlC,EAA2C;AACzC,MAAI,CAACM,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAD,IAA2B,EAAEA,OAAO,YAAYQ,GAArB,CAA/B,EAA0D;AACxDR,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AACDA,EAAAA,OAAO,GAAG,IAAIQ,GAAJ,CAAQR,OAAR,CAAV;AACAJ,EAAAA,MAAM,CAACa,cAAP,CAAsBJ,SAAtB,EAAiC,SAAjC,EAA4C;AAC1CK,IAAAA,KAAK,EAAEV,OADmC;AAE1CW,IAAAA,QAAQ,EAAE;AAFgC,GAA5C;AAIA,SAAOX,OAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,MAAM,EAANA,MADe;AAEfgB,EAAAA,aAAa,EAAbA,aAFe;AAGfV,EAAAA,aAAa,EAAbA;AAHe,CAAjB","sourcesContent":["'use strict';\n\nconst Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION')\n};\n\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n */\nclass OperationBase {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n  }\n\n  hasAspect(aspect) {\n    if (this.constructor.aspects == null) {\n      return false;\n    }\n    return this.constructor.aspects.has(aspect);\n  }\n\n  set session(session) {\n    Object.assign(this.options, { session });\n  }\n\n  get session() {\n    return this.options.session;\n  }\n\n  clearSession() {\n    delete this.options.session;\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  execute() {\n    throw new TypeError('`execute` must be implemented for OperationBase subclasses');\n  }\n}\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nmodule.exports = {\n  Aspect,\n  defineAspects,\n  OperationBase\n};\n"]},"metadata":{},"sourceType":"script"}