{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar debugOptions = require('../utils').debugOptions;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar MongoError = require('../core').MongoError;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar resolveReadPreference = require('../utils').resolveReadPreference;\n\nvar MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nvar debugFields = ['authSource', 'w', 'wtimeout', 'j', 'native_parser', 'forceServerObjectId', 'serializeFunctions', 'raw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bufferMaxEntries', 'numberOfRetries', 'retryMiliSeconds', 'readPreference', 'pkFactory', 'parentDb', 'promiseLibrary', 'noListener'];\n\nvar CommandOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(CommandOperation, _OperationBase);\n\n  var _super = _createSuper(CommandOperation);\n\n  function CommandOperation(db, options, collection, command) {\n    var _this;\n\n    _classCallCheck(this, CommandOperation);\n\n    _this = _super.call(this, options);\n\n    if (!_this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (collection != null) {\n        _this.options.readPreference = resolveReadPreference(collection, options);\n      } else {\n        _this.options.readPreference = resolveReadPreference(db, options);\n      }\n    } else {\n      if (collection != null) {\n        applyWriteConcern(_this.options, {\n          db: db,\n          coll: collection\n        }, _this.options);\n      } else {\n        applyWriteConcern(_this.options, {\n          db: db\n        }, _this.options);\n      }\n\n      _this.options.readPreference = ReadPreference.primary;\n    }\n\n    _this.db = db;\n\n    if (command != null) {\n      _this.command = command;\n    }\n\n    if (collection != null) {\n      _this.collection = collection;\n    }\n\n    return _this;\n  }\n\n  _createClass(CommandOperation, [{\n    key: \"_buildCommand\",\n    value: function _buildCommand() {\n      if (this.command != null) {\n        return this.command;\n      }\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(callback) {\n      var db = this.db;\n      var options = Object.assign({}, this.options); // Did the user destroy the topology\n\n      if (db.serverConfig && db.serverConfig.isDestroyed()) {\n        return callback(new MongoError('topology was destroyed'));\n      }\n\n      var command;\n\n      try {\n        command = this._buildCommand();\n      } catch (e) {\n        return callback(e);\n      } // Get the db name we are executing against\n\n\n      var dbName = options.dbName || options.authdb || db.databaseName; // Convert the readPreference if its not a write\n\n      if (this.hasAspect(Aspect.WRITE_OPERATION)) {\n        if (options.writeConcern && (!options.session || !options.session.inTransaction())) {\n          command.writeConcern = options.writeConcern;\n        }\n      } // Debug information\n\n\n      if (db.s.logger.isDebug()) {\n        db.s.logger.debug(\"executing command \".concat(JSON.stringify(command), \" against \").concat(dbName, \".$cmd with options [\").concat(JSON.stringify(debugOptions(debugFields, options)), \"]\"));\n      }\n\n      var namespace = this.namespace != null ? this.namespace : new MongoDBNamespace(dbName, '$cmd'); // Execute command\n\n      db.s.topology.command(namespace, command, options, function (err, result) {\n        if (err) return handleCallback(callback, err);\n        if (options.full) return handleCallback(callback, null, result);\n        handleCallback(callback, null, result.result);\n      });\n    }\n  }]);\n\n  return CommandOperation;\n}(OperationBase);\n\nmodule.exports = CommandOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/command.js"],"names":["Aspect","require","OperationBase","applyWriteConcern","debugOptions","handleCallback","MongoError","ReadPreference","resolveReadPreference","MongoDBNamespace","debugFields","CommandOperation","db","options","collection","command","hasAspect","WRITE_OPERATION","readPreference","coll","primary","callback","Object","assign","serverConfig","isDestroyed","_buildCommand","e","dbName","authdb","databaseName","writeConcern","session","inTransaction","s","logger","isDebug","debug","JSON","stringify","namespace","topology","err","result","full","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst OperationBase = require('./operation').OperationBase;\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst debugOptions = require('../utils').debugOptions;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\nconst ReadPreference = require('../core').ReadPreference;\nconst resolveReadPreference = require('../utils').resolveReadPreference;\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nconst debugFields = [\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'native_parser',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'raw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bufferMaxEntries',\n  'numberOfRetries',\n  'retryMiliSeconds',\n  'readPreference',\n  'pkFactory',\n  'parentDb',\n  'promiseLibrary',\n  'noListener'\n];\n\nclass CommandOperation extends OperationBase {\n  constructor(db, options, collection, command) {\n    super(options);\n\n    if (!this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (collection != null) {\n        this.options.readPreference = resolveReadPreference(collection, options);\n      } else {\n        this.options.readPreference = resolveReadPreference(db, options);\n      }\n    } else {\n      if (collection != null) {\n        applyWriteConcern(this.options, { db, coll: collection }, this.options);\n      } else {\n        applyWriteConcern(this.options, { db }, this.options);\n      }\n      this.options.readPreference = ReadPreference.primary;\n    }\n\n    this.db = db;\n\n    if (command != null) {\n      this.command = command;\n    }\n\n    if (collection != null) {\n      this.collection = collection;\n    }\n  }\n\n  _buildCommand() {\n    if (this.command != null) {\n      return this.command;\n    }\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = Object.assign({}, this.options);\n\n    // Did the user destroy the topology\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    let command;\n    try {\n      command = this._buildCommand();\n    } catch (e) {\n      return callback(e);\n    }\n\n    // Get the db name we are executing against\n    const dbName = options.dbName || options.authdb || db.databaseName;\n\n    // Convert the readPreference if its not a write\n    if (this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (options.writeConcern && (!options.session || !options.session.inTransaction())) {\n        command.writeConcern = options.writeConcern;\n      }\n    }\n\n    // Debug information\n    if (db.s.logger.isDebug()) {\n      db.s.logger.debug(\n        `executing command ${JSON.stringify(\n          command\n        )} against ${dbName}.$cmd with options [${JSON.stringify(\n          debugOptions(debugFields, options)\n        )}]`\n      );\n    }\n\n    const namespace =\n      this.namespace != null ? this.namespace : new MongoDBNamespace(dbName, '$cmd');\n\n    // Execute command\n    db.s.topology.command(namespace, command, options, (err, result) => {\n      if (err) return handleCallback(callback, err);\n      if (options.full) return handleCallback(callback, null, result);\n      handleCallback(callback, null, result.result);\n    });\n  }\n}\n\nmodule.exports = CommandOperation;\n"]},"metadata":{},"sourceType":"script"}