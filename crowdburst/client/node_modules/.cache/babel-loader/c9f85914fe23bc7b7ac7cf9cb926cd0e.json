{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar retrieveBSON = require('./connection/utils').retrieveBSON;\n\nvar EventEmitter = require('events');\n\nvar BSON = retrieveBSON();\nvar Binary = BSON.Binary;\n\nvar uuidV4 = require('./utils').uuidV4;\n\nvar MongoError = require('./error').MongoError;\n\nvar isRetryableError = require('././error').isRetryableError;\n\nvar MongoNetworkError = require('./error').MongoNetworkError;\n\nvar MongoWriteConcernError = require('./error').MongoWriteConcernError;\n\nvar Transaction = require('./transactions').Transaction;\n\nvar TxnState = require('./transactions').TxnState;\n\nvar isPromiseLike = require('./utils').isPromiseLike;\n\nvar ReadPreference = require('./topologies/read_preference');\n\nvar isTransactionCommand = require('./transactions').isTransactionCommand;\n\nvar resolveClusterTime = require('./topologies/shared').resolveClusterTime;\n\nvar isSharded = require('./wireprotocol/shared').isSharded;\n\nvar maxWireVersion = require('./utils').maxWireVersion;\n\nvar minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    var error = new MongoError('Cannot use a session that has ended');\n\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n/**\n * Options to pass when creating a Client Session\n * @typedef {Object} SessionOptions\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\n */\n\n/**\n * A BSON document reflecting the lsid of a {@link ClientSession}\n * @typedef {Object} SessionId\n */\n\n\nvar kServerSession = Symbol('serverSession');\n/**\n * A class representing a client session on the server\n * WARNING: not meant to be instantiated directly.\n * @class\n * @hideconstructor\n */\n\nvar ClientSession = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(ClientSession, _EventEmitter);\n\n  var _super = _createSuper(ClientSession);\n\n  /**\n   * Create a client session.\n   * WARNING: not meant to be instantiated directly\n   *\n   * @param {Topology} topology The current client's topology (Internal Class)\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\n   * @param {SessionOptions} [options] Optional settings\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\n   */\n  function ClientSession(topology, sessionPool, options, clientOptions) {\n    var _this;\n\n    _classCallCheck(this, ClientSession);\n\n    _this = _super.call(this);\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    clientOptions = clientOptions || {};\n    _this.topology = topology;\n    _this.sessionPool = sessionPool;\n    _this.hasEnded = false;\n    _this.clientOptions = clientOptions;\n    _this[kServerSession] = undefined;\n    _this.supports = {\n      causalConsistency: typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\n    };\n    _this.clusterTime = options.initialClusterTime;\n    _this.operationTime = null;\n    _this.explicit = !!options.explicit;\n    _this.owner = options.owner;\n    _this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    _this.transaction = new Transaction();\n    return _this;\n  }\n  /**\n   * The server id associated with this session\n   * @type {SessionId}\n   */\n\n\n  _createClass(ClientSession, [{\n    key: \"endSession\",\n\n    /**\n     * Ends this session on the server\n     *\n     * @param {Object} [options] Optional settings. Currently reserved for future use\n     * @param {Function} [callback] Optional callback for completion of this operation\n     */\n    value: function endSession(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options || {};\n\n      if (this.hasEnded) {\n        if (typeof callback === 'function') callback(null, null);\n        return;\n      }\n\n      if (this.serverSession && this.inTransaction()) {\n        this.abortTransaction(); // pass in callback?\n      } // release the server session back to the pool\n\n\n      this.sessionPool.release(this.serverSession);\n      this[kServerSession] = undefined; // mark the session as ended, and emit a signal\n\n      this.hasEnded = true;\n      this.emit('ended', this); // spec indicates that we should ignore all errors for `endSessions`\n\n      if (typeof callback === 'function') callback(null, null);\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n\n  }, {\n    key: \"advanceOperationTime\",\n    value: function advanceOperationTime(operationTime) {\n      if (this.operationTime == null) {\n        this.operationTime = operationTime;\n        return;\n      }\n\n      if (operationTime.greaterThan(this.operationTime)) {\n        this.operationTime = operationTime;\n      }\n    }\n    /**\n     * Used to determine if this session equals another\n     * @param {ClientSession} session\n     * @return {boolean} true if the sessions are equal\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(session) {\n      if (!(session instanceof ClientSession)) {\n        return false;\n      }\n\n      return this.id.id.buffer.equals(session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     */\n\n  }, {\n    key: \"incrementTransactionNumber\",\n    value: function incrementTransactionNumber() {\n      this.serverSession.txnNumber++;\n    }\n    /**\n     * @returns {boolean} whether this session is currently in a transaction or not\n     */\n\n  }, {\n    key: \"inTransaction\",\n    value: function inTransaction() {\n      return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param {TransactionOptions} options Options for the transaction\n     */\n\n  }, {\n    key: \"startTransaction\",\n    value: function startTransaction(options) {\n      assertAlive(this);\n\n      if (this.inTransaction()) {\n        throw new MongoError('Transaction already in progress');\n      }\n\n      var topologyMaxWireVersion = maxWireVersion(this.topology);\n\n      if (isSharded(this.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n        throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n      } // increment txnNumber\n\n\n      this.incrementTransactionNumber(); // create transaction state\n\n      this.transaction = new Transaction(Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions));\n      this.transaction.transition(TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     *\n     * @param {Function} [callback] optional callback for completion of this operation\n     * @return {Promise} A promise is returned if no callback is provided\n     */\n\n  }, {\n    key: \"commitTransaction\",\n    value: function commitTransaction(callback) {\n      var _this2 = this;\n\n      if (typeof callback === 'function') {\n        endTransaction(this, 'commitTransaction', callback);\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        endTransaction(_this2, 'commitTransaction', function (err, reply) {\n          return err ? reject(err) : resolve(reply);\n        });\n      });\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     *\n     * @param {Function} [callback] optional callback for completion of this operation\n     * @return {Promise} A promise is returned if no callback is provided\n     */\n\n  }, {\n    key: \"abortTransaction\",\n    value: function abortTransaction(callback) {\n      var _this3 = this;\n\n      if (typeof callback === 'function') {\n        endTransaction(this, 'abortTransaction', callback);\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        endTransaction(_this3, 'abortTransaction', function (err, reply) {\n          return err ? reject(err) : resolve(reply);\n        });\n      });\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     * @ignore\n     */\n\n  }, {\n    key: \"toBSON\",\n    value: function toBSON() {\n      throw new Error('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * A user provided function to be run within a transaction\n     *\n     * @callback WithTransactionCallback\n     * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\n     * @returns {Promise} The resulting Promise of operations run within this transaction\n     */\n\n    /**\n     * Runs a provided lambda within a transaction, retrying either the commit operation\n     * or entire transaction as needed (and when the error permits) to better ensure that\n     * the transaction can complete successfully.\n     *\n     * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n     * return a Promise will result in undefined behavior.\n     *\n     * @param {WithTransactionCallback} fn\n     * @param {TransactionOptions} [options] Optional settings for the transaction\n     */\n\n  }, {\n    key: \"withTransaction\",\n    value: function withTransaction(fn, options) {\n      var startTime = Date.now();\n      return attemptTransaction(this, startTime, fn, options);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.serverSession.id;\n    }\n  }, {\n    key: \"serverSession\",\n    get: function get() {\n      if (this[kServerSession] == null) {\n        this[kServerSession] = this.sessionPool.acquire();\n      }\n\n      return this[kServerSession];\n    }\n  }]);\n\n  return ClientSession;\n}(EventEmitter);\n\nvar MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nvar UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\nvar UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\nvar MAX_TIME_MS_EXPIRED_CODE = 50;\nvar NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\n\nfunction hasNotTimedOut(startTime, max) {\n  return Date.now() - startTime < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  return isMaxTimeMSExpiredError(err) || !NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) && err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE && err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE;\n}\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null) return false;\n  return err.code === MAX_TIME_MS_EXPIRED_CODE || err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE;\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(function (err) {\n    if (err instanceof MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nvar USER_EXPLICIT_TXN_END_STATES = new Set([TxnState.NO_TRANSACTION, TxnState.TRANSACTION_COMMITTED, TxnState.TRANSACTION_ABORTED]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n  var promise;\n\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise.then(function () {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }).catch(function (err) {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof MongoError && err.hasErrorLabel('TransientTransactionError') && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n\n      if (isMaxTimeMSExpiredError(err)) {\n        if (err.errorLabels == null) {\n          err.errorLabels = [];\n        }\n\n        err.errorLabels.push('UnknownTransactionCommitResult');\n      }\n\n      throw err;\n    }\n\n    if (session.transaction.isActive) {\n      return session.abortTransaction().then(function () {\n        return maybeRetryOrThrow(err);\n      });\n    }\n\n    return maybeRetryOrThrow(err);\n  });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  } // handle any initial problematic cases\n\n\n  var txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (txnState === TxnState.STARTING_TRANSACTION || txnState === TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_COMMITTED || txnState === TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  } // construct and send the command\n\n\n  var command = _defineProperty({}, commandName, 1); // apply a writeConcern if specified\n\n\n  var writeConcern;\n\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.w) {\n    writeConcern = {\n      w: session.clientOptions.w\n    };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern: writeConcern\n    });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName === 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n\n      if (e && (e instanceof MongoNetworkError || e instanceof MongoWriteConcernError || isRetryableError(e) || isMaxTimeMSExpiredError(e))) {\n        if (e.errorLabels) {\n          var idx = e.errorLabels.indexOf('TransientTransactionError');\n\n          if (idx !== -1) {\n            e.errorLabels.splice(idx, 1);\n          }\n        } else {\n          e.errorLabels = [];\n        }\n\n        if (isUnknownTransactionCommitResult(e)) {\n          e.errorLabels.push('UnknownTransactionCommitResult'); // per txns spec, must unpin session in this case\n\n          session.transaction.unpinServer();\n        }\n      }\n    } else {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n    }\n\n    callback(e, r);\n  } // The spec indicates that we should ignore all errors on `abortTransaction`\n\n\n  function transactionError(err) {\n    return commandName === 'commitTransaction' ? err : null;\n  }\n\n  if ( // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n  session.transaction.recoveryToken && supportsRecoveryToken(session)) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  } // send the command\n\n\n  session.topology.command('admin.$cmd', command, {\n    session: session\n  }, function (err, reply) {\n    if (err && isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.transaction.unpinServer();\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return session.topology.command('admin.$cmd', command, {\n        session: session\n      }, function (_err, _reply) {\n        return commandHandler(transactionError(_err), _reply);\n      });\n    }\n\n    commandHandler(transactionError(err), reply);\n  });\n}\n\nfunction supportsRecoveryToken(session) {\n  var topology = session.topology;\n  return !!topology.s.options.useRecoveryToken;\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @ignore\n */\n\n\nvar ServerSession = /*#__PURE__*/function () {\n  function ServerSession() {\n    _classCallCheck(this, ServerSession);\n\n    this.id = {\n      id: new Binary(uuidV4(), Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = Date.now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   * @ignore\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\n   * @return {boolean} true if the session has timed out.\n   */\n\n\n  _createClass(ServerSession, [{\n    key: \"hasTimedOut\",\n    value: function hasTimedOut(sessionTimeoutMinutes) {\n      // Take the difference of the lastUse timestamp and now, which will result in a value in\n      // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n      var idleTimeMinutes = Math.round((Date.now() - this.lastUse) % 86400000 % 3600000 / 60000);\n      return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n  }]);\n\n  return ServerSession;\n}();\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @ignore\n */\n\n\nvar ServerSessionPool = /*#__PURE__*/function () {\n  function ServerSessionPool(topology) {\n    _classCallCheck(this, ServerSessionPool);\n\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n  /**\n   * Ends all sessions in the session pool.\n   * @ignore\n   */\n\n\n  _createClass(ServerSessionPool, [{\n    key: \"endAllPooledSessions\",\n    value: function endAllPooledSessions(callback) {\n      var _this4 = this;\n\n      if (this.sessions.length) {\n        this.topology.endSessions(this.sessions.map(function (session) {\n          return session.id;\n        }), function () {\n          _this4.sessions = [];\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n        return;\n      }\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession\n     * is created.\n     * @ignore\n     * @returns {ServerSession}\n     */\n\n  }, {\n    key: \"acquire\",\n    value: function acquire() {\n      var sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n      while (this.sessions.length) {\n        var session = this.sessions.shift();\n\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n          return session;\n        }\n      }\n\n      return new ServerSession();\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     * @ignore\n     * @param {ServerSession} session The session to release to the pool\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(session) {\n      var sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n      while (this.sessions.length) {\n        var pooledSession = this.sessions[this.sessions.length - 1];\n\n        if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n          this.sessions.pop();\n        } else {\n          break;\n        }\n      }\n\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        if (session.isDirty) {\n          return;\n        } // otherwise, readd this session to the session pool\n\n\n        this.sessions.unshift(session);\n      }\n    }\n  }]);\n\n  return ServerSessionPool;\n}(); // TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\n\n\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.parallelCollectionScan || command.geoNear || command.geoSearch) {\n    return true;\n  }\n\n  if (command.mapReduce && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @ignore\n * @param {ClientSession} session the session tracking transaction state\n * @param {Object} command the command to decorate\n * @param {Object} topology the topology for tracking the cluster time\n * @param {Object} [options] Optional settings passed to calling operation\n * @return {MongoError|null} An error, if some error condition was met\n */\n\n\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    return new MongoError('Cannot use a session that has ended');\n  }\n\n  var serverSession = session.serverSession;\n  serverSession.lastUse = Date.now();\n  command.lsid = serverSession.id; // first apply non-transaction-specific sessions data\n\n  var inTransaction = session.inTransaction() || isTransactionCommand(command);\n  var isRetryableWrite = options.willRetryWrite;\n  var shouldApplyReadConcern = commandSupportsReadConcern(command);\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\n  } // now attempt to apply transaction-specific sessions data\n\n\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    } // TODO: the following should only be applied to read operation per spec.\n    // for causal consistency\n\n\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n\n    return;\n  }\n\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\n    return new MongoError(\"Read preference in a transaction must be primary, not: \".concat(options.readPreference.mode));\n  } // `autocommit` must always be false to differentiate from retryable writes\n\n\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    var readConcern = session.transaction.options.readConcern || session.clientOptions.readConcern;\n\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n}\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    resolveClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n}\n\nmodule.exports = {\n  ClientSession: ClientSession,\n  ServerSession: ServerSession,\n  ServerSessionPool: ServerSessionPool,\n  TxnState: TxnState,\n  applySession: applySession,\n  updateSessionFromResponse: updateSessionFromResponse,\n  commandSupportsReadConcern: commandSupportsReadConcern\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/sessions.js"],"names":["retrieveBSON","require","EventEmitter","BSON","Binary","uuidV4","MongoError","isRetryableError","MongoNetworkError","MongoWriteConcernError","Transaction","TxnState","isPromiseLike","ReadPreference","isTransactionCommand","resolveClusterTime","isSharded","maxWireVersion","minWireVersionForShardedTransactions","assertAlive","session","callback","serverSession","error","kServerSession","Symbol","ClientSession","topology","sessionPool","options","clientOptions","Error","ServerSessionPool","hasEnded","undefined","supports","causalConsistency","clusterTime","initialClusterTime","operationTime","explicit","owner","defaultTransactionOptions","Object","assign","transaction","inTransaction","abortTransaction","release","emit","greaterThan","id","buffer","equals","txnNumber","isActive","topologyMaxWireVersion","incrementTransactionNumber","transition","STARTING_TRANSACTION","endTransaction","Promise","resolve","reject","err","reply","fn","startTime","Date","now","attemptTransaction","acquire","MAX_WITH_TRANSACTION_TIMEOUT","UNSATISFIABLE_WRITE_CONCERN_CODE","UNKNOWN_REPL_WRITE_CONCERN_CODE","MAX_TIME_MS_EXPIRED_CODE","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","isUnknownTransactionCommitResult","isMaxTimeMSExpiredError","has","codeName","code","writeConcernError","attemptTransactionCommit","commitTransaction","catch","hasErrorLabel","USER_EXPLICIT_TXN_END_STATES","NO_TRANSACTION","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","state","startTransaction","promise","TypeError","then","maybeRetryOrThrow","errorLabels","push","commandName","txnState","TRANSACTION_COMMITTED_EMPTY","command","writeConcern","w","wtimeout","maxTimeMS","commandHandler","e","r","idx","indexOf","splice","unpinServer","transactionError","recoveryToken","supportsRecoveryToken","_err","_reply","s","useRecoveryToken","ServerSession","SUBTYPE_UUID","lastUse","isDirty","sessionTimeoutMinutes","idleTimeMinutes","Math","round","sessions","length","endSessions","map","logicalSessionTimeoutMinutes","shift","hasTimedOut","pooledSession","pop","unshift","commandSupportsReadConcern","aggregate","count","distinct","find","parallelCollectionScan","geoNear","geoSearch","mapReduce","out","inline","applySession","lsid","isRetryableWrite","willRetryWrite","shouldApplyReadConcern","Long","fromNumber","readConcern","afterClusterTime","readPreference","primary","mode","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","advanceOperationTime","_recoveryToken","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\nconst EventEmitter = require('events');\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\nconst uuidV4 = require('./utils').uuidV4;\nconst MongoError = require('./error').MongoError;\nconst isRetryableError = require('././error').isRetryableError;\nconst MongoNetworkError = require('./error').MongoNetworkError;\nconst MongoWriteConcernError = require('./error').MongoWriteConcernError;\nconst Transaction = require('./transactions').Transaction;\nconst TxnState = require('./transactions').TxnState;\nconst isPromiseLike = require('./utils').isPromiseLike;\nconst ReadPreference = require('./topologies/read_preference');\nconst isTransactionCommand = require('./transactions').isTransactionCommand;\nconst resolveClusterTime = require('./topologies/shared').resolveClusterTime;\nconst isSharded = require('./wireprotocol/shared').isSharded;\nconst maxWireVersion = require('./utils').maxWireVersion;\n\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new MongoError('Cannot use a session that has ended');\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n\n/**\n * Options to pass when creating a Client Session\n * @typedef {Object} SessionOptions\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\n */\n\n/**\n * A BSON document reflecting the lsid of a {@link ClientSession}\n * @typedef {Object} SessionId\n */\n\nconst kServerSession = Symbol('serverSession');\n\n/**\n * A class representing a client session on the server\n * WARNING: not meant to be instantiated directly.\n * @class\n * @hideconstructor\n */\nclass ClientSession extends EventEmitter {\n  /**\n   * Create a client session.\n   * WARNING: not meant to be instantiated directly\n   *\n   * @param {Topology} topology The current client's topology (Internal Class)\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\n   * @param {SessionOptions} [options] Optional settings\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    clientOptions = clientOptions || {};\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n\n    this.supports = {\n      causalConsistency:\n        typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = null;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /**\n   * The server id associated with this session\n   * @type {SessionId}\n   */\n  get id() {\n    return this.serverSession.id;\n  }\n\n  get serverSession() {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    }\n\n    return this[kServerSession];\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param {Object} [options] Optional settings. Currently reserved for future use\n   * @param {Function} [callback] Optional callback for completion of this operation\n   */\n  endSession(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    if (this.hasEnded) {\n      if (typeof callback === 'function') callback(null, null);\n      return;\n    }\n\n    if (this.serverSession && this.inTransaction()) {\n      this.abortTransaction(); // pass in callback?\n    }\n\n    // release the server session back to the pool\n    this.sessionPool.release(this.serverSession);\n    this[kServerSession] = undefined;\n\n    // mark the session as ended, and emit a signal\n    this.hasEnded = true;\n    this.emit('ended', this);\n\n    // spec indicates that we should ignore all errors for `endSessions`\n    if (typeof callback === 'function') callback(null, null);\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Used to determine if this session equals another\n   * @param {ClientSession} session\n   * @return {boolean} true if the sessions are equal\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   */\n  incrementTransactionNumber() {\n    this.serverSession.txnNumber++;\n  }\n\n  /**\n   * @returns {boolean} whether this session is currently in a transaction or not\n   */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param {TransactionOptions} options Options for the transaction\n   */\n  startTransaction(options) {\n    assertAlive(this);\n    if (this.inTransaction()) {\n      throw new MongoError('Transaction already in progress');\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n    if (\n      isSharded(this.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n\n    // create transaction state\n    this.transaction = new Transaction(\n      Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions)\n    );\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  commitTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'commitTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(this, 'commitTransaction', (err, reply) =>\n        err ? reject(err) : resolve(reply)\n      );\n    });\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  abortTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'abortTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(this, 'abortTransaction', (err, reply) =>\n        err ? reject(err) : resolve(reply)\n      );\n    });\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   * @ignore\n   */\n  toBSON() {\n    throw new Error('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * A user provided function to be run within a transaction\n   *\n   * @callback WithTransactionCallback\n   * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\n   * @returns {Promise} The resulting Promise of operations run within this transaction\n   */\n\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param {WithTransactionCallback} fn\n   * @param {TransactionOptions} [options] Optional settings for the transaction\n   */\n  withTransaction(fn, options) {\n    const startTime = Date.now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\nconst UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\nconst MAX_TIME_MS_EXPIRED_CODE = 50;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime, max) {\n  return Date.now() - startTime < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) &&\n      err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE &&\n      err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE)\n  );\n}\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null) return false;\n  return (\n    err.code === MAX_TIME_MS_EXPIRED_CODE ||\n    (err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE)\n  );\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise\n    .then(() => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    })\n    .catch(err => {\n      function maybeRetryOrThrow(err) {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel('TransientTransactionError') &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          if (err.errorLabels == null) {\n            err.errorLabels = [];\n          }\n          err.errorLabels.push('UnknownTransactionCommitResult');\n        }\n\n        throw err;\n      }\n\n      if (session.transaction.isActive) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  }\n\n  // handle any initial problematic cases\n  let txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.w) {\n    writeConcern = { w: session.clientOptions.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName === 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n\n      if (\n        e &&\n        (e instanceof MongoNetworkError ||\n          e instanceof MongoWriteConcernError ||\n          isRetryableError(e) ||\n          isMaxTimeMSExpiredError(e))\n      ) {\n        if (e.errorLabels) {\n          const idx = e.errorLabels.indexOf('TransientTransactionError');\n          if (idx !== -1) {\n            e.errorLabels.splice(idx, 1);\n          }\n        } else {\n          e.errorLabels = [];\n        }\n\n        if (isUnknownTransactionCommitResult(e)) {\n          e.errorLabels.push('UnknownTransactionCommitResult');\n\n          // per txns spec, must unpin session in this case\n          session.transaction.unpinServer();\n        }\n      }\n    } else {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n    }\n\n    callback(e, r);\n  }\n\n  // The spec indicates that we should ignore all errors on `abortTransaction`\n  function transactionError(err) {\n    return commandName === 'commitTransaction' ? err : null;\n  }\n\n  if (\n    // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n    session.transaction.recoveryToken &&\n    supportsRecoveryToken(session)\n  ) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  session.topology.command('admin.$cmd', command, { session }, (err, reply) => {\n    if (err && isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.transaction.unpinServer();\n\n        command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return session.topology.command('admin.$cmd', command, { session }, (_err, _reply) =>\n        commandHandler(transactionError(_err), _reply)\n      );\n    }\n\n    commandHandler(transactionError(err), reply);\n  });\n}\n\nfunction supportsRecoveryToken(session) {\n  const topology = session.topology;\n  return !!topology.s.options.useRecoveryToken;\n}\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @ignore\n */\nclass ServerSession {\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = Date.now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   * @ignore\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\n   * @return {boolean} true if the session has timed out.\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      (((Date.now() - this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @ignore\n */\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n\n  /**\n   * Ends all sessions in the session pool.\n   * @ignore\n   */\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(\n        this.sessions.map(session => session.id),\n        () => {\n          this.sessions = [];\n          if (typeof callback === 'function') {\n            callback();\n          }\n        }\n      );\n\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession\n   * is created.\n   * @ignore\n   * @returns {ServerSession}\n   */\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   * @ignore\n   * @param {ServerSession} session The session to release to the pool\n   */\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n  if (\n    command.aggregate ||\n    command.count ||\n    command.distinct ||\n    command.find ||\n    command.parallelCollectionScan ||\n    command.geoNear ||\n    command.geoSearch\n  ) {\n    return true;\n  }\n\n  if (command.mapReduce && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @ignore\n * @param {ClientSession} session the session tracking transaction state\n * @param {Object} command the command to decorate\n * @param {Object} topology the topology for tracking the cluster time\n * @param {Object} [options] Optional settings passed to calling operation\n * @return {MongoError|null} An error, if some error condition was met\n */\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    return new MongoError('Cannot use a session that has ended');\n  }\n\n  const serverSession = session.serverSession;\n  serverSession.lastUse = Date.now();\n  command.lsid = serverSession.id;\n\n  // first apply non-transaction-specific sessions data\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = options.willRetryWrite;\n  const shouldApplyReadConcern = commandSupportsReadConcern(command);\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  // now attempt to apply transaction-specific sessions data\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    // TODO: the following should only be applied to read operation per spec.\n    // for causal consistency\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n\n    return;\n  }\n\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\n    return new MongoError(\n      `Read preference in a transaction must be primary, not: ${options.readPreference.mode}`\n    );\n  }\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session.clientOptions.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n}\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    resolveClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n}\n\nmodule.exports = {\n  ClientSession,\n  ServerSession,\n  ServerSessionPool,\n  TxnState,\n  applySession,\n  updateSessionFromResponse,\n  commandSupportsReadConcern\n};\n"]},"metadata":{},"sourceType":"script"}