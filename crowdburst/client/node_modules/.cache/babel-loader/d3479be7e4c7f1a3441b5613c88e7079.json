{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _defineProperty = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _makeStateMachine;\n\nvar ServerType = require('./common').ServerType;\n\nvar calculateDurationInMs = require('../utils').calculateDurationInMs;\n\nvar EventEmitter = require('events');\n\nvar connect = require('../connection/connect');\n\nvar Connection = require('../../cmap/connection').Connection;\n\nvar common = require('./common');\n\nvar makeStateMachine = require('../utils').makeStateMachine;\n\nvar MongoError = require('../error').MongoError;\n\nvar sdamEvents = require('./events');\n\nvar ServerHeartbeatStartedEvent = sdamEvents.ServerHeartbeatStartedEvent;\nvar ServerHeartbeatSucceededEvent = sdamEvents.ServerHeartbeatSucceededEvent;\nvar ServerHeartbeatFailedEvent = sdamEvents.ServerHeartbeatFailedEvent;\nvar kServer = Symbol('server');\nvar kMonitorId = Symbol('monitorId');\nvar kConnection = Symbol('connection');\nvar kCancellationToken = Symbol('cancellationToken');\nvar kLastCheckTime = Symbol('lastCheckTime');\nvar STATE_CLOSED = common.STATE_CLOSED;\nvar STATE_CLOSING = common.STATE_CLOSING;\nvar STATE_IDLE = 'idle';\nvar STATE_MONITORING = 'monitoring';\nvar stateTransition = makeStateMachine((_makeStateMachine = {}, _defineProperty(_makeStateMachine, STATE_CLOSING, [STATE_CLOSING, STATE_CLOSED]), _defineProperty(_makeStateMachine, STATE_CLOSED, [STATE_CLOSED, STATE_MONITORING]), _defineProperty(_makeStateMachine, STATE_IDLE, [STATE_IDLE, STATE_MONITORING, STATE_CLOSING]), _defineProperty(_makeStateMachine, STATE_MONITORING, [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]), _makeStateMachine));\nvar INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\n\nvar Monitor = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Monitor, _EventEmitter);\n\n  var _super = _createSuper(Monitor);\n\n  function Monitor(server, options) {\n    var _this;\n\n    _classCallCheck(this, Monitor);\n\n    _this = _super.call(this, options);\n    _this[kServer] = server;\n    _this[kConnection] = undefined;\n    _this[kCancellationToken] = new EventEmitter();\n\n    _this[kCancellationToken].setMaxListeners(Infinity);\n\n    _this.s = {\n      state: STATE_CLOSED\n    };\n    _this.address = server.description.address;\n    _this.options = Object.freeze({\n      connectTimeoutMS: typeof options.connectionTimeout === 'number' ? options.connectionTimeout : typeof options.connectTimeoutMS === 'number' ? options.connectTimeoutMS : 10000,\n      heartbeatFrequencyMS: typeof options.heartbeatFrequencyMS === 'number' ? options.heartbeatFrequencyMS : 10000,\n      minHeartbeatFrequencyMS: typeof options.minHeartbeatFrequencyMS === 'number' ? options.minHeartbeatFrequencyMS : 500\n    }); // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n\n    var addressParts = server.description.address.split(':');\n    _this.connectOptions = Object.freeze(Object.assign({\n      id: '<monitor>',\n      host: addressParts[0],\n      port: parseInt(addressParts[1], 10),\n      bson: server.s.bson,\n      connectionType: Connection\n    }, server.s.options, _this.options, // force BSON serialization options\n    {\n      raw: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    }));\n    return _this;\n  }\n\n  _createClass(Monitor, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.s.state !== STATE_CLOSED) {\n        return;\n      }\n\n      monitorServer(this);\n    }\n  }, {\n    key: \"requestCheck\",\n    value: function requestCheck() {\n      if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n        return;\n      }\n\n      var heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n      var minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n      var remainingTime = heartbeatFrequencyMS - calculateDurationInMs(this[kLastCheckTime]);\n\n      if (remainingTime > minHeartbeatFrequencyMS && this[kMonitorId]) {\n        clearTimeout(this[kMonitorId]);\n        rescheduleMonitoring(this, minHeartbeatFrequencyMS);\n        return;\n      }\n\n      if (this[kMonitorId]) {\n        clearTimeout(this[kMonitorId]);\n      }\n\n      monitorServer(this);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n        return;\n      }\n\n      stateTransition(this, STATE_CLOSING);\n      this[kCancellationToken].emit('cancel');\n\n      if (this[kMonitorId]) {\n        clearTimeout(this[kMonitorId]);\n      }\n\n      if (this[kConnection]) {\n        this[kConnection].destroy({\n          force: true\n        });\n      }\n\n      this.emit('close');\n      stateTransition(this, STATE_CLOSED);\n    }\n  }]);\n\n  return Monitor;\n}(EventEmitter);\n\nfunction checkServer(monitor, callback) {\n  if (monitor[kConnection] && monitor[kConnection].closed) {\n    monitor[kConnection] = undefined;\n  }\n\n  var start = process.hrtime();\n  monitor.emit('serverHeartbeatStarted', new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err) {\n    monitor.emit('serverHeartbeatFailed', new ServerHeartbeatFailedEvent(calculateDurationInMs(start), err, monitor.address));\n    callback(err);\n  }\n\n  function successHandler(isMaster) {\n    monitor.emit('serverHeartbeatSucceeded', new ServerHeartbeatSucceededEvent(calculateDurationInMs(start), isMaster, monitor.address));\n    return callback(undefined, isMaster);\n  }\n\n  if (monitor[kConnection] != null) {\n    var connectTimeoutMS = monitor.options.connectTimeoutMS;\n    monitor[kConnection].command('admin.$cmd', {\n      ismaster: true\n    }, {\n      socketTimeout: connectTimeoutMS\n    }, function (err, result) {\n      if (err) {\n        failureHandler(err);\n        return;\n      }\n\n      successHandler(result.result);\n    });\n    return;\n  } // connecting does an implicit `ismaster`\n\n\n  connect(monitor.connectOptions, monitor[kCancellationToken], function (err, conn) {\n    if (err) {\n      monitor[kConnection] = undefined;\n      failureHandler(err);\n      return;\n    }\n\n    if (monitor.s.state === STATE_CLOSING || monitor.s.state === STATE_CLOSED) {\n      conn.destroy({\n        force: true\n      });\n      failureHandler(new MongoError('monitor was destroyed'));\n      return;\n    }\n\n    monitor[kConnection] = conn;\n    successHandler(conn.ismaster);\n  });\n}\n\nfunction monitorServer(monitor) {\n  stateTransition(monitor, STATE_MONITORING); // TODO: the next line is a legacy event, remove in v4\n\n  process.nextTick(function () {\n    return monitor.emit('monitoring', monitor[kServer]);\n  });\n  checkServer(monitor, function (e0) {\n    if (e0 == null) {\n      rescheduleMonitoring(monitor);\n      return;\n    } // otherwise an error occured on initial discovery, also bail\n\n\n    if (monitor[kServer].description.type === ServerType.Unknown) {\n      monitor.emit('resetServer', e0);\n      rescheduleMonitoring(monitor);\n      return;\n    } // According to the SDAM specification's \"Network error during server check\" section, if\n    // an ismaster call fails we reset the server's pool. If a server was once connected,\n    // change its type to `Unknown` only after retrying once.\n\n\n    monitor.emit('resetConnectionPool');\n    checkServer(monitor, function (e1) {\n      if (e1) {\n        monitor.emit('resetServer', e1);\n      }\n\n      rescheduleMonitoring(monitor);\n    });\n  });\n}\n\nfunction rescheduleMonitoring(monitor, ms) {\n  var heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;\n\n  if (monitor.s.state === STATE_CLOSING || monitor.s.state === STATE_CLOSED) {\n    return;\n  }\n\n  stateTransition(monitor, STATE_IDLE);\n  monitor[kLastCheckTime] = process.hrtime();\n  monitor[kMonitorId] = setTimeout(function () {\n    monitor[kMonitorId] = undefined;\n    monitor.requestCheck();\n  }, ms || heartbeatFrequencyMS);\n}\n\nmodule.exports = {\n  Monitor: Monitor\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/sdam/monitor.js"],"names":["ServerType","require","calculateDurationInMs","EventEmitter","connect","Connection","common","makeStateMachine","MongoError","sdamEvents","ServerHeartbeatStartedEvent","ServerHeartbeatSucceededEvent","ServerHeartbeatFailedEvent","kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kLastCheckTime","STATE_CLOSED","STATE_CLOSING","STATE_IDLE","STATE_MONITORING","stateTransition","INVALID_REQUEST_CHECK_STATES","Set","Monitor","server","options","undefined","setMaxListeners","Infinity","s","state","address","description","Object","freeze","connectTimeoutMS","connectionTimeout","heartbeatFrequencyMS","minHeartbeatFrequencyMS","addressParts","split","connectOptions","assign","id","host","port","parseInt","bson","connectionType","raw","promoteLongs","promoteValues","promoteBuffers","monitorServer","has","remainingTime","clearTimeout","rescheduleMonitoring","emit","destroy","force","checkServer","monitor","callback","closed","start","process","hrtime","failureHandler","err","successHandler","isMaster","command","ismaster","socketTimeout","result","conn","nextTick","e0","type","Unknown","e1","ms","setTimeout","requestCheck","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst ServerType = require('./common').ServerType;\nconst calculateDurationInMs = require('../utils').calculateDurationInMs;\nconst EventEmitter = require('events');\nconst connect = require('../connection/connect');\nconst Connection = require('../../cmap/connection').Connection;\nconst common = require('./common');\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst MongoError = require('../error').MongoError;\n\nconst sdamEvents = require('./events');\nconst ServerHeartbeatStartedEvent = sdamEvents.ServerHeartbeatStartedEvent;\nconst ServerHeartbeatSucceededEvent = sdamEvents.ServerHeartbeatSucceededEvent;\nconst ServerHeartbeatFailedEvent = sdamEvents.ServerHeartbeatFailedEvent;\n\nconst kServer = Symbol('server');\nconst kMonitorId = Symbol('monitorId');\nconst kConnection = Symbol('connection');\nconst kCancellationToken = Symbol('cancellationToken');\nconst kLastCheckTime = Symbol('lastCheckTime');\n\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\n\nclass Monitor extends EventEmitter {\n  constructor(server, options) {\n    super(options);\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new EventEmitter();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS:\n        typeof options.connectionTimeout === 'number'\n          ? options.connectionTimeout\n          : typeof options.connectTimeoutMS === 'number'\n          ? options.connectTimeoutMS\n          : 10000,\n      heartbeatFrequencyMS:\n        typeof options.heartbeatFrequencyMS === 'number' ? options.heartbeatFrequencyMS : 10000,\n      minHeartbeatFrequencyMS:\n        typeof options.minHeartbeatFrequencyMS === 'number' ? options.minHeartbeatFrequencyMS : 500\n    });\n\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const addressParts = server.description.address.split(':');\n    this.connectOptions = Object.freeze(\n      Object.assign(\n        {\n          id: '<monitor>',\n          host: addressParts[0],\n          port: parseInt(addressParts[1], 10),\n          bson: server.s.bson,\n          connectionType: Connection\n        },\n        server.s.options,\n        this.options,\n\n        // force BSON serialization options\n        {\n          raw: false,\n          promoteLongs: true,\n          promoteValues: true,\n          promoteBuffers: true\n        }\n      )\n    );\n  }\n\n  connect() {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    monitorServer(this);\n  }\n\n  requestCheck() {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    const remainingTime = heartbeatFrequencyMS - calculateDurationInMs(this[kLastCheckTime]);\n    if (remainingTime > minHeartbeatFrequencyMS && this[kMonitorId]) {\n      clearTimeout(this[kMonitorId]);\n      rescheduleMonitoring(this, minHeartbeatFrequencyMS);\n      return;\n    }\n\n    if (this[kMonitorId]) {\n      clearTimeout(this[kMonitorId]);\n    }\n\n    monitorServer(this);\n  }\n\n  close() {\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    this[kCancellationToken].emit('cancel');\n    if (this[kMonitorId]) {\n      clearTimeout(this[kMonitorId]);\n    }\n\n    if (this[kConnection]) {\n      this[kConnection].destroy({ force: true });\n    }\n\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction checkServer(monitor, callback) {\n  if (monitor[kConnection] && monitor[kConnection].closed) {\n    monitor[kConnection] = undefined;\n  }\n\n  const start = process.hrtime();\n  monitor.emit('serverHeartbeatStarted', new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err) {\n    monitor.emit(\n      'serverHeartbeatFailed',\n      new ServerHeartbeatFailedEvent(calculateDurationInMs(start), err, monitor.address)\n    );\n\n    callback(err);\n  }\n\n  function successHandler(isMaster) {\n    monitor.emit(\n      'serverHeartbeatSucceeded',\n      new ServerHeartbeatSucceededEvent(calculateDurationInMs(start), isMaster, monitor.address)\n    );\n\n    return callback(undefined, isMaster);\n  }\n\n  if (monitor[kConnection] != null) {\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    monitor[kConnection].command(\n      'admin.$cmd',\n      { ismaster: true },\n      { socketTimeout: connectTimeoutMS },\n      (err, result) => {\n        if (err) {\n          failureHandler(err);\n          return;\n        }\n\n        successHandler(result.result);\n      }\n    );\n\n    return;\n  }\n\n  // connecting does an implicit `ismaster`\n  connect(monitor.connectOptions, monitor[kCancellationToken], (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n      failureHandler(err);\n      return;\n    }\n\n    if (monitor.s.state === STATE_CLOSING || monitor.s.state === STATE_CLOSED) {\n      conn.destroy({ force: true });\n      failureHandler(new MongoError('monitor was destroyed'));\n      return;\n    }\n\n    monitor[kConnection] = conn;\n    successHandler(conn.ismaster);\n  });\n}\n\nfunction monitorServer(monitor) {\n  stateTransition(monitor, STATE_MONITORING);\n\n  // TODO: the next line is a legacy event, remove in v4\n  process.nextTick(() => monitor.emit('monitoring', monitor[kServer]));\n\n  checkServer(monitor, e0 => {\n    if (e0 == null) {\n      rescheduleMonitoring(monitor);\n      return;\n    }\n\n    // otherwise an error occured on initial discovery, also bail\n    if (monitor[kServer].description.type === ServerType.Unknown) {\n      monitor.emit('resetServer', e0);\n      rescheduleMonitoring(monitor);\n      return;\n    }\n\n    // According to the SDAM specification's \"Network error during server check\" section, if\n    // an ismaster call fails we reset the server's pool. If a server was once connected,\n    // change its type to `Unknown` only after retrying once.\n    monitor.emit('resetConnectionPool');\n\n    checkServer(monitor, e1 => {\n      if (e1) {\n        monitor.emit('resetServer', e1);\n      }\n\n      rescheduleMonitoring(monitor);\n    });\n  });\n}\n\nfunction rescheduleMonitoring(monitor, ms) {\n  const heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;\n  if (monitor.s.state === STATE_CLOSING || monitor.s.state === STATE_CLOSED) {\n    return;\n  }\n\n  stateTransition(monitor, STATE_IDLE);\n\n  monitor[kLastCheckTime] = process.hrtime();\n  monitor[kMonitorId] = setTimeout(() => {\n    monitor[kMonitorId] = undefined;\n    monitor.requestCheck();\n  }, ms || heartbeatFrequencyMS);\n}\n\nmodule.exports = {\n  Monitor\n};\n"]},"metadata":{},"sourceType":"script"}