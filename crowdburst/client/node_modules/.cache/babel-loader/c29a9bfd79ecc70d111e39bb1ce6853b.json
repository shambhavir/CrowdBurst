{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Topology = require('../core').Topology;\n\nvar ServerCapabilities = require('./topology_base').ServerCapabilities;\n\nvar Cursor = require('../cursor');\n\nvar translateOptions = require('../utils').translateOptions;\n\nvar NativeTopology = /*#__PURE__*/function (_Topology) {\n  _inherits(NativeTopology, _Topology);\n\n  var _super = _createSuper(NativeTopology);\n\n  function NativeTopology(servers, options) {\n    _classCallCheck(this, NativeTopology);\n\n    options = options || {};\n    var clonedOptions = Object.assign({}, {\n      cursorFactory: Cursor,\n      reconnect: false,\n      emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n      maxPoolSize: typeof options.poolSize === 'number' ? options.poolSize : 5,\n      minPoolSize: typeof options.minSize === 'number' ? options.minSize : 0,\n      monitorCommands: typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n    }); // Translate any SSL options and other connectivity options\n\n    clonedOptions = translateOptions(clonedOptions, options); // Socket options\n\n    var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options; // Translate all the options to the core types\n\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n    return _super.call(this, servers, clonedOptions);\n  }\n\n  _createClass(NativeTopology, [{\n    key: \"capabilities\",\n    value: function capabilities() {\n      if (this.s.sCapabilities) return this.s.sCapabilities;\n      if (this.lastIsMaster() == null) return null;\n      this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\n      return this.s.sCapabilities;\n    } // Command\n\n  }, {\n    key: \"command\",\n    value: function command(ns, cmd, options, callback) {\n      _get(_getPrototypeOf(NativeTopology.prototype), \"command\", this).call(this, ns.toString(), cmd, options, callback);\n    } // Insert\n\n  }, {\n    key: \"insert\",\n    value: function insert(ns, ops, options, callback) {\n      _get(_getPrototypeOf(NativeTopology.prototype), \"insert\", this).call(this, ns.toString(), ops, options, callback);\n    } // Update\n\n  }, {\n    key: \"update\",\n    value: function update(ns, ops, options, callback) {\n      _get(_getPrototypeOf(NativeTopology.prototype), \"update\", this).call(this, ns.toString(), ops, options, callback);\n    } // Remove\n\n  }, {\n    key: \"remove\",\n    value: function remove(ns, ops, options, callback) {\n      _get(_getPrototypeOf(NativeTopology.prototype), \"remove\", this).call(this, ns.toString(), ops, options, callback);\n    }\n  }]);\n\n  return NativeTopology;\n}(Topology);\n\nmodule.exports = NativeTopology;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/topologies/native_topology.js"],"names":["Topology","require","ServerCapabilities","Cursor","translateOptions","NativeTopology","servers","options","clonedOptions","Object","assign","cursorFactory","reconnect","emitError","maxPoolSize","poolSize","minPoolSize","minSize","monitorCommands","socketOptions","keys","length","s","sCapabilities","lastIsMaster","ns","cmd","callback","toString","ops","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,QAApC;;AACA,IAAME,kBAAkB,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,kBAAtD;;AACA,IAAMC,MAAM,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,gBAA7C;;IAEMC,c;;;;;AACJ,0BAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAC5BA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,QAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAClB,EADkB,EAElB;AACEC,MAAAA,aAAa,EAAER,MADjB;AAEES,MAAAA,SAAS,EAAE,KAFb;AAGEC,MAAAA,SAAS,EAAE,OAAON,OAAO,CAACM,SAAf,KAA6B,SAA7B,GAAyCN,OAAO,CAACM,SAAjD,GAA6D,IAH1E;AAIEC,MAAAA,WAAW,EAAE,OAAOP,OAAO,CAACQ,QAAf,KAA4B,QAA5B,GAAuCR,OAAO,CAACQ,QAA/C,GAA0D,CAJzE;AAKEC,MAAAA,WAAW,EAAE,OAAOT,OAAO,CAACU,OAAf,KAA2B,QAA3B,GAAsCV,OAAO,CAACU,OAA9C,GAAwD,CALvE;AAMEC,MAAAA,eAAe,EACb,OAAOX,OAAO,CAACW,eAAf,KAAmC,SAAnC,GAA+CX,OAAO,CAACW,eAAvD,GAAyE;AAP7E,KAFkB,CAApB,CAH4B,CAgB5B;;AACAV,IAAAA,aAAa,GAAGJ,gBAAgB,CAACI,aAAD,EAAgBD,OAAhB,CAAhC,CAjB4B,CAmB5B;;AACA,QAAIY,aAAa,GACfZ,OAAO,CAACY,aAAR,IAAyBV,MAAM,CAACW,IAAP,CAAYb,OAAO,CAACY,aAApB,EAAmCE,MAAnC,GAA4C,CAArE,GACId,OAAO,CAACY,aADZ,GAEIZ,OAHN,CApB4B,CAyB5B;;AACAC,IAAAA,aAAa,GAAGJ,gBAAgB,CAACI,aAAD,EAAgBW,aAAhB,CAAhC;AA1B4B,6BA4BtBb,OA5BsB,EA4BbE,aA5Ba;AA6B7B;;;;mCAEc;AACb,UAAI,KAAKc,CAAL,CAAOC,aAAX,EAA0B,OAAO,KAAKD,CAAL,CAAOC,aAAd;AAC1B,UAAI,KAAKC,YAAL,MAAuB,IAA3B,EAAiC,OAAO,IAAP;AACjC,WAAKF,CAAL,CAAOC,aAAP,GAAuB,IAAIrB,kBAAJ,CAAuB,KAAKsB,YAAL,EAAvB,CAAvB;AACA,aAAO,KAAKF,CAAL,CAAOC,aAAd;AACD,K,CAED;;;;4BACQE,E,EAAIC,G,EAAKnB,O,EAASoB,Q,EAAU;AAClC,kFAAcF,EAAE,CAACG,QAAH,EAAd,EAA6BF,GAA7B,EAAkCnB,OAAlC,EAA2CoB,QAA3C;AACD,K,CAED;;;;2BACOF,E,EAAII,G,EAAKtB,O,EAASoB,Q,EAAU;AACjC,iFAAaF,EAAE,CAACG,QAAH,EAAb,EAA4BC,GAA5B,EAAiCtB,OAAjC,EAA0CoB,QAA1C;AACD,K,CAED;;;;2BACOF,E,EAAII,G,EAAKtB,O,EAASoB,Q,EAAU;AACjC,iFAAaF,EAAE,CAACG,QAAH,EAAb,EAA4BC,GAA5B,EAAiCtB,OAAjC,EAA0CoB,QAA1C;AACD,K,CAED;;;;2BACOF,E,EAAII,G,EAAKtB,O,EAASoB,Q,EAAU;AACjC,iFAAaF,EAAE,CAACG,QAAH,EAAb,EAA4BC,GAA5B,EAAiCtB,OAAjC,EAA0CoB,QAA1C;AACD;;;;EAzD0B3B,Q;;AA4D7B8B,MAAM,CAACC,OAAP,GAAiB1B,cAAjB","sourcesContent":["'use strict';\n\nconst Topology = require('../core').Topology;\nconst ServerCapabilities = require('./topology_base').ServerCapabilities;\nconst Cursor = require('../cursor');\nconst translateOptions = require('../utils').translateOptions;\n\nclass NativeTopology extends Topology {\n  constructor(servers, options) {\n    options = options || {};\n\n    let clonedOptions = Object.assign(\n      {},\n      {\n        cursorFactory: Cursor,\n        reconnect: false,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        maxPoolSize: typeof options.poolSize === 'number' ? options.poolSize : 5,\n        minPoolSize: typeof options.minSize === 'number' ? options.minSize : 0,\n        monitorCommands:\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the core types\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    super(servers, clonedOptions);\n  }\n\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\n    return this.s.sCapabilities;\n  }\n\n  // Command\n  command(ns, cmd, options, callback) {\n    super.command(ns.toString(), cmd, options, callback);\n  }\n\n  // Insert\n  insert(ns, ops, options, callback) {\n    super.insert(ns.toString(), ops, options, callback);\n  }\n\n  // Update\n  update(ns, ops, options, callback) {\n    super.update(ns.toString(), ops, options, callback);\n  }\n\n  // Remove\n  remove(ns, ops, options, callback) {\n    super.remove(ns.toString(), ops, options, callback);\n  }\n}\n\nmodule.exports = NativeTopology;\n"]},"metadata":{},"sourceType":"script"}