{"ast":null,"code":"import { AuthEventKind, AuthRebindEvent, CoreStitchAppClient, CoreStitchServiceClientImpl, StitchAppClientInfo, StitchAppRequestClient } from \"mongodb-stitch-core-sdk\";\nimport StitchServiceClientImpl from \"../../services/internal/StitchServiceClientImpl\";\nimport StitchAuthImpl from \"../auth/internal/StitchAuthImpl\";\nimport StitchBrowserAppRoutes from \"../auth/internal/StitchBrowserAppRoutes\";\n\nvar StitchAppClientImpl = function () {\n  function StitchAppClientImpl(clientAppId, config) {\n    this.info = new StitchAppClientInfo(clientAppId, config.dataDirectory, config.localAppName, config.localAppVersion);\n    this.routes = new StitchBrowserAppRoutes(this.info.clientAppId);\n    var requestClient = new StitchAppRequestClient(clientAppId, config.baseUrl, config.transport);\n    this.auth = new StitchAuthImpl(requestClient, this.routes.authRoutes, config.storage, this.info);\n    this.coreClient = new CoreStitchAppClient(this.auth, this.routes);\n    this.serviceClients = [];\n    this.auth.addSynchronousAuthListener(this);\n  }\n\n  StitchAppClientImpl.prototype.getServiceClient = function (factory, serviceName) {\n    if (isServiceClientFactory(factory)) {\n      var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, \"\");\n      this.bindServiceClient(serviceClient);\n      return factory.getClient(serviceClient, this.info);\n    } else {\n      var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, serviceName);\n      this.bindServiceClient(serviceClient);\n      return factory.getNamedClient(serviceClient, this.info);\n    }\n  };\n\n  StitchAppClientImpl.prototype.getGeneralServiceClient = function (serviceName) {\n    var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, serviceName);\n    this.bindServiceClient(serviceClient);\n    return new StitchServiceClientImpl(serviceClient);\n  };\n\n  StitchAppClientImpl.prototype.callFunction = function (name, args) {\n    return this.coreClient.callFunction(name, args);\n  };\n\n  StitchAppClientImpl.prototype.onActiveUserChanged = function (_, currentActiveUser, previousActiveUser) {\n    this.onRebindEvent(new AuthRebindEvent({\n      currentActiveUser: currentActiveUser,\n      kind: AuthEventKind.ActiveUserChanged,\n      previousActiveUser: previousActiveUser\n    }));\n  };\n\n  StitchAppClientImpl.prototype.bindServiceClient = function (coreStitchServiceClient) {\n    this.serviceClients.push(coreStitchServiceClient);\n  };\n\n  StitchAppClientImpl.prototype.onRebindEvent = function (rebindEvent) {\n    this.serviceClients.forEach(function (serviceClient) {\n      serviceClient.onRebindEvent(rebindEvent);\n    });\n  };\n\n  return StitchAppClientImpl;\n}();\n\nexport default StitchAppClientImpl;\n\nfunction isServiceClientFactory(factory) {\n  return factory.getClient !== undefined;\n}","map":{"version":3,"sources":["../../../../src/core/internal/StitchAppClientImpl.ts"],"names":[],"mappings":"AAgBA,SACE,aADF,EAEE,eAFF,EAGE,mBAHF,EAKE,2BALF,EAQE,mBARF,EASE,sBATF,QAUO,yBAVP;AAcA,OAAO,uBAAP,MAAoC,iDAApC;AAEA,OAAO,cAAP,MAA2B,iCAA3B;AACA,OAAO,sBAAP,MAAmC,yCAAnC;;AAOA,IAAA,mBAAA,GAAA,YAAA;AAUE,WAAA,mBAAA,CACE,WADF,EAEE,MAFF,EAEsC;AAEpC,SAAK,IAAL,GAAY,IAAI,mBAAJ,CACV,WADU,EAEV,MAAM,CAAC,aAFG,EAGV,MAAM,CAAC,YAHG,EAIV,MAAM,CAAC,eAJG,CAAZ;AAMA,SAAK,MAAL,GAAc,IAAI,sBAAJ,CACZ,KAAK,IAAL,CAAU,WADE,CAAd;AAGA,QAAM,aAAa,GAAG,IAAI,sBAAJ,CACpB,WADoB,EAEpB,MAAM,CAAC,OAFa,EAGpB,MAAM,CAAC,SAHa,CAAtB;AAKA,SAAK,IAAL,GAAY,IAAI,cAAJ,CACV,aADU,EAEV,KAAK,MAAL,CAAY,UAFF,EAGV,MAAM,CAAC,OAHG,EAIV,KAAK,IAJK,CAAZ;AAMA,SAAK,UAAL,GAAkB,IAAI,mBAAJ,CAAwB,KAAK,IAA7B,EAAmC,KAAK,MAAxC,CAAlB;AACA,SAAK,cAAL,GAAsB,EAAtB;AACA,SAAK,IAAL,CAAU,0BAAV,CAAqC,IAArC;AACD;;AAEM,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UACE,OADF,EAEE,WAFF,EAEsB;AAEpB,QAAI,sBAAsB,CAAC,OAAD,CAA1B,EAAqC;AACnC,UAAM,aAAa,GAAG,IAAI,2BAAJ,CACpB,KAAK,IADe,EACT,KAAK,MAAL,CAAY,aADH,EACkB,EADlB,CAAtB;AAGA,WAAK,iBAAL,CAAuB,aAAvB;AACA,aAAO,OAAO,CAAC,SAAR,CAAkB,aAAlB,EAAiC,KAAK,IAAtC,CAAP;AACD,KAND,MAMO;AACL,UAAM,aAAa,GAAG,IAAI,2BAAJ,CACpB,KAAK,IADe,EAEpB,KAAK,MAAL,CAAY,aAFQ,EAGpB,WAHoB,CAAtB;AAKA,WAAK,iBAAL,CAAuB,aAAvB;AACA,aAAO,OAAO,CAAC,cAAR,CACL,aADK,EAEL,KAAK,IAFA,CAAP;AAID;AACF,GAtBM;;AAwBA,EAAA,mBAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,WAA/B,EAAkD;AAChD,QAAM,aAAa,GAAG,IAAI,2BAAJ,CACpB,KAAK,IADe,EAEpB,KAAK,MAAL,CAAY,aAFQ,EAGpB,WAHoB,CAAtB;AAKA,SAAK,iBAAL,CAAuB,aAAvB;AACA,WAAO,IAAI,uBAAJ,CACL,aADK,CAAP;AAGD,GAVM;;AAYA,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,IAApB,EAAkC,IAAlC,EAA6C;AAC3C,WAAO,KAAK,UAAL,CAAgB,YAAhB,CAA6B,IAA7B,EAAmC,IAAnC,CAAP;AACD,GAFM;;AAQA,EAAA,mBAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UACE,CADF,EAEE,iBAFF,EAGE,kBAHF,EAG4C;AAE1C,SAAK,aAAL,CAAmB,IAAI,eAAJ,CAAoB;AACrC,MAAA,iBAAiB,EAAA,iBADoB;AAErC,MAAA,IAAI,EAAE,aAAa,CAAC,iBAFiB;AAGrC,MAAA,kBAAkB,EAAA;AAHmB,KAApB,CAAnB;AAKD,GAVM;;AAYC,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,uBAA1B,EAA0E;AACxE,SAAK,cAAL,CAAoB,IAApB,CAAyB,uBAAzB;AACD,GAFO;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,WAAtB,EAA8C;AAC5C,SAAK,cAAL,CAAoB,OAApB,CAA4B,UAAA,aAAA,EAAa;AACvC,MAAA,aAAa,CAAC,aAAd,CAA4B,WAA5B;AACD,KAFD;AAGD,GAJO;;AAKV,SAAA,mBAAA;AAAC,CAxGD,EAAA;;;;AA0GA,SAAA,sBAAA,CACE,OADF,EACiE;AAE/D,SAAQ,OAAmC,CAAC,SAApC,KAAkD,SAA1D;AACD","sourceRoot":"","sourcesContent":["import { AuthEventKind, AuthRebindEvent, CoreStitchAppClient, CoreStitchServiceClientImpl, StitchAppClientInfo, StitchAppRequestClient } from \"mongodb-stitch-core-sdk\";\nimport StitchServiceClientImpl from \"../../services/internal/StitchServiceClientImpl\";\nimport StitchAuthImpl from \"../auth/internal/StitchAuthImpl\";\nimport StitchBrowserAppRoutes from \"../auth/internal/StitchBrowserAppRoutes\";\nvar StitchAppClientImpl = (function () {\n    function StitchAppClientImpl(clientAppId, config) {\n        this.info = new StitchAppClientInfo(clientAppId, config.dataDirectory, config.localAppName, config.localAppVersion);\n        this.routes = new StitchBrowserAppRoutes(this.info.clientAppId);\n        var requestClient = new StitchAppRequestClient(clientAppId, config.baseUrl, config.transport);\n        this.auth = new StitchAuthImpl(requestClient, this.routes.authRoutes, config.storage, this.info);\n        this.coreClient = new CoreStitchAppClient(this.auth, this.routes);\n        this.serviceClients = [];\n        this.auth.addSynchronousAuthListener(this);\n    }\n    StitchAppClientImpl.prototype.getServiceClient = function (factory, serviceName) {\n        if (isServiceClientFactory(factory)) {\n            var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, \"\");\n            this.bindServiceClient(serviceClient);\n            return factory.getClient(serviceClient, this.info);\n        }\n        else {\n            var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, serviceName);\n            this.bindServiceClient(serviceClient);\n            return factory.getNamedClient(serviceClient, this.info);\n        }\n    };\n    StitchAppClientImpl.prototype.getGeneralServiceClient = function (serviceName) {\n        var serviceClient = new CoreStitchServiceClientImpl(this.auth, this.routes.serviceRoutes, serviceName);\n        this.bindServiceClient(serviceClient);\n        return new StitchServiceClientImpl(serviceClient);\n    };\n    StitchAppClientImpl.prototype.callFunction = function (name, args) {\n        return this.coreClient.callFunction(name, args);\n    };\n    StitchAppClientImpl.prototype.onActiveUserChanged = function (_, currentActiveUser, previousActiveUser) {\n        this.onRebindEvent(new AuthRebindEvent({\n            currentActiveUser: currentActiveUser,\n            kind: AuthEventKind.ActiveUserChanged,\n            previousActiveUser: previousActiveUser\n        }));\n    };\n    StitchAppClientImpl.prototype.bindServiceClient = function (coreStitchServiceClient) {\n        this.serviceClients.push(coreStitchServiceClient);\n    };\n    StitchAppClientImpl.prototype.onRebindEvent = function (rebindEvent) {\n        this.serviceClients.forEach(function (serviceClient) {\n            serviceClient.onRebindEvent(rebindEvent);\n        });\n    };\n    return StitchAppClientImpl;\n}());\nexport default StitchAppClientImpl;\nfunction isServiceClientFactory(factory) {\n    return factory.getClient !== undefined;\n}\n//# sourceMappingURL=StitchAppClientImpl.js.map"]},"metadata":{},"sourceType":"module"}