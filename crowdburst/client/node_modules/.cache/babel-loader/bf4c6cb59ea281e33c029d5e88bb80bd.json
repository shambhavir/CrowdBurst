{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\" \\n{\\n  grocery {\\n    address\\n    id\\n    name\\n    alias\\n    display_phone\\n  }\\n}\\n\\n  \\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import{useQuery,gql}from'@apollo/client';import{Badge}from'./shared/Badge';import{Link}from\"react-router-dom\";import{List,ListItem,ListItemWithLink}from\"./shared/List\";// const GROCERY = gql`\n// query GroceryQuery($id: String!) {\n//     grocery_by_pk(id: $id) {\n//       address\n//       alias\n//       id\n//       name\n//       finrevs {\n//         body\n//         grid\n//       }\n//     }\n// }\n// `; \nvar GROCERY=gql(_templateObject());var Grocery=function Grocery(_ref){var newGrocery=_ref.newGrocery;// export default function Grocery(){\nvar _useQuery=useQuery(GROCERY),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;// const { loading, error, data } = useQuery(BUSINESS);\nvar renderGrocery=function renderGrocery(grocery){return grocery.map(function(_ref2){var id=_ref2.id,name=_ref2.name,address=_ref2.address;return/*#__PURE__*/React.createElement(ListItemWithLink,{key:id},/*#__PURE__*/React.createElement(Link,{to:\"/grocery/\".concat(id)},name,\" \",/*#__PURE__*/React.createElement(Badge,null,address)));});};if(loading)return/*#__PURE__*/React.createElement(\"p\",null,\"Loading ...\");if(error)return/*#__PURE__*/React.createElement(\"p\",null,\"Error :(\");return/*#__PURE__*/React.createElement(List,null,renderGrocery(newGrocery||data.grocery));// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n// return data.businesses3.map(({alias, id, name}) => (\n//     <div key = {id}>\n//         <p>\n//             {name} | {alias}\n//         </p>\n//     </div>\n// )); \n// return(\n//     <List>\n//         {data.grocery.map(({id, name, address}) => (\n//             <ListItem key = {id}>\n//                 {name} <Badge>{address}</Badge>\n//             </ListItem>\n//         ))}\n//     </List>\n// );\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n//     return data.grocery_by_pk.map(({grid, body}) => (\n//         <div key = {grid}>\n//             <p>\n//                 {grid}\n//             </p>\n//         </div>\n//     ))}; \n// return(\n//     <List>\n//         {data.grocery.map(({id, name, address}) => (\n//             <ListItem key = {id}>\n//                 {name} <Badge>{address}</Badge>\n//             </ListItem>\n//         ))}\n//     </List>\n// );\n// const Grocery = ({\n//     match: {\n//       params: { id },\n//     },\n//   }) => {\n//     const { loading, error, data } = useQuery(GROCERY, {\n//       variables: { id },\n//     });\n//     if (loading) return <p>Loading ...</p>;\n//     if (error) return <p>Error :(</p>;\n//     const { name, address, finrevs } = data.grocery_by_pk;\n//     return (\n//       <div>\n//         <h3>\n//           {name} <Badge>{address}</Badge>\n//         </h3>\n//         <List>\n//           {finrevs.map((finrevs) => (\n//             <ListItem key={finrevs.grid}>{finrevs.body}</ListItem>\n//           ))}\n//         </List>\n//       </div>\n//     );\n//   };\n};export default Grocery;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/Components/Grocery.js"],"names":["React","useQuery","gql","Badge","Link","List","ListItem","ListItemWithLink","GROCERY","Grocery","newGrocery","loading","error","data","renderGrocery","grocery","map","id","name","address"],"mappings":"2ZAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,QAAR,CAAkBC,GAAlB,KAA4B,gBAA5B,CACA,OAAQC,KAAR,KAAoB,gBAApB,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,IAAT,CAAeC,QAAf,CAAyBC,gBAAzB,KAAiD,eAAjD,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,GAAMC,CAAAA,OAAO,CAAGN,GAAH,mBAAb,CAmBA,GAAMO,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAoB,IAAjBC,CAAAA,UAAiB,MAAjBA,UAAiB,CAClC;AADkC,cAEDT,QAAQ,CAACO,OAAD,CAFP,CAE1BG,OAF0B,WAE1BA,OAF0B,CAEjBC,KAFiB,WAEjBA,KAFiB,CAEVC,IAFU,WAEVA,IAFU,CAGlC;AAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,OAAD,CAAa,CACjC,MAAOA,CAAAA,OAAO,CAACC,GAAR,CAAY,mBAAGC,CAAAA,EAAH,OAAGA,EAAH,CAAOC,IAAP,OAAOA,IAAP,CAAaC,OAAb,OAAaA,OAAb,oBACjB,oBAAC,gBAAD,EAAkB,GAAG,CAAEF,EAAvB,eACE,oBAAC,IAAD,EAAM,EAAE,oBAAcA,EAAd,CAAR,EACGC,IADH,kBACS,oBAAC,KAAD,MAAQC,OAAR,CADT,CADF,CADiB,EAAZ,CAAP,CAOD,CARD,CAUA,GAAIR,OAAJ,CAAa,mBAAO,2CAAP,CACb,GAAIC,KAAJ,CAAW,mBAAO,wCAAP,CAEX,mBAAO,oBAAC,IAAD,MAAOE,aAAa,CAACJ,UAAU,EAAIG,IAAI,CAACE,OAApB,CAApB,CAAP,CAGF;AACA;AAEA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAII;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAtGD,CAuGE,cAAeN,CAAAA,OAAf","sourcesContent":["import React from 'react';\nimport {useQuery, gql} from '@apollo/client';\nimport {Badge} from './shared/Badge';\nimport { Link } from \"react-router-dom\";\nimport { List, ListItem, ListItemWithLink } from \"./shared/List\";\n\n// const GROCERY = gql`\n\n// query GroceryQuery($id: String!) {\n//     grocery_by_pk(id: $id) {\n//       address\n//       alias\n//       id\n//       name\n//       finrevs {\n//         body\n//         grid\n//       }\n//     }\n// }\n   \n// `; \n\nconst GROCERY = gql` \n{\n  grocery {\n    address\n    id\n    name\n    alias\n    display_phone\n  }\n}\n\n  \n`;\n\n\n\n\n\n\nconst Grocery = ({ newGrocery }) => {\n  // export default function Grocery(){\n  const { loading, error, data } = useQuery(GROCERY);\n  // const { loading, error, data } = useQuery(BUSINESS);\n\n  const renderGrocery = (grocery) => {\n    return grocery.map(({ id, name, address }) => (\n      <ListItemWithLink key={id}>\n        <Link to={`/grocery/${id}`}>\n          {name} <Badge>{address}</Badge>\n        </Link>\n      </ListItemWithLink>\n    ));\n  };\n\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return <List>{renderGrocery(newGrocery || data.grocery)}</List>;\n\n\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n    // return data.businesses3.map(({alias, id, name}) => (\n    //     <div key = {id}>\n    //         <p>\n    //             {name} | {alias}\n    //         </p>\n    //     </div>\n    // )); \n    \n  \n    // return(\n    //     <List>\n    //         {data.grocery.map(({id, name, address}) => (\n    //             <ListItem key = {id}>\n    //                 {name} <Badge>{address}</Badge>\n    //             </ListItem>\n    //         ))}\n    //     </List>\n    // );\n\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n//     return data.grocery_by_pk.map(({grid, body}) => (\n//         <div key = {grid}>\n//             <p>\n//                 {grid}\n//             </p>\n//         </div>\n//     ))}; \n\n\n\n    // return(\n    //     <List>\n    //         {data.grocery.map(({id, name, address}) => (\n    //             <ListItem key = {id}>\n    //                 {name} <Badge>{address}</Badge>\n    //             </ListItem>\n    //         ))}\n    //     </List>\n    // );\n \n\n            \n    \n// const Grocery = ({\n//     match: {\n//       params: { id },\n//     },\n//   }) => {\n//     const { loading, error, data } = useQuery(GROCERY, {\n//       variables: { id },\n//     });\n  \n//     if (loading) return <p>Loading ...</p>;\n//     if (error) return <p>Error :(</p>;\n  \n//     const { name, address, finrevs } = data.grocery_by_pk;\n  \n//     return (\n//       <div>\n//         <h3>\n//           {name} <Badge>{address}</Badge>\n//         </h3>\n//         <List>\n//           {finrevs.map((finrevs) => (\n//             <ListItem key={finrevs.grid}>{finrevs.body}</ListItem>\n//           ))}\n//         </List>\n//       </div>\n//     );\n//   };\n}\n  export default Grocery;"]},"metadata":{},"sourceType":"module"}