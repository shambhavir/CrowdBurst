{"ast":null,"code":"import _classCallCheck from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';// import axios from 'axios';\nimport{ApolloClient,HttpLink,InMemoryCache}from'@apollo/client';import List2 from'./List2';//import { render } from 'react-dom';\nvar client=new ApolloClient({cache:new InMemoryCache(),link:new HttpLink({uri:'https://crowdburst.herokuapp.com/v1/graphql'})});// const app = require('express'); \nvar Form2=/*#__PURE__*/function(_React$Component){_inherits(Form2,_React$Component);var _super=_createSuper(Form2);function Form2(props){var _this;_classCallCheck(this,Form2);_this=_super.call(this,props);_this.state={list:[]};_this.addItem=_this.addItem.bind(_assertThisInitialized(_this));return _this;}_createClass(Form2,[{key:\"addItem\",value:function addItem(e){// Prevent button click from submitting form\ne.preventDefault();// Create variables for our list, the item to add, and our form\nvar list=this.state.list;var newItem=document.getElementById(\"addInput\");var form=document.getElementById(\"addItemForm\");// If our input has a value\nif(newItem.value!=\"\"){// Add the new item to the end of our list array\nlist.push(newItem.value);// Then we use that to set the state for list\nthis.setState({list:list});// Finally, we need to reset the form\nnewItem.classList.remove(\"is-danger\");form.reset();}else{// If the input doesn't have a value, make the border red since it's required\nnewItem.classList.add(\"is-danger\");}}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"section\",{className:\"section\"},/*#__PURE__*/React.createElement(List2,{items:this.state.list,delete:this.removeItem})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"section\",{className:\"section\"},/*#__PURE__*/React.createElement(\"form\",{className:\"form\",id:\"addItemForm\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"input\",id:\"addInput\",placeholder:\"How's the crowd, parking, etc?\"}),/*#__PURE__*/React.createElement(\"button\",{className:\"button is-info\",onClick:this.addItem},\"Add Note\")))));}}]);return Form2;}(React.Component);export default Form2;// class Form2 extends React.Component {\n//   // initialize our state\n//   state = {\n//     data: [],\n//     id: 0,\n//     message: null,\n//     intervalIsSet: false,\n//     idToDelete: null,\n//     idToUpdate: null,\n//     objectToUpdate: null,\n//   };\n// //   const App3 = () => {\n// //   // export default App3(\n// //   //   {\n// //   //     state = {\n// //   //       data: [],\n// //   //       id: 0,\n// //   //       message: null,\n// //   //       intervalIsSet: false,\n// //   //       idToDelete: null,\n// //   //       idToUpdate: null,\n// //   //       objectToUpdate: null,\n// //   //     }\n// //   //   }\n// //   // ); \n// //   // const App3  =  \n// //   //   `\n// //   //   state = {\n// //   //     data: [],\n// //   //     id: 0,\n// //   //     message: null,\n// //   //     intervalIsSet: false,\n// //   //     idToDelete: null,\n// //   //     idToUpdate: null,\n// //   //     objectToUpdate: null,\n// //   //     `; \n// //   // when component mounts, first thing it does is fetch all existing data in our db\n// //   // then we incorporate a polling logic so that we can easily see if our db has\n// //   // changed and implement those changes into our UI\n//   componentDidMount() {\n//     this.getDataFromDb();\n//     if (!this.state.intervalIsSet) {\n//       let interval = setInterval(this.getDataFromDb, 1000);\n//       this.setState({ intervalIsSet: interval });\n//     }\n//   }\n// //   // never let a process live forever\n// //   // always kill a process everytime we are done using it\n//   componentWillUnmount() {\n//     if (this.state.intervalIsSet) {\n//       clearInterval(this.state.intervalIsSet);\n//       this.setState({ intervalIsSet: null });\n//     }\n//   }\n// //   // just a note, here, in the front end, we use the id key of our data object\n// //   // in order to identify which we want to Update or delete.\n// //   // for our back end, we use the object id assigned by MongoDB to modify\n// //   // data base entries\n// //   // our first get method that uses our backend api to\n// //   // fetch data from our data base\n//   getDataFromDb = () => {\n//     fetch('http://localhost:3001/api/getData')\n//       .then((data) => data.json())\n//       .then((res) => this.setState({ data: res.data }));\n//   };\n// //   // // // our put method that uses our backend api\n// //   // // // to create new query into our data base\n//   putDataToDB = (message) => {\n//     let currentIds = this.state.data.map((data) => data.id);\n//     let idToBeAdded = 0;\n//     while (currentIds.includes(idToBeAdded)) {\n//       ++idToBeAdded;\n//     }\n//     axios.post('http://localhost:3001/api/putData', {\n//       id: idToBeAdded,\n//       message: message,\n//     });\n//   };\n// //   // our delete method that uses our backend api\n// //   // to remove existing database information\n//   deleteFromDB = (idTodelete) => {\n//     parseInt(idTodelete);\n//     let objIdToDelete = null;\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idTodelete) {\n//         objIdToDelete = dat._id;\n//       }\n//     });\n//     axios.delete('http://localhost:3001/api/deleteData', {\n//       data: {\n//         id: objIdToDelete,\n//       },\n//     });\n//   };\n// //   // our update method that uses our backend api\n// //   // to overwrite existing data base information\n//   updateDB = (idToUpdate, updateToApply) => {\n//     let objIdToUpdate = null;\n//     parseInt(idToUpdate);\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idToUpdate) {\n//         objIdToUpdate = dat._id;\n//       }\n//     });\n//     axios.post('http://localhost:3001/api/updateData', {\n//       id: objIdToUpdate,\n//       update: { message: updateToApply },\n//     });\n//   };\n// //   // here is our UI\n// //   // it is easy to understand their functions when you\n// //   // see them render into our screen\n//   render() {\n//     const { data } = this.state;\n//     return (\n//       <div>\n//         <ul>\n//           {data.length <= 0\n//             ? 'NO DB ENTRIES YET'\n//             : data.map((dat) => (\n//                 <li style={{ padding: '10px' }} key={data.message}>\n//                   <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n//                   <span style={{ color: 'gray' }}> data: </span>\n//                   {dat.message}\n//                 </li>\n//               ))}\n//         </ul>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             onChange={(e) => this.setState({ message: e.target.value })}\n//             placeholder=\"add something in the database\"\n//             style={{ width: '200px' }}\n//           />\n//           <button onClick={() => this.putDataToDB(this.state.message)}>\n//             ADD\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToDelete: e.target.value })}\n//             placeholder=\"put id of item to delete here\"\n//           />\n//           <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n//             DELETE\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n//             placeholder=\"id of item to update here\"\n//           />\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ updateToApply: e.target.value })}\n//             placeholder=\"put new value of the item here\"\n//           />\n//           <button\n//             onClick={() =>\n//               this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n//             }\n//           >\n//             UPDATE\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// export default Form2","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/Components/Form2.js"],"names":["React","Component","ApolloClient","HttpLink","InMemoryCache","List2","client","cache","link","uri","Form2","props","state","list","addItem","bind","e","preventDefault","newItem","document","getElementById","form","value","push","setState","classList","remove","reset","add","removeItem"],"mappings":"8zBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA;AAEA,OAASC,YAAT,CAAuBC,QAAvB,CAAiCC,aAAjC,KAAsD,gBAAtD,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CAEA;AAGA,GAAMC,CAAAA,MAAM,CAAG,GAAIJ,CAAAA,YAAJ,CACX,CACEK,KAAK,CAAE,GAAIH,CAAAA,aAAJ,EADT,CAEEI,IAAI,CAAE,GAAIL,CAAAA,QAAJ,CAAa,CACjBM,GAAG,CAAE,6CADY,CAAb,CAFR,CADW,CAAf,CASA;GAEMC,CAAAA,K,0GAGN,eAAYC,KAAZ,CACA,uCACI,uBAAMA,KAAN,EACA,MAAKC,KAAL,CACA,CACIC,IAAI,CACJ,EAFJ,CADA,CASA,MAAKC,OAAL,CAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf,CAXJ,aAaC,C,0DAEOC,C,CAAG,CACT;AACAA,CAAC,CAACC,cAAF,GAEA;AACA,GAAIJ,CAAAA,IAAI,CAAG,KAAKD,KAAL,CAAWC,IAAtB,CACA,GAAMK,CAAAA,OAAO,CAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB,CACA,GAAMC,CAAAA,IAAI,CAAGF,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAb,CAMA;AACA,GAAIF,OAAO,CAACI,KAAR,EAAiB,EAArB,CAAyB,CACvB;AACAT,IAAI,CAACU,IAAL,CAAUL,OAAO,CAACI,KAAlB,EACA;AACA,KAAKE,QAAL,CAAc,CACZX,IAAI,CAAEA,IADM,CAAd,EAGA;AACAK,OAAO,CAACO,SAAR,CAAkBC,MAAlB,CAAyB,WAAzB,EACAL,IAAI,CAACM,KAAL,GACD,CAVD,IAUO,CACL;AACAT,OAAO,CAACO,SAAR,CAAkBG,GAAlB,CAAsB,WAAtB,EACD,CACF,C,uCAOQ,CACL,mBACE,2BAAK,SAAS,CAAC,SAAf,eACE,2BAAK,SAAS,CAAC,WAAf,eACE,+BAAS,SAAS,CAAC,SAAnB,eACA,oBAAC,KAAD,EAAO,KAAK,CAAE,KAAKhB,KAAL,CAAWC,IAAzB,CAA+B,MAAM,CAAE,KAAKgB,UAA5C,EADA,CADF,cAIE,8BAJF,cAKJ,+BAAS,SAAS,CAAC,SAAnB,eACE,4BAAM,SAAS,CAAC,MAAhB,CAAuB,EAAE,CAAC,aAA1B,eACE,6BAAO,IAAI,CAAC,MAAZ,CAAmB,SAAS,CAAC,OAA7B,CAAqC,EAAE,CAAC,UAAxC,CAAmD,WAAW,CAAC,gCAA/D,EADF,cAEE,8BAAQ,SAAS,CAAC,gBAAlB,CAAmC,OAAO,CAAE,KAAKf,OAAjD,aAFF,CADF,CALI,CADF,CADF,CAwBD,C,mBA/EiBd,KAAK,CAACC,S,EAmF1B,cAAeS,CAAAA,KAAfsourcesContent":["import React, {Component} from 'react';\n// import axios from 'axios';\n\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'; \nimport List2 from './List2'; \n\n//import { render } from 'react-dom';\n\n\nconst client = new ApolloClient(\n    {\n      cache: new InMemoryCache(),\n      link: new HttpLink({\n        uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n      })\n    }\n  ); \n\n// const app = require('express'); \n\nclass Form2 extends React.Component {\n    \n\nconstructor(props)\n{\n    super(props)\n    this.state = \n    {\n        list: \n        [\n        ]\n    }\n\n    \n\n    this.addItem = this.addItem.bind(this)\n\n}\n\naddItem(e) {\n  // Prevent button click from submitting form\n  e.preventDefault();\n\n  // Create variables for our list, the item to add, and our form\n  let list = this.state.list;\n  const newItem = document.getElementById(\"addInput\");\n  const form = document.getElementById(\"addItemForm\");\n  \n\n\n\n\n  // If our input has a value\n  if (newItem.value != \"\") {\n    // Add the new item to the end of our list array\n    list.push(newItem.value);\n    // Then we use that to set the state for list\n    this.setState({\n      list: list\n    });\n    // Finally, we need to reset the form\n    newItem.classList.remove(\"is-danger\");\n    form.reset();\n  } else {\n    // If the input doesn't have a value, make the border red since it's required\n    newItem.classList.add(\"is-danger\");\n  }\n}\n\n\n\n\n\n\nrender() {\n    return (\n      <div className=\"content\">\n        <div className=\"container\">\n          <section className=\"section\">\n          <List2 items={this.state.list} delete={this.removeItem} />\n          </section>\n          <hr />\n    <section className=\"section\">\n      <form className=\"form\" id=\"addItemForm\">\n        <input type=\"text\" className=\"input\" id=\"addInput\" placeholder=\"How's the crowd, parking, etc?\" />\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Note\n        </button>\n      </form>\n      {/* <form className = \"form\" id = \"addItemForm\">\n        <input type = \"text\" className = \"input\" id=\"addInput\" placeholder=\"Address\"/>\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Address\n        </button>\n      </form> */}\n    </section>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Form2\n\n// class Form2 extends React.Component {\n//   // initialize our state\n//   state = {\n//     data: [],\n//     id: 0,\n//     message: null,\n//     intervalIsSet: false,\n//     idToDelete: null,\n//     idToUpdate: null,\n//     objectToUpdate: null,\n//   };\n\n// //   const App3 = () => {\n\n// //   // export default App3(\n// //   //   {\n// //   //     state = {\n// //   //       data: [],\n// //   //       id: 0,\n// //   //       message: null,\n// //   //       intervalIsSet: false,\n// //   //       idToDelete: null,\n// //   //       idToUpdate: null,\n// //   //       objectToUpdate: null,\n// //   //     }\n// //   //   }\n// //   // ); \n\n// //   // const App3  =  \n// //   //   `\n// //   //   state = {\n// //   //     data: [],\n// //   //     id: 0,\n// //   //     message: null,\n// //   //     intervalIsSet: false,\n// //   //     idToDelete: null,\n// //   //     idToUpdate: null,\n// //   //     objectToUpdate: null,\n// //   //     `; \n  \n\n// //   // when component mounts, first thing it does is fetch all existing data in our db\n// //   // then we incorporate a polling logic so that we can easily see if our db has\n// //   // changed and implement those changes into our UI\n//   componentDidMount() {\n//     this.getDataFromDb();\n//     if (!this.state.intervalIsSet) {\n//       let interval = setInterval(this.getDataFromDb, 1000);\n//       this.setState({ intervalIsSet: interval });\n//     }\n//   }\n\n// //   // never let a process live forever\n// //   // always kill a process everytime we are done using it\n//   componentWillUnmount() {\n//     if (this.state.intervalIsSet) {\n//       clearInterval(this.state.intervalIsSet);\n//       this.setState({ intervalIsSet: null });\n//     }\n//   }\n\n// //   // just a note, here, in the front end, we use the id key of our data object\n// //   // in order to identify which we want to Update or delete.\n// //   // for our back end, we use the object id assigned by MongoDB to modify\n// //   // data base entries\n\n// //   // our first get method that uses our backend api to\n// //   // fetch data from our data base\n//   getDataFromDb = () => {\n//     fetch('http://localhost:3001/api/getData')\n//       .then((data) => data.json())\n//       .then((res) => this.setState({ data: res.data }));\n//   };\n\n// //   // // // our put method that uses our backend api\n// //   // // // to create new query into our data base\n//   putDataToDB = (message) => {\n//     let currentIds = this.state.data.map((data) => data.id);\n//     let idToBeAdded = 0;\n//     while (currentIds.includes(idToBeAdded)) {\n//       ++idToBeAdded;\n//     }\n\n//     axios.post('http://localhost:3001/api/putData', {\n//       id: idToBeAdded,\n//       message: message,\n//     });\n//   };\n\n// //   // our delete method that uses our backend api\n// //   // to remove existing database information\n//   deleteFromDB = (idTodelete) => {\n//     parseInt(idTodelete);\n//     let objIdToDelete = null;\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idTodelete) {\n//         objIdToDelete = dat._id;\n//       }\n//     });\n\n//     axios.delete('http://localhost:3001/api/deleteData', {\n//       data: {\n//         id: objIdToDelete,\n//       },\n//     });\n//   };\n\n// //   // our update method that uses our backend api\n// //   // to overwrite existing data base information\n//   updateDB = (idToUpdate, updateToApply) => {\n//     let objIdToUpdate = null;\n//     parseInt(idToUpdate);\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idToUpdate) {\n//         objIdToUpdate = dat._id;\n//       }\n//     });\n\n//     axios.post('http://localhost:3001/api/updateData', {\n//       id: objIdToUpdate,\n//       update: { message: updateToApply },\n//     });\n//   };\n\n// //   // here is our UI\n// //   // it is easy to understand their functions when you\n// //   // see them render into our screen\n//   render() {\n//     const { data } = this.state;\n//     return (\n//       <div>\n//         <ul>\n//           {data.length <= 0\n//             ? 'NO DB ENTRIES YET'\n//             : data.map((dat) => (\n//                 <li style={{ padding: '10px' }} key={data.message}>\n//                   <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n//                   <span style={{ color: 'gray' }}> data: </span>\n//                   {dat.message}\n//                 </li>\n//               ))}\n//         </ul>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             onChange={(e) => this.setState({ message: e.target.value })}\n//             placeholder=\"add something in the database\"\n//             style={{ width: '200px' }}\n//           />\n//           <button onClick={() => this.putDataToDB(this.state.message)}>\n//             ADD\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToDelete: e.target.value })}\n//             placeholder=\"put id of item to delete here\"\n//           />\n//           <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n//             DELETE\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n//             placeholder=\"id of item to update here\"\n//           />\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ updateToApply: e.target.value })}\n//             placeholder=\"put new value of the item here\"\n//           />\n//           <button\n//             onClick={() =>\n//               this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n//             }\n//           >\n//             UPDATE\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Form2"]},"metadata":{},"sourceType":"module"}