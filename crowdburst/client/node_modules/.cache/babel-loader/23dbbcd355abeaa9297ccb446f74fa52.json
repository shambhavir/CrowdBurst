{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Groceries.js\";\nimport React, { useState } from 'react';\nimport { useMutation, gql, useSubscription, useLazyQuery } from '@apollo/client';\nimport { useQuery } from '@apollo/client'; // import {useSubscription} from '@apollo/client'; \n\nimport { List, ListItem } from './shared/List';\nimport Search2 from './Search2';\nimport Form2 from './Form2';\nimport axios from 'axios';\nconst IHATECODE = gql`\n\nquery MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n   `;\nconst data = new Array(); // const GRO = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// }\n// `\n\nconst componentDidMount = () => {\n  this.getDataFromDb();\n\n  if (!this.state.intervalIsSet) {\n    let interval = setInterval(this.getDataFromDb, 1000);\n    this.setState({\n      intervalIsSet: interval\n    });\n  }\n};\n\nconst componentWillUnmount = () => {\n  if (this.state.intervalIsSet) {\n    clearInterval(this.state.intervalIsSet);\n    this.setState({\n      intervalIsSet: null\n    });\n  }\n};\n\nconst getDataFromDb = () => {\n  fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n    data: res.data\n  }));\n};\n\nconst putDataToDB = message => {\n  let currentIds = this.state.data.map(data => data.id);\n  let idToBeAdded = 0;\n\n  while (currentIds.includes(idToBeAdded)) {\n    ++idToBeAdded;\n  }\n\n  axios.post('http://localhost:3001/api/putData', {\n    id: idToBeAdded,\n    message: message\n  });\n};\n\nconst deleteFromDB = idTodelete => {\n  parseInt(idTodelete);\n  let objIdToDelete = null;\n  this.state.data.forEach(dat => {\n    if (dat.id == idTodelete) {\n      objIdToDelete = dat._id;\n    }\n  });\n  axios.delete('http://localhost:3001/api/deleteData', {\n    data: {\n      id: objIdToDelete\n    }\n  });\n};\n\nconst updateDB = (idToUpdate, updateToApply) => {\n  let objIdToUpdate = null;\n  parseInt(idToUpdate);\n  this.state.data.forEach(dat => {\n    if (dat.id == idToUpdate) {\n      objIdToUpdate = dat._id;\n    }\n  });\n  axios.post('http://localhost:3001/api/updateData', {\n    id: objIdToUpdate,\n    update: {\n      message: updateToApply\n    }\n  });\n};\n\nconst Groceries = ({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(IHATECODE, {\n    variables: {\n      id\n    }\n  }); // const {loading, error, data} = useSubscription(GRO, {variables: {id}}); \n  // const {loading, error, data} = useSubscription(GRO); \n\n  const [inputVal, setInputVal] = useState(\"\");\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, \"Loading ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 23\n    }\n  }, \"Error :(\");\n  const {\n    name,\n    address,\n    finrevs\n  } = data.grocery_by_pk;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, name, \" \", address), /*#__PURE__*/React.createElement(\"addReview\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Search2, {\n    inputVal: inputVal,\n    onChange: e => setInputVal(e.target.value),\n    onSubmit: () => {},\n    buttonText: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, finrevs.map(finrevs => /*#__PURE__*/React.createElement(ListItem, {\n    key: finrevs.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  }, finrevs.body))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n    style: {\n      padding: '10px'\n    },\n    key: data.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'gray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 73\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'gray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 19\n    }\n  }, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => this.setState({\n      message: e.target.value\n    }),\n    placeholder: \"add something in the database\",\n    style: {\n      width: '200px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => this.putDataToDB(this.state.message),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => this.setState({\n      idToDelete: e.target.value\n    }),\n    placeholder: \"put id of item to delete here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => this.deleteFromDB(this.state.idToDelete),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => this.setState({\n      idToUpdate: e.target.value\n    }),\n    placeholder: \"id of item to update here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => this.setState({\n      updateToApply: e.target.value\n    }),\n    placeholder: \"put new value of the item here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }, \"UPDATE\"))));\n};\n\nexport default Groceries;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Groceries.js"],"names":["React","useState","useMutation","gql","useSubscription","useLazyQuery","useQuery","List","ListItem","Search2","Form2","axios","IHATECODE","data","Array","componentDidMount","getDataFromDb","state","intervalIsSet","interval","setInterval","setState","componentWillUnmount","clearInterval","fetch","then","json","res","putDataToDB","message","currentIds","map","id","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","idToUpdate","updateToApply","objIdToUpdate","update","Groceries","match","params","loading","error","variables","inputVal","setInputVal","name","address","finrevs","grocery_by_pk","e","target","value","body","length","padding","color","width","idToDelete"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {useMutation, gql, useSubscription, useLazyQuery} from '@apollo/client';\nimport {useQuery} from '@apollo/client'; \n// import {useSubscription} from '@apollo/client'; \nimport {List, ListItem} from './shared/List';\nimport Search2 from './Search2'; \nimport Form2 from './Form2';\nimport axios from 'axios';\n\n\n\n\n\nconst IHATECODE = gql \n`\n\nquery MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n   `;\n\n   const data =  new Array()\n\n// const GRO = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// }\n// `\n\nconst componentDidMount = () => {\n  this.getDataFromDb();\n  if (!this.state.intervalIsSet) {\n    let interval = setInterval(this.getDataFromDb, 1000);\n    this.setState({ intervalIsSet: interval });\n  }\n}\nconst    componentWillUnmount = () => {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({ intervalIsSet: null });\n      }\n}\nconst  getDataFromDb = () => {\n          fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n        };\nconst putDataToDB = (message) => {\n  let currentIds = this.state.data.map((data) => data.id);\n  let idToBeAdded = 0;\n  while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\naxios.post('http://localhost:3001/api/putData', {\n    id: idToBeAdded,\n    message: message,\n   });\n  };\n\n const deleteFromDB = (idTodelete) => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach((dat) => {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n            data: {\n              id: objIdToDelete,\n            },\n          });\n        };\nconst updateDB = (idToUpdate, updateToApply) => {\n            let objIdToUpdate = null;\n            parseInt(idToUpdate);\n            this.state.data.forEach((dat) => {\n              if (dat.id == idToUpdate) {\n                objIdToUpdate = dat._id;\n              }\n            });\n\n axios.post('http://localhost:3001/api/updateData', {\n         id: objIdToUpdate,\n         update: { message: updateToApply },\n     });\n    };\n\n\n\n\n\n\n\nconst Groceries = ({\n    match: {\n      params: { id },\n    },\n  }) => {\n    const {loading, error, data} = useQuery(IHATECODE, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO); \n\n\n\n    const [inputVal, setInputVal] = useState(\"\"); \n    if (loading) return <p>Loading ...</p>;\n    if (error) return <p>Error :(</p>;\n\n\n    const { name, address, finrevs } = data.grocery_by_pk;\n\n    return (\n        <div>\n          <h3>\n            {name} {address}\n          </h3>\n          {/* <Form2></Form2> */}\n          <addReview></addReview>\n\n          <Search2\n            inputVal = {inputVal}\n            onChange = {(e) => setInputVal(e.target.value)}\n            onSubmit = {() => {}}\n            buttonText = \"Submit\"\n            />\n          <List>\n            {finrevs.map((finrevs) => (\n              <ListItem key={finrevs.id}>{finrevs.body}</ListItem>\n            ))}\n          </List>\n\n\n          <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n        </div>\n      );\n    };\n\nexport default Groceries;"]},"metadata":{},"sourceType":"module"}