{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Form2.js\";\nimport React, { Component } from 'react'; // import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'; \n// import List2 from './List2'; \n// //import { render } from 'react-dom';\n// const client = new ApolloClient(\n//     {\n//       cache: new InMemoryCache(),\n//       link: new HttpLink({\n//         uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n//       })\n//     }\n//   ); \n// // const app = require('express'); \n// class Form2 extends React.Component {\n// constructor(props)\n// {\n//     super(props)\n//     this.state = \n//     {\n//         list: \n//         [\n//         ]\n//     }\n//     this.addItem = this.addItem.bind(this)\n// }\n// addItem(e) {\n//   // Prevent button click from submitting form\n//   e.preventDefault();\n//   // Create variables for our list, the item to add, and our form\n//   let list = this.state.list;\n//   const newItem = document.getElementById(\"addInput\");\n//   const form = document.getElementById(\"addItemForm\");\n//   // If our input has a value\n//   if (newItem.value != \"\") {\n//     // Add the new item to the end of our list array\n//     list.push(newItem.value);\n//     // Then we use that to set the state for list\n//     this.setState({\n//       list: list\n//     });\n//     // Finally, we need to reset the form\n//     newItem.classList.remove(\"is-danger\");\n//     form.reset();\n//   } else {\n//     // If the input doesn't have a value, make the border red since it's required\n//     newItem.classList.add(\"is-danger\");\n//   }\n// }\n// render() {\n//     return (\n//       <div className=\"content\">\n//         <div className=\"container\">\n//           <section className=\"section\">\n//           <List2 items={this.state.list} delete={this.removeItem} />\n//           </section>\n//           <hr />\n//     <section className=\"section\">\n//       <form className=\"form\" id=\"addItemForm\">\n//         <input type=\"text\" className=\"input\" id=\"addInput\" placeholder=\"Grocery Store\" />\n//         <button className=\"button is-info\" onClick={this.addItem}>\n//           Add Item\n//         </button>\n//       </form>\n//       <form className = \"form\" id = \"addItemForm\">\n//         <input type = \"text\" className = \"input\" id=\"addInput\" placeholder=\"Address\"/>\n//         <button className=\"button is-info\" onClick={this.addItem}>\n//           Add Address\n//         </button>\n//       </form>\n//     </section>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n// export default Form2\n\nclass Form2 extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  //   const App3 = () => {\n  //   // export default App3(\n  //   //   {\n  //   //     state = {\n  //   //       data: [],\n  //   //       id: 0,\n  //   //       message: null,\n  //   //       intervalIsSet: false,\n  //   //       idToDelete: null,\n  //   //       idToUpdate: null,\n  //   //       objectToUpdate: null,\n  //   //     }\n  //   //   }\n  //   // ); \n  //   // const App3  =  \n  //   //   `\n  //   //   state = {\n  //   //     data: [],\n  //   //     id: 0,\n  //   //     message: null,\n  //   //     intervalIsSet: false,\n  //   //     idToDelete: null,\n  //   //     idToUpdate: null,\n  //   //     objectToUpdate: null,\n  //   //     `; \n  //   // when component mounts, first thing it does is fetch all existing data in our db\n  //   // then we incorporate a polling logic so that we can easily see if our db has\n  //   // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } //   // never let a process live forever\n  //   // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } //   // just a note, here, in the front end, we use the id key of our data object\n  //   // in order to identify which we want to Update or delete.\n  //   // for our back end, we use the object id assigned by MongoDB to modify\n  //   // data base entries\n  //   // our first get method that uses our backend api to\n  //   // fetch data from our data base\n\n\n  //   // here is our UI\n  //   // it is easy to understand their functions when you\n  //   // see them render into our screen\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 19\n      }\n    }, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: '200px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.message),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }\n    }, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToDelete: e.target.value\n      }),\n      placeholder: \"put id of item to delete here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.deleteFromDB(this.state.idToDelete),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }\n    }, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default Form2;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Form2.js"],"names":["React","Component","Form2","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'; \n// import List2 from './List2'; \n\n// //import { render } from 'react-dom';\n\n\n// const client = new ApolloClient(\n//     {\n//       cache: new InMemoryCache(),\n//       link: new HttpLink({\n//         uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n//       })\n//     }\n//   ); \n\n// // const app = require('express'); \n\n// class Form2 extends React.Component {\n    \n\n// constructor(props)\n// {\n//     super(props)\n//     this.state = \n//     {\n//         list: \n//         [\n//         ]\n//     }\n\n    \n\n//     this.addItem = this.addItem.bind(this)\n\n// }\n\n// addItem(e) {\n//   // Prevent button click from submitting form\n//   e.preventDefault();\n\n//   // Create variables for our list, the item to add, and our form\n//   let list = this.state.list;\n//   const newItem = document.getElementById(\"addInput\");\n//   const form = document.getElementById(\"addItemForm\");\n  \n\n\n\n\n//   // If our input has a value\n//   if (newItem.value != \"\") {\n//     // Add the new item to the end of our list array\n//     list.push(newItem.value);\n//     // Then we use that to set the state for list\n//     this.setState({\n//       list: list\n//     });\n//     // Finally, we need to reset the form\n//     newItem.classList.remove(\"is-danger\");\n//     form.reset();\n//   } else {\n//     // If the input doesn't have a value, make the border red since it's required\n//     newItem.classList.add(\"is-danger\");\n//   }\n// }\n\n\n\n\n\n\n// render() {\n//     return (\n//       <div className=\"content\">\n//         <div className=\"container\">\n//           <section className=\"section\">\n//           <List2 items={this.state.list} delete={this.removeItem} />\n//           </section>\n//           <hr />\n//     <section className=\"section\">\n//       <form className=\"form\" id=\"addItemForm\">\n//         <input type=\"text\" className=\"input\" id=\"addInput\" placeholder=\"Grocery Store\" />\n//         <button className=\"button is-info\" onClick={this.addItem}>\n//           Add Item\n//         </button>\n//       </form>\n//       <form className = \"form\" id = \"addItemForm\">\n//         <input type = \"text\" className = \"input\" id=\"addInput\" placeholder=\"Address\"/>\n//         <button className=\"button is-info\" onClick={this.addItem}>\n//           Add Address\n//         </button>\n//       </form>\n//     </section>\n//         </div>\n//       </div>\n//     )\n//   }\n\n// }\n\n// export default Form2\n\nclass Form2 extends React.Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n//   const App3 = () => {\n\n//   // export default App3(\n//   //   {\n//   //     state = {\n//   //       data: [],\n//   //       id: 0,\n//   //       message: null,\n//   //       intervalIsSet: false,\n//   //       idToDelete: null,\n//   //       idToUpdate: null,\n//   //       objectToUpdate: null,\n//   //     }\n//   //   }\n//   // ); \n\n//   // const App3  =  \n//   //   `\n//   //   state = {\n//   //     data: [],\n//   //     id: 0,\n//   //     message: null,\n//   //     intervalIsSet: false,\n//   //     idToDelete: null,\n//   //     idToUpdate: null,\n//   //     objectToUpdate: null,\n//   //     `; \n  \n\n//   // when component mounts, first thing it does is fetch all existing data in our db\n//   // then we incorporate a polling logic so that we can easily see if our db has\n//   // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n//   // never let a process live forever\n//   // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n//   // just a note, here, in the front end, we use the id key of our data object\n//   // in order to identify which we want to Update or delete.\n//   // for our back end, we use the object id assigned by MongoDB to modify\n//   // data base entries\n\n//   // our first get method that uses our backend api to\n//   // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n//   // // // our put method that uses our backend api\n//   // // // to create new query into our data base\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n//   // our delete method that uses our backend api\n//   // to remove existing database information\n  deleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n//   // our update method that uses our backend api\n//   // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n//   // here is our UI\n//   // it is easy to understand their functions when you\n//   // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form2"]},"metadata":{},"sourceType":"module"}