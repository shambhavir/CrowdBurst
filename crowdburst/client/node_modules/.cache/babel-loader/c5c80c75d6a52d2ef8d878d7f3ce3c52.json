{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar MongoError = require('./error').MongoError;\n\nvar ReadPreference = require('./topologies/read_preference');\n\nvar ReadConcern = require('../read_concern');\n\nvar WriteConcern = require('../write_concern');\n\nvar TxnState;\nvar stateMachine;\n\n(function () {\n  var _stateMachine;\n\n  var NO_TRANSACTION = 'NO_TRANSACTION';\n  var STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  var TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  var TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  var TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  var TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n  TxnState = {\n    NO_TRANSACTION: NO_TRANSACTION,\n    STARTING_TRANSACTION: STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS: TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED: TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY: TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED: TRANSACTION_ABORTED\n  };\n  stateMachine = (_stateMachine = {}, _defineProperty(_stateMachine, NO_TRANSACTION, [NO_TRANSACTION, STARTING_TRANSACTION]), _defineProperty(_stateMachine, STARTING_TRANSACTION, [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, TRANSACTION_ABORTED]), _defineProperty(_stateMachine, TRANSACTION_IN_PROGRESS, [TRANSACTION_IN_PROGRESS, TRANSACTION_COMMITTED, TRANSACTION_ABORTED]), _defineProperty(_stateMachine, TRANSACTION_COMMITTED, [TRANSACTION_COMMITTED, TRANSACTION_COMMITTED_EMPTY, STARTING_TRANSACTION, NO_TRANSACTION]), _defineProperty(_stateMachine, TRANSACTION_ABORTED, [STARTING_TRANSACTION, NO_TRANSACTION]), _defineProperty(_stateMachine, TRANSACTION_COMMITTED_EMPTY, [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]), _stateMachine);\n})();\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  function Transaction(options) {\n    _classCallCheck(this, Transaction);\n\n    options = options || {};\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n    var writeConcern = WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      if (writeConcern.w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    } // TODO: This isn't technically necessary\n\n\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  _createClass(Transaction, [{\n    key: \"transition\",\n\n    /**\n     * Transition the transaction in the state machine\n     * @ignore\n     * @param {TxnState} state The new state to transition to\n     */\n    value: function transition(nextState) {\n      var nextStates = stateMachine[this.state];\n\n      if (nextStates && nextStates.indexOf(nextState) !== -1) {\n        this.state = nextState;\n\n        if (this.state === TxnState.NO_TRANSACTION || this.state === TxnState.STARTING_TRANSACTION) {\n          this.unpinServer();\n        }\n\n        return;\n      }\n\n      throw new MongoError(\"Attempted illegal state transition from [\".concat(this.state, \"] to [\").concat(nextState, \"]\"));\n    }\n  }, {\n    key: \"pinServer\",\n    value: function pinServer(server) {\n      if (this.isActive) {\n        this._pinnedServer = server;\n      }\n    }\n  }, {\n    key: \"unpinServer\",\n    value: function unpinServer() {\n      this._pinnedServer = undefined;\n    }\n  }, {\n    key: \"server\",\n    get: function get() {\n      return this._pinnedServer;\n    }\n  }, {\n    key: \"recoveryToken\",\n    get: function get() {\n      return this._recoveryToken;\n    }\n  }, {\n    key: \"isPinned\",\n    get: function get() {\n      return !!this.server;\n    }\n    /**\n     * @ignore\n     * @return Whether this session is presently in a transaction\n     */\n\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nmodule.exports = {\n  TxnState: TxnState,\n  Transaction: Transaction,\n  isTransactionCommand: isTransactionCommand\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/transactions.js"],"names":["MongoError","require","ReadPreference","ReadConcern","WriteConcern","TxnState","stateMachine","NO_TRANSACTION","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","TRANSACTION_COMMITTED","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","Transaction","options","state","writeConcern","fromOptions","w","readConcern","readPreference","maxCommitTimeMS","maxTimeMS","_pinnedServer","undefined","_recoveryToken","nextState","nextStates","indexOf","unpinServer","server","isActive","isTransactionCommand","command","commitTransaction","abortTransaction","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst MongoError = require('./error').MongoError;\nconst ReadPreference = require('./topologies/read_preference');\nconst ReadConcern = require('../read_concern');\nconst WriteConcern = require('../write_concern');\n\nlet TxnState;\nlet stateMachine;\n\n(() => {\n  const NO_TRANSACTION = 'NO_TRANSACTION';\n  const STARTING_TRANSACTION = 'STARTING_TRANSACTION';\n  const TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';\n  const TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';\n  const TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';\n  const TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';\n\n  TxnState = {\n    NO_TRANSACTION,\n    STARTING_TRANSACTION,\n    TRANSACTION_IN_PROGRESS,\n    TRANSACTION_COMMITTED,\n    TRANSACTION_COMMITTED_EMPTY,\n    TRANSACTION_ABORTED\n  };\n\n  stateMachine = {\n    [NO_TRANSACTION]: [NO_TRANSACTION, STARTING_TRANSACTION],\n    [STARTING_TRANSACTION]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_IN_PROGRESS]: [\n      TRANSACTION_IN_PROGRESS,\n      TRANSACTION_COMMITTED,\n      TRANSACTION_ABORTED\n    ],\n    [TRANSACTION_COMMITTED]: [\n      TRANSACTION_COMMITTED,\n      TRANSACTION_COMMITTED_EMPTY,\n      STARTING_TRANSACTION,\n      NO_TRANSACTION\n    ],\n    [TRANSACTION_ABORTED]: [STARTING_TRANSACTION, NO_TRANSACTION],\n    [TRANSACTION_COMMITTED_EMPTY]: [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]\n  };\n})();\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @typedef {Object} ReadConcern\n * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level\n * @see https://docs.mongodb.com/manual/reference/read-concern/\n */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @typedef {Object} WriteConcern\n * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has\n * propagated to a specified number of mongod hosts\n * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has\n * been written to the journal\n * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern\n * @see https://docs.mongodb.com/manual/reference/write-concern/\n */\n\n/**\n * Configuration options for a transaction.\n * @typedef {Object} TransactionOptions\n * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction\n * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction\n * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction\n */\n\n/**\n * A class maintaining state related to a server transaction. Internal Only\n * @ignore\n */\nclass Transaction {\n  /**\n   * Create a transaction\n   *\n   * @ignore\n   * @param {TransactionOptions} [options] Optional settings\n   */\n  constructor(options) {\n    options = options || {};\n\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w <= 0) {\n        throw new MongoError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n\n  /**\n   * @ignore\n   * @return Whether this session is presently in a transaction\n   */\n  get isActive() {\n    return (\n      [TxnState.STARTING_TRANSACTION, TxnState.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1\n    );\n  }\n\n  /**\n   * Transition the transaction in the state machine\n   * @ignore\n   * @param {TxnState} state The new state to transition to\n   */\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.indexOf(nextState) !== -1) {\n      this.state = nextState;\n      if (this.state === TxnState.NO_TRANSACTION || this.state === TxnState.STARTING_TRANSACTION) {\n        this.unpinServer();\n      }\n      return;\n    }\n\n    throw new MongoError(\n      `Attempted illegal state transition from [${this.state}] to [${nextState}]`\n    );\n  }\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n}\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nmodule.exports = { TxnState, Transaction, isTransactionCommand };\n"]},"metadata":{},"sourceType":"script"}