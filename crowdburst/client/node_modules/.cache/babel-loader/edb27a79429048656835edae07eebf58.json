{"ast":null,"code":"import { EJSON } from 'bson';\nimport { AuthEventKind } from '../../auth/internal/AuthEvent';\nimport { base64Encode } from \"../../internal/common/Base64\";\nimport Method from \"../../internal/net/Method\";\nimport { StitchAuthDocRequest } from \"../../internal/net/StitchAuthDocRequest\";\nimport { StitchAuthRequest } from \"../../internal/net/StitchAuthRequest\";\nimport { RebindEventType } from './RebindEvent';\n\nvar CoreStitchServiceClientImpl = function () {\n  function CoreStitchServiceClientImpl(requestClient, routes, name) {\n    this.serviceField = \"service\";\n    this.argumentsField = \"arguments\";\n    this.requestClient = requestClient;\n    this.serviceRoutes = routes;\n    this.serviceName = name;\n    this.serviceBinders = [];\n    this.allocatedStreams = [];\n  }\n\n  CoreStitchServiceClientImpl.prototype.callFunction = function (name, args, decoder) {\n    return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(name, args), decoder);\n  };\n\n  CoreStitchServiceClientImpl.prototype.streamFunction = function (name, args, decoder) {\n    var _this = this;\n\n    return this.requestClient.openAuthenticatedStreamWithDecoder(this.getStreamServiceFunctionRequest(name, args), decoder).then(function (newStream) {\n      _this.allocatedStreams.push(newStream);\n\n      return newStream;\n    });\n  };\n\n  CoreStitchServiceClientImpl.prototype.bind = function (binder) {\n    this.serviceBinders.push(binder);\n  };\n\n  CoreStitchServiceClientImpl.prototype.onRebindEvent = function (rebindEvent) {\n    switch (rebindEvent.type) {\n      case RebindEventType.AUTH_EVENT:\n        var authRebindEvent = rebindEvent;\n\n        if (authRebindEvent.event.kind === AuthEventKind.ActiveUserChanged) {\n          this.closeAllocatedStreams();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    this.serviceBinders.forEach(function (binder) {\n      binder.onRebindEvent(rebindEvent);\n    });\n  };\n\n  CoreStitchServiceClientImpl.prototype.getStreamServiceFunctionRequest = function (name, args) {\n    var body = {\n      name: name\n    };\n\n    if (this.serviceName !== undefined) {\n      body[this.serviceField] = this.serviceName;\n    }\n\n    body[this.argumentsField] = args;\n    var reqBuilder = new StitchAuthRequest.Builder();\n    reqBuilder.withMethod(Method.GET).withPath(this.serviceRoutes.functionCallRoute + (\"?stitch_request=\" + encodeURIComponent(base64Encode(EJSON.stringify(body)))));\n    return reqBuilder.build();\n  };\n\n  CoreStitchServiceClientImpl.prototype.getCallServiceFunctionRequest = function (name, args) {\n    var body = {\n      name: name\n    };\n\n    if (this.serviceName !== undefined) {\n      body[this.serviceField] = this.serviceName;\n    }\n\n    body[this.argumentsField] = args;\n    var reqBuilder = new StitchAuthDocRequest.Builder();\n    reqBuilder.withMethod(Method.POST).withPath(this.serviceRoutes.functionCallRoute);\n    reqBuilder.withDocument(body);\n    return reqBuilder.build();\n  };\n\n  CoreStitchServiceClientImpl.prototype.closeAllocatedStreams = function () {\n    this.allocatedStreams.forEach(function (stream) {\n      if (stream.isOpen()) {\n        stream.close();\n      }\n    });\n    this.allocatedStreams = [];\n  };\n\n  return CoreStitchServiceClientImpl;\n}();\n\nexport default CoreStitchServiceClientImpl;","map":{"version":3,"sources":["../../../../src/services/internal/CoreStitchServiceClientImpl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { EJSON } from 'bson';\nimport { AuthEventKind } from '../../auth/internal/AuthEvent';\nimport { base64Encode } from \"../../internal/common/Base64\";\nimport Method from \"../../internal/net/Method\";\nimport { StitchAuthDocRequest } from \"../../internal/net/StitchAuthDocRequest\";\nimport { StitchAuthRequest } from \"../../internal/net/StitchAuthRequest\";\nimport { RebindEventType } from './RebindEvent';\nvar CoreStitchServiceClientImpl = (function () {\n    function CoreStitchServiceClientImpl(requestClient, routes, name) {\n        this.serviceField = \"service\";\n        this.argumentsField = \"arguments\";\n        this.requestClient = requestClient;\n        this.serviceRoutes = routes;\n        this.serviceName = name;\n        this.serviceBinders = [];\n        this.allocatedStreams = [];\n    }\n    CoreStitchServiceClientImpl.prototype.callFunction = function (name, args, decoder) {\n        return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(name, args), decoder);\n    };\n    CoreStitchServiceClientImpl.prototype.streamFunction = function (name, args, decoder) {\n        var _this = this;\n        return this.requestClient.openAuthenticatedStreamWithDecoder(this.getStreamServiceFunctionRequest(name, args), decoder).then(function (newStream) {\n            _this.allocatedStreams.push(newStream);\n            return newStream;\n        });\n    };\n    CoreStitchServiceClientImpl.prototype.bind = function (binder) {\n        this.serviceBinders.push(binder);\n    };\n    CoreStitchServiceClientImpl.prototype.onRebindEvent = function (rebindEvent) {\n        switch (rebindEvent.type) {\n            case RebindEventType.AUTH_EVENT:\n                var authRebindEvent = rebindEvent;\n                if (authRebindEvent.event.kind === AuthEventKind.ActiveUserChanged) {\n                    this.closeAllocatedStreams();\n                }\n                break;\n            default:\n                break;\n        }\n        this.serviceBinders.forEach(function (binder) {\n            binder.onRebindEvent(rebindEvent);\n        });\n    };\n    CoreStitchServiceClientImpl.prototype.getStreamServiceFunctionRequest = function (name, args) {\n        var body = { name: name };\n        if (this.serviceName !== undefined) {\n            body[this.serviceField] = this.serviceName;\n        }\n        body[this.argumentsField] = args;\n        var reqBuilder = new StitchAuthRequest.Builder();\n        reqBuilder\n            .withMethod(Method.GET)\n            .withPath(this.serviceRoutes.functionCallRoute +\n            (\"?stitch_request=\" + encodeURIComponent(base64Encode(EJSON.stringify(body)))));\n        return reqBuilder.build();\n    };\n    CoreStitchServiceClientImpl.prototype.getCallServiceFunctionRequest = function (name, args) {\n        var body = { name: name };\n        if (this.serviceName !== undefined) {\n            body[this.serviceField] = this.serviceName;\n        }\n        body[this.argumentsField] = args;\n        var reqBuilder = new StitchAuthDocRequest.Builder();\n        reqBuilder\n            .withMethod(Method.POST)\n            .withPath(this.serviceRoutes.functionCallRoute);\n        reqBuilder.withDocument(body);\n        return reqBuilder.build();\n    };\n    CoreStitchServiceClientImpl.prototype.closeAllocatedStreams = function () {\n        this.allocatedStreams.forEach(function (stream) {\n            if (stream.isOpen()) {\n                stream.close();\n            }\n        });\n        this.allocatedStreams = [];\n    };\n    return CoreStitchServiceClientImpl;\n}());\nexport default CoreStitchServiceClientImpl;\n//# sourceMappingURL=CoreStitchServiceClientImpl.js.map"]},"metadata":{},"sourceType":"module"}