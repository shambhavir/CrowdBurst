{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Form.js\";\nimport React from 'react'; // const add = () =>  {\n//     // Prevent button click from submitting form\n//     // addItem(e)\n//     // e.preventDefault();\n//     // Create variables for our list, the item to add, and our form\n//     let list = this.state.list;\n//     const newItem = document.getElementById(\"addInput\");\n//     const form = document.getElementById(\"addItemForm\");\n//     // If our input has a value\n//     if (newItem.value !== \"\") {\n//       // Add the new item to the end of our list array\n//       list.push(newItem.value);\n//       // Then we use that to set the state for list\n//       this.setState({\n//         list: list\n//       });\n//       // Finally, we need to reset the form\n//       newItem.classList.remove(\"is-danger\");\n//       form.reset();\n//     } else {\n//       // If the input doesn't have a value, make the border red since it's required\n//       newItem.classList.add(\"is-danger\");\n//     }\n//   }\n\nexport default function Form() {\n  state = {\n    cats: [{\n      name: \"\",\n      age: \"\"\n    }],\n    owner: \"\",\n    description: \"\"\n  };\n\n  handleChange = e => {\n    if ([\"name\", \"age\"].includes(e.target.className)) {\n      let cats = [...this.state.cats];\n      cats[e.target.dataset.id][e.target.className] = e.target.value.toUpperCase();\n      this.setState({\n        cats\n      }, () => console.log(this.state.cats));\n    } else {\n      this.setState({\n        [e.target.name]: e.target.value.toUpperCase()\n      });\n    }\n  };\n\n  addCat = e => {\n    this.setState(prevState => ({\n      cats: [...prevState.cats, {\n        name: \"\",\n        age: \"\"\n      }]\n    }));\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  let {\n    owner,\n    description,\n    cats\n  } = this.state;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: this.handleSubmit,\n    onChange: this.handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Owner\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"owner\",\n    id: \"owner\",\n    value: owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"description\",\n    id: \"description\",\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: this.addCat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Add new cat\"), /*#__PURE__*/React.createElement(CatInputs, {\n    cats: cats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })) // <form>\n  //     <label htmlFor = \"Grocery Store\">Add Grocery Store</label>\n  //     <input type = \"text\" name = \"Grocery Store\" id=\"Grocery Store\"/>\n  //     <button>Add</button>\n  //     <input type = \"submit\" value = \"Submit\"/>\n  // </form>\n  // <button className=\"button is-info\">\n  //     Add Grocery Store\n  // </button>\n  ;\n}","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Form.js"],"names":["React","Form","state","cats","name","age","owner","description","handleChange","e","includes","target","className","dataset","id","value","toUpperCase","setState","console","log","addCat","prevState","handleSubmit","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAE3BC,EAAAA,KAAK,GAAG;AACJC,IAAAA,IAAI,EAAE,CAAC;AAACC,MAAAA,IAAI,EAAC,EAAN;AAAUC,MAAAA,GAAG,EAAC;AAAd,KAAD,CADF;AAEJC,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,WAAW,EAAE;AAHT,GAAR;;AAMEC,EAAAA,YAAY,GAAIC,CAAD,IAAO;AACpB,QAAI,CAAC,MAAD,EAAS,KAAT,EAAgBC,QAAhB,CAAyBD,CAAC,CAACE,MAAF,CAASC,SAAlC,CAAJ,EAAmD;AACjD,UAAIT,IAAI,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,IAAf,CAAX;AACAA,MAAAA,IAAI,CAACM,CAAC,CAACE,MAAF,CAASE,OAAT,CAAiBC,EAAlB,CAAJ,CAA0BL,CAAC,CAACE,MAAF,CAASC,SAAnC,IAAgDH,CAAC,CAACE,MAAF,CAASI,KAAT,CAAeC,WAAf,EAAhD;AACA,WAAKC,QAAL,CAAc;AAAEd,QAAAA;AAAF,OAAd,EAAwB,MAAMe,OAAO,CAACC,GAAR,CAAY,KAAKjB,KAAL,CAAWC,IAAvB,CAA9B;AACD,KAJD,MAIO;AACL,WAAKc,QAAL,CAAc;AAAE,SAACR,CAAC,CAACE,MAAF,CAASP,IAAV,GAAiBK,CAAC,CAACE,MAAF,CAASI,KAAT,CAAeC,WAAf;AAAnB,OAAd;AACD;AACF,GARD;;AAUAI,EAAAA,MAAM,GAAIX,CAAD,IAAO;AACd,SAAKQ,QAAL,CAAeI,SAAD,KAAgB;AAC5BlB,MAAAA,IAAI,EAAE,CAAC,GAAGkB,SAAS,CAAClB,IAAd,EAAoB;AAACC,QAAAA,IAAI,EAAC,EAAN;AAAUC,QAAAA,GAAG,EAAC;AAAd,OAApB;AADsB,KAAhB,CAAd;AAGD,GAJD;;AAKFiB,EAAAA,YAAY,GAAIb,CAAD,IAAO;AAAEA,IAAAA,CAAC,CAACc,cAAF;AAAoB,GAA5C;;AACA,MAAI;AAACjB,IAAAA,KAAD;AAAQC,IAAAA,WAAR;AAAqBJ,IAAAA;AAArB,MAA6B,KAAKD,KAAtC;AACA,sBAEI;AAAM,IAAA,QAAQ,EAAE,KAAKoB,YAArB;AAAmC,IAAA,QAAQ,EAAE,KAAKd,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADA,eAEA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,EAAE,EAAC,OAAnC;AAA2C,IAAA,KAAK,EAAEF,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,eAGA;AAAO,IAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHA,eAIA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,aAAxB;AAAsC,IAAA,EAAE,EAAC,aAAzC;AAAuD,IAAA,KAAK,EAAEC,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,eAKA;AAAQ,IAAA,OAAO,EAAE,KAAKa,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALA,eAMA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEjB,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANA,eAOA;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPA,CAFJ,CAYI;AAGA;AACA;AACA;AACA;AACA;AAEoB;AACA;AACA;AAvBxB;AA4BH","sourcesContent":["import React from 'react';\n\n\n// const add = () =>  {\n//     // Prevent button click from submitting form\n//     // addItem(e)\n//     // e.preventDefault();\n\n//     // Create variables for our list, the item to add, and our form\n//     let list = this.state.list;\n//     const newItem = document.getElementById(\"addInput\");\n//     const form = document.getElementById(\"addItemForm\");\n\n//     // If our input has a value\n//     if (newItem.value !== \"\") {\n//       // Add the new item to the end of our list array\n//       list.push(newItem.value);\n//       // Then we use that to set the state for list\n//       this.setState({\n//         list: list\n//       });\n//       // Finally, we need to reset the form\n//       newItem.classList.remove(\"is-danger\");\n//       form.reset();\n//     } else {\n//       // If the input doesn't have a value, make the border red since it's required\n//       newItem.classList.add(\"is-danger\");\n//     }\n//   }\n\nexport default function Form() {\n    \n    state = {\n        cats: [{name:\"\", age:\"\"}],\n        owner: \"\",\n        description: \"\"\n      }\n\n      handleChange = (e) => {\n        if ([\"name\", \"age\"].includes(e.target.className) ) {\n          let cats = [...this.state.cats]\n          cats[e.target.dataset.id][e.target.className] = e.target.value.toUpperCase()\n          this.setState({ cats }, () => console.log(this.state.cats))\n        } else {\n          this.setState({ [e.target.name]: e.target.value.toUpperCase() })\n        }\n      }\n\n      addCat = (e) => {\n        this.setState((prevState) => ({\n          cats: [...prevState.cats, {name:\"\", age:\"\"}],\n        }));\n      }\n    handleSubmit = (e) => { e.preventDefault() }\n    let {owner, description, cats} = this.state\n    return(\n       \n        <form onSubmit={this.handleSubmit} onChange={this.handleChange} >\n        <label htmlFor=\"name\">Owner</label> \n        <input type=\"text\" name=\"owner\" id=\"owner\" value={owner} />\n        <label htmlFor=\"description\">Description</label> \n        <input type=\"text\" name=\"description\" id=\"description\" value={description} />\n        <button onClick={this.addCat}>Add new cat</button>\n        <CatInputs cats={cats} />\n        <input type=\"submit\" value=\"Submit\" /> \n      </form>\n        \n        // <form>\n\n\n        //     <label htmlFor = \"Grocery Store\">Add Grocery Store</label>\n        //     <input type = \"text\" name = \"Grocery Store\" id=\"Grocery Store\"/>\n        //     <button>Add</button>\n        //     <input type = \"submit\" value = \"Submit\"/>\n        // </form>\n                    \n                            // <button className=\"button is-info\">\n                            //     Add Grocery Store\n                            // </button>\n                      \n    \n    \n    )\n}"]},"metadata":{},"sourceType":"module"}