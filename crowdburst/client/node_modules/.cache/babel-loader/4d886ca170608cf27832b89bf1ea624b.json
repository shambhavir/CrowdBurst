{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Badge } from './shared/Badge';\nimport { Link } from \"react-router-dom\";\nimport { List, ListItem, ListItemWithLink } from \"./shared/List\"; // const GROCERY = gql`\n// query GroceryQuery($id: String!) {\n//     grocery_by_pk(id: $id) {\n//       address\n//       alias\n//       id\n//       name\n//       finrevs {\n//         body\n//         grid\n//       }\n//     }\n// }\n// `; \n\nconst GROCERY = gql` \n{\n  grocery {\n    address\n    id\n    name\n    alias\n    display_phone\n  }\n}\n\n  \n`; // const Grocery = ({ newGrocery }) => {\n\nexport default function Grocery() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GROCERY); // const renderGrocery = (grocery) => {\n  //   return grocery.map(({ id, name, address }) => (\n  //     <ListItemWithLink key={id}>\n  //       <Link to={`/grocery/${id}`}>\n  //         {name} <Badge>{address}</Badge>\n  //       </Link>\n  //     </ListItemWithLink>\n  //   ));\n  // };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }\n  }, \"Loading ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, \"Error :(\"); // return <List>{renderGrocery(newGrocery || data.grocery)}</List>;\n  // const Grocery = () => {\n  //     const {loading, error, data} = useQuery(GROCERY);\n  //     if(loading) return <p>Loading...</p>;\n  //     if(error)  return <p>Error!</p>;\n\n  return data.grocery.map(({\n    id,\n    name,\n    address\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, name, \" | \", address)));\n} // return(\n//     <List>\n//         {data.grocery.map(({id, name, address}) => (\n//             <ListItem key = {id}>\n//                 {name} <Badge>{address}</Badge>\n//             </ListItem>\n//         ))}\n//     </List>\n// );\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n//     return data.grocery_by_pk.map(({grid, body}) => (\n//         <div key = {grid}>\n//             <p>\n//                 {grid}\n//             </p>\n//         </div>\n//     ))}; \n// return(\n//     <List>\n//         {data.grocery.map(({id, name, address}) => (\n//             <ListItem key = {id}>\n//                 {name} <Badge>{address}</Badge>\n//             </ListItem>\n//         ))}\n//     </List>\n// );\n// const Grocery = ({\n//     match: {\n//       params: { id },\n//     },\n//   }) => {\n//     const { loading, error, data } = useQuery(GROCERY, {\n//       variables: { id },\n//     });\n//     if (loading) return <p>Loading ...</p>;\n//     if (error) return <p>Error :(</p>;\n//     const { name, address, finrevs } = data.grocery_by_pk;\n//     return (\n//       <div>\n//         <h3>\n//           {name} <Badge>{address}</Badge>\n//         </h3>\n//         <List>\n//           {finrevs.map((finrevs) => (\n//             <ListItem key={finrevs.grid}>{finrevs.body}</ListItem>\n//           ))}\n//         </List>\n//       </div>\n//     );\n//   };\n// export default Grocery;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js"],"names":["React","useQuery","gql","Badge","Link","List","ListItem","ListItemWithLink","GROCERY","Grocery","loading","error","data","grocery","map","id","name","address"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,gBAAzB,QAAiD,eAAjD,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,OAAO,GAAGN,GAAI;;;;;;;;;;;;CAApB,C,CAcA;;AACE,eAAe,SAASO,OAAT,GAAkB;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CAACO,OAAD,CAAzC,CADiC,CAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP,CAdsB,CAgBjC;AAGF;AACA;AAEA;AACA;;AAEI,SAAOC,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAiB,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA,IAAL;AAAWC,IAAAA;AAAX,GAAD,kBACpB;AAAK,IAAA,GAAG,EAAIF,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,IADL,SACcC,OADd,CADJ,CADG,CAAP;AAOC,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAII;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE","sourcesContent":["import React from 'react';\nimport {useQuery, gql} from '@apollo/client';\nimport {Badge} from './shared/Badge';\nimport { Link } from \"react-router-dom\";\nimport { List, ListItem, ListItemWithLink } from \"./shared/List\";\n\n// const GROCERY = gql`\n\n// query GroceryQuery($id: String!) {\n//     grocery_by_pk(id: $id) {\n//       address\n//       alias\n//       id\n//       name\n//       finrevs {\n//         body\n//         grid\n//       }\n//     }\n// }\n   \n// `; \n\nconst GROCERY = gql` \n{\n  grocery {\n    address\n    id\n    name\n    alias\n    display_phone\n  }\n}\n\n  \n`;\n\n// const Grocery = ({ newGrocery }) => {\n  export default function Grocery(){\n  const { loading, error, data } = useQuery(GROCERY);\n\n  // const renderGrocery = (grocery) => {\n  //   return grocery.map(({ id, name, address }) => (\n  //     <ListItemWithLink key={id}>\n  //       <Link to={`/grocery/${id}`}>\n  //         {name} <Badge>{address}</Badge>\n  //       </Link>\n  //     </ListItemWithLink>\n  //   ));\n  // };\n\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <p>Error :(</p>;\n\n  // return <List>{renderGrocery(newGrocery || data.grocery)}</List>;\n\n\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n    return data.grocery.map(({id, name, address}) => (\n        <div key = {id}>\n            <p>\n                {name} | {address}\n            </p>\n        </div>\n    )); \n    }\n  \n    // return(\n    //     <List>\n    //         {data.grocery.map(({id, name, address}) => (\n    //             <ListItem key = {id}>\n    //                 {name} <Badge>{address}</Badge>\n    //             </ListItem>\n    //         ))}\n    //     </List>\n    // );\n\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n//     return data.grocery_by_pk.map(({grid, body}) => (\n//         <div key = {grid}>\n//             <p>\n//                 {grid}\n//             </p>\n//         </div>\n//     ))}; \n\n\n\n    // return(\n    //     <List>\n    //         {data.grocery.map(({id, name, address}) => (\n    //             <ListItem key = {id}>\n    //                 {name} <Badge>{address}</Badge>\n    //             </ListItem>\n    //         ))}\n    //     </List>\n    // );\n \n\n            \n    \n// const Grocery = ({\n//     match: {\n//       params: { id },\n//     },\n//   }) => {\n//     const { loading, error, data } = useQuery(GROCERY, {\n//       variables: { id },\n//     });\n  \n//     if (loading) return <p>Loading ...</p>;\n//     if (error) return <p>Error :(</p>;\n  \n//     const { name, address, finrevs } = data.grocery_by_pk;\n  \n//     return (\n//       <div>\n//         <h3>\n//           {name} <Badge>{address}</Badge>\n//         </h3>\n//         <List>\n//           {finrevs.map((finrevs) => (\n//             <ListItem key={finrevs.grid}>{finrevs.body}</ListItem>\n//           ))}\n//         </List>\n//       </div>\n//     );\n//   };\n  \n  // export default Grocery;"]},"metadata":{},"sourceType":"module"}