{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar applyRetryableWrites = require('../utils').applyRetryableWrites;\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar decorateWithCollation = require('../utils').decorateWithCollation;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar formattedOrderClause = require('../utils').formattedOrderClause;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar FindAndModifyOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(FindAndModifyOperation, _OperationBase);\n\n  var _super = _createSuper(FindAndModifyOperation);\n\n  function FindAndModifyOperation(collection, query, sort, doc, options) {\n    var _this;\n\n    _classCallCheck(this, FindAndModifyOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    _this.query = query;\n    _this.sort = sort;\n    _this.doc = doc;\n    return _this;\n  }\n\n  _createClass(FindAndModifyOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var query = this.query;\n      var sort = formattedOrderClause(this.sort);\n      var doc = this.doc;\n      var options = this.options; // Create findAndModify command object\n\n      var queryObject = {\n        findAndModify: coll.collectionName,\n        query: query\n      };\n\n      if (sort) {\n        queryObject.sort = sort;\n      }\n\n      queryObject.new = options.new ? true : false;\n      queryObject.remove = options.remove ? true : false;\n      queryObject.upsert = options.upsert ? true : false;\n      var projection = options.projection || options.fields;\n\n      if (projection) {\n        queryObject.fields = projection;\n      }\n\n      if (options.arrayFilters) {\n        queryObject.arrayFilters = options.arrayFilters;\n      }\n\n      if (doc && !options.remove) {\n        queryObject.update = doc;\n      }\n\n      if (options.maxTimeMS) queryObject.maxTimeMS = options.maxTimeMS; // Either use override on the function, or go back to default on either the collection\n      // level or db\n\n      options.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions; // No check on the documents\n\n      options.checkKeys = false; // Final options for retryable writes and write concern\n\n      options = applyRetryableWrites(options, coll.s.db);\n      options = applyWriteConcern(options, {\n        db: coll.s.db,\n        collection: coll\n      }, options); // Decorate the findAndModify command with the write Concern\n\n      if (options.writeConcern) {\n        queryObject.writeConcern = options.writeConcern;\n      } // Have we specified bypassDocumentValidation\n\n\n      if (options.bypassDocumentValidation === true) {\n        queryObject.bypassDocumentValidation = options.bypassDocumentValidation;\n      }\n\n      options.readPreference = ReadPreference.primary; // Have we specified collation\n\n      try {\n        decorateWithCollation(queryObject, coll, options);\n      } catch (err) {\n        return callback(err, null);\n      } // Execute the command\n\n\n      executeCommand(coll.s.db, queryObject, options, function (err, result) {\n        if (err) return handleCallback(callback, err, null);\n        return handleCallback(callback, null, result);\n      });\n    }\n  }]);\n\n  return FindAndModifyOperation;\n}(OperationBase);\n\nmodule.exports = FindAndModifyOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/find_and_modify.js"],"names":["OperationBase","require","applyRetryableWrites","applyWriteConcern","decorateWithCollation","executeCommand","formattedOrderClause","handleCallback","ReadPreference","FindAndModifyOperation","collection","query","sort","doc","options","callback","coll","queryObject","findAndModify","collectionName","new","remove","upsert","projection","fields","arrayFilters","update","maxTimeMS","serializeFunctions","s","checkKeys","db","writeConcern","bypassDocumentValidation","readPreference","primary","err","result","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst applyRetryableWrites = require('../utils').applyRetryableWrites;\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst decorateWithCollation = require('../utils').decorateWithCollation;\nconst executeCommand = require('./db_ops').executeCommand;\nconst formattedOrderClause = require('../utils').formattedOrderClause;\nconst handleCallback = require('../utils').handleCallback;\nconst ReadPreference = require('../core').ReadPreference;\n\nclass FindAndModifyOperation extends OperationBase {\n  constructor(collection, query, sort, doc, options) {\n    super(options);\n\n    this.collection = collection;\n    this.query = query;\n    this.sort = sort;\n    this.doc = doc;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const query = this.query;\n    const sort = formattedOrderClause(this.sort);\n    const doc = this.doc;\n    let options = this.options;\n\n    // Create findAndModify command object\n    const queryObject = {\n      findAndModify: coll.collectionName,\n      query: query\n    };\n\n    if (sort) {\n      queryObject.sort = sort;\n    }\n\n    queryObject.new = options.new ? true : false;\n    queryObject.remove = options.remove ? true : false;\n    queryObject.upsert = options.upsert ? true : false;\n\n    const projection = options.projection || options.fields;\n\n    if (projection) {\n      queryObject.fields = projection;\n    }\n\n    if (options.arrayFilters) {\n      queryObject.arrayFilters = options.arrayFilters;\n    }\n\n    if (doc && !options.remove) {\n      queryObject.update = doc;\n    }\n\n    if (options.maxTimeMS) queryObject.maxTimeMS = options.maxTimeMS;\n\n    // Either use override on the function, or go back to default on either the collection\n    // level or db\n    options.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;\n\n    // No check on the documents\n    options.checkKeys = false;\n\n    // Final options for retryable writes and write concern\n    options = applyRetryableWrites(options, coll.s.db);\n    options = applyWriteConcern(options, { db: coll.s.db, collection: coll }, options);\n\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      queryObject.writeConcern = options.writeConcern;\n    }\n\n    // Have we specified bypassDocumentValidation\n    if (options.bypassDocumentValidation === true) {\n      queryObject.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    options.readPreference = ReadPreference.primary;\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(queryObject, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Execute the command\n    executeCommand(coll.s.db, queryObject, options, (err, result) => {\n      if (err) return handleCallback(callback, err, null);\n\n      return handleCallback(callback, null, result);\n    });\n  }\n}\n\nmodule.exports = FindAndModifyOperation;\n"]},"metadata":{},"sourceType":"script"}