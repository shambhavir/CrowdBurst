{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries';\nimport GrocerySearch2 from './GrocerySearch2';\nimport axios from 'axios'; // import App3 from './test6/my-app/src2';\n//import { render } from 'ejs';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql'\n  })\n}); // const data = new Array()\n\nconst data = new Array(); // const id = 0\n// const message = null\n// const intervalIsSet = false\n// const idToDelete = null\n// const idToUpdate = null\n// const objectToUpdate = null\n\ncomponentDidMount();\nthis.getDataFromDb();\n\nif (!this.state.intervalIsSet) {\n  let interval = setInterval(this.getDataFromDb, 1000);\n  this.setState({\n    intervalIsSet: interval\n  });\n}\n\ncomponentWillUnmount();\n\nif (this.state.intervalIsSet) {\n  clearInterval(this.state.intervalIsSet);\n  this.setState({\n    intervalIsSet: null\n  });\n}\n\ngetDataFromDb = () => {\n  fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n    data: res.data\n  }));\n};\n\nputDataToDB = message => {\n  let currentIds = this.state.data.map(data => data.id);\n  let idToBeAdded = 0;\n\n  while (currentIds.includes(idToBeAdded)) {\n    ++idToBeAdded;\n  }\n\n  axios.post('http://localhost:3001/api/putData', {\n    id: idToBeAdded,\n    message: message\n  });\n};\n\ndeleteFromDB = idTodelete => {\n  parseInt(idTodelete);\n  let objIdToDelete = null;\n  this.state.data.forEach(dat => {\n    if (dat.id == idTodelete) {\n      objIdToDelete = dat._id;\n    }\n  });\n  axios.delete('http://localhost:3001/api/deleteData', {\n    data: {\n      id: objIdToDelete\n    }\n  });\n};\n\nupdateDB = (idToUpdate, updateToApply) => {\n  let objIdToUpdate = null;\n  parseInt(idToUpdate);\n  this.state.data.forEach(dat => {\n    if (dat.id == idToUpdate) {\n      objIdToUpdate = dat._id;\n    }\n  });\n  axios.post('http://localhost:3001/api/updateData', {\n    id: objIdToUpdate,\n    update: {\n      message: updateToApply\n    }\n  });\n};\n\nconst App2 = () => /*#__PURE__*/React.createElement(BrowserRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }\n}, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n  style: {\n    padding: '10px'\n  },\n  key: data.message,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    color: 'gray'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 19\n  }\n}, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 73\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    color: 'gray'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 19\n  }\n}, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    padding: '10px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  onChange: e => this.setState({\n    message: e.target.value\n  }),\n  placeholder: \"add something in the database\",\n  style: {\n    width: '200px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => this.putDataToDB(this.state.message),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 11\n  }\n}, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    padding: '10px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: '200px'\n  },\n  onChange: e => this.setState({\n    idToDelete: e.target.value\n  }),\n  placeholder: \"put id of item to delete here\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => this.deleteFromDB(this.state.idToDelete),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 11\n  }\n}, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    padding: '10px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: '200px'\n  },\n  onChange: e => this.setState({\n    idToUpdate: e.target.value\n  }),\n  placeholder: \"id of item to update here\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: '200px'\n  },\n  onChange: e => this.setState({\n    updateToApply: e.target.value\n  }),\n  placeholder: \"put new value of the item here\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 11\n  }\n}, \"UPDATE\"))), /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Route, {\n  path: \"/grocery/:id\",\n  component: Groceries,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/\",\n  component: GrocerySearch2,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 9\n  }\n})))); // ReactDOM.render(<App2 />, document.getElementById('root'))\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(App2, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // requireServiceWorker(); \n// render(<App2/>, document.getElementById('root')); \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js"],"names":["React","Component","ReactDOM","render","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","BrowserRouter","Route","Switch","Groceries","GrocerySearch2","axios","client","cache","link","uri","data","Array","componentDidMount","getDataFromDb","state","intervalIsSet","interval","setInterval","setState","componentWillUnmount","clearInterval","fetch","then","json","res","putDataToDB","message","currentIds","map","id","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","idToUpdate","updateToApply","objIdToUpdate","update","App2","length","padding","color","e","target","value","width","idToDelete","document","getElementById"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache,split } from '@apollo/client'; \nimport {getMainDefinition} from '@apollo/client/utilities'; \nimport {WebSocketLink} from '@apollo/link-ws'; \nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries'; \nimport GrocerySearch2 from './GrocerySearch2'; \nimport axios from 'axios';\n\n// import App3 from './test6/my-app/src2';\n\n//import { render } from 'ejs';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n\n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n\n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n\n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n  })\n}); \n// const data = new Array()\n\n\n      const data =  new Array()\n      // const id = 0\n      // const message = null\n      // const intervalIsSet = false\n      // const idToDelete = null\n      // const idToUpdate = null\n      // const objectToUpdate = null\n  \n\n      componentDidMount() \n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n          let interval = setInterval(this.getDataFromDb, 1000);\n          this.setState({ intervalIsSet: interval });\n        }\n        componentWillUnmount() \n            if (this.state.intervalIsSet) {\n              clearInterval(this.state.intervalIsSet);\n              this.setState({ intervalIsSet: null });\n            }\n        getDataFromDb = () => {\n                fetch('http://localhost:3001/api/getData')\n                  .then((data) => data.json())\n                  .then((res) => this.setState({ data: res.data }));\n              };\n     putDataToDB = (message) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n          }\n\n      axios.post('http://localhost:3001/api/putData', {\n          id: idToBeAdded,\n          message: message,\n         });\n        };\n\n        deleteFromDB = (idTodelete) => {\n            parseInt(idTodelete);\n            let objIdToDelete = null;\n            this.state.data.forEach((dat) => {\n              if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n              }\n            });\n            axios.delete('http://localhost:3001/api/deleteData', {\n                  data: {\n                    id: objIdToDelete,\n                  },\n                });\n              };\n       updateDB = (idToUpdate, updateToApply) => {\n                  let objIdToUpdate = null;\n                  parseInt(idToUpdate);\n                  this.state.data.forEach((dat) => {\n                    if (dat.id == idToUpdate) {\n                      objIdToUpdate = dat._id;\n                    }\n                  });\n\n       axios.post('http://localhost:3001/api/updateData', {\n               id: objIdToUpdate,\n               update: { message: updateToApply },\n           });\n          };\n\nconst App2 = () => (\n  \n\n  \n\n<BrowserRouter>\n  <ApolloProvider client = {client}>\n    {/* <div>\n      <h2>My first React App</h2>\n    </div> */}\n    {/* <Form2/> */}\n    {/* <Grocery/> */}\n    {/* <App3/> */}\n\n\n    <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n\n\n\n  <Switch> \n        <Route path=\"/grocery/:id\" component={Groceries} />\n        <Route path=\"/\" component={GrocerySearch2} />\n  </Switch> \n  </ApolloProvider>\n  </BrowserRouter>\n); \n\n\n\n// ReactDOM.render(<App2 />, document.getElementById('root'))\nReactDOM.render(<App2/>, document.getElementById('root')); \n// requireServiceWorker(); \n\n// render(<App2/>, document.getElementById('root')); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}