{"ast":null,"code":"'use strict'; // async function* asyncIterator() {\n//   while (true) {\n//     const value = await this.next();\n//     if (!value) {\n//       await this.close();\n//       return;\n//     }\n//     yield value;\n//   }\n// }\n// TODO: change this to the async generator function above\n\nfunction asyncIterator() {\n  var cursor = this;\n  return {\n    next: function next() {\n      return Promise.resolve().then(function () {\n        return cursor.next();\n      }).then(function (value) {\n        if (!value) {\n          return cursor.close().then(function () {\n            return {\n              value: value,\n              done: true\n            };\n          });\n        }\n\n        return {\n          value: value,\n          done: false\n        };\n      });\n    }\n  };\n}\n\nexports.asyncIterator = asyncIterator;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/async/async_iterator.js"],"names":["asyncIterator","cursor","next","Promise","resolve","then","value","close","done","exports"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,SAASA,aAAT,GAAyB;AACvB,MAAMC,MAAM,GAAG,IAAf;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAE,gBAAW;AACf,aAAOC,OAAO,CAACC,OAAR,GACJC,IADI,CACC;AAAA,eAAMJ,MAAM,CAACC,IAAP,EAAN;AAAA,OADD,EAEJG,IAFI,CAEC,UAAAC,KAAK,EAAI;AACb,YAAI,CAACA,KAAL,EAAY;AACV,iBAAOL,MAAM,CAACM,KAAP,GAAeF,IAAf,CAAoB;AAAA,mBAAO;AAAEC,cAAAA,KAAK,EAALA,KAAF;AAASE,cAAAA,IAAI,EAAE;AAAf,aAAP;AAAA,WAApB,CAAP;AACD;;AACD,eAAO;AAAEF,UAAAA,KAAK,EAALA,KAAF;AAASE,UAAAA,IAAI,EAAE;AAAf,SAAP;AACD,OAPI,CAAP;AAQD;AAVI,GAAP;AAYD;;AAEDC,OAAO,CAACT,aAAR,GAAwBA,aAAxB","sourcesContent":["'use strict';\n\n// async function* asyncIterator() {\n//   while (true) {\n//     const value = await this.next();\n//     if (!value) {\n//       await this.close();\n//       return;\n//     }\n\n//     yield value;\n//   }\n// }\n\n// TODO: change this to the async generator function above\nfunction asyncIterator() {\n  const cursor = this;\n\n  return {\n    next: function() {\n      return Promise.resolve()\n        .then(() => cursor.next())\n        .then(value => {\n          if (!value) {\n            return cursor.close().then(() => ({ value, done: true }));\n          }\n          return { value, done: false };\n        });\n    }\n  };\n}\n\nexports.asyncIterator = asyncIterator;\n"]},"metadata":{},"sourceType":"script"}