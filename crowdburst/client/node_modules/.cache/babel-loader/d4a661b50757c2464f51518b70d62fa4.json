{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar MongoError = require('../core').MongoError;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar CreateIndexesOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(CreateIndexesOperation, _OperationBase);\n\n  var _super = _createSuper(CreateIndexesOperation);\n\n  function CreateIndexesOperation(collection, indexSpecs, options) {\n    var _this;\n\n    _classCallCheck(this, CreateIndexesOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    _this.indexSpecs = indexSpecs;\n    return _this;\n  }\n\n  _createClass(CreateIndexesOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var indexSpecs = this.indexSpecs;\n      var options = this.options;\n      var capabilities = coll.s.topology.capabilities(); // Ensure we generate the correct name if the parameter is not set\n\n      for (var i = 0; i < indexSpecs.length; i++) {\n        if (indexSpecs[i].name == null) {\n          var keys = []; // Did the user pass in a collation, check if our write server supports it\n\n          if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n            return callback(new MongoError('server/primary/mongos does not support collation'));\n          }\n\n          for (var name in indexSpecs[i].key) {\n            keys.push(\"\".concat(name, \"_\").concat(indexSpecs[i].key[name]));\n          } // Set the name\n\n\n          indexSpecs[i].name = keys.join('_');\n        }\n      }\n\n      options = Object.assign({}, options, {\n        readPreference: ReadPreference.PRIMARY\n      }); // Execute the index\n\n      executeCommand(coll.s.db, {\n        createIndexes: coll.collectionName,\n        indexes: indexSpecs\n      }, options, callback);\n    }\n  }]);\n\n  return CreateIndexesOperation;\n}(OperationBase);\n\ndefineAspects(CreateIndexesOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateIndexesOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/create_indexes.js"],"names":["Aspect","require","defineAspects","OperationBase","executeCommand","MongoError","ReadPreference","CreateIndexesOperation","collection","indexSpecs","options","callback","coll","capabilities","s","topology","i","length","name","keys","collation","commandsTakeCollation","key","push","join","Object","assign","readPreference","PRIMARY","db","createIndexes","collectionName","indexes","WRITE_OPERATION","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,IAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;AACA,IAAMC,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,aAA7C;;AACA,IAAMC,cAAc,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,cAA3C;;AACA,IAAMC,UAAU,GAAGJ,OAAO,CAAC,SAAD,CAAP,CAAmBI,UAAtC;;AACA,IAAMC,cAAc,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBK,cAA1C;;IAEMC,sB;;;;;AACJ,kCAAYC,UAAZ,EAAwBC,UAAxB,EAAoCC,OAApC,EAA6C;AAAA;;AAAA;;AAC3C,8BAAMA,OAAN;AAEA,UAAKF,UAAL,GAAkBA,UAAlB;AACA,UAAKC,UAAL,GAAkBA,UAAlB;AAJ2C;AAK5C;;;;4BAEOE,Q,EAAU;AAChB,UAAMC,IAAI,GAAG,KAAKJ,UAAlB;AACA,UAAMC,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAIC,OAAO,GAAG,KAAKA,OAAnB;AAEA,UAAMG,YAAY,GAAGD,IAAI,CAACE,CAAL,CAAOC,QAAP,CAAgBF,YAAhB,EAArB,CALgB,CAOhB;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,YAAIP,UAAU,CAACO,CAAD,CAAV,CAAcE,IAAd,IAAsB,IAA1B,EAAgC;AAC9B,cAAMC,IAAI,GAAG,EAAb,CAD8B,CAG9B;;AACA,cAAIV,UAAU,CAACO,CAAD,CAAV,CAAcI,SAAd,IAA2BP,YAA3B,IAA2C,CAACA,YAAY,CAACQ,qBAA7D,EAAoF;AAClF,mBAAOV,QAAQ,CAAC,IAAIN,UAAJ,CAAe,kDAAf,CAAD,CAAf;AACD;;AAED,eAAK,IAAIa,IAAT,IAAiBT,UAAU,CAACO,CAAD,CAAV,CAAcM,GAA/B,EAAoC;AAClCH,YAAAA,IAAI,CAACI,IAAL,WAAaL,IAAb,cAAqBT,UAAU,CAACO,CAAD,CAAV,CAAcM,GAAd,CAAkBJ,IAAlB,CAArB;AACD,WAV6B,CAY9B;;;AACAT,UAAAA,UAAU,CAACO,CAAD,CAAV,CAAcE,IAAd,GAAqBC,IAAI,CAACK,IAAL,CAAU,GAAV,CAArB;AACD;AACF;;AAEDd,MAAAA,OAAO,GAAGe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,OAAlB,EAA2B;AAAEiB,QAAAA,cAAc,EAAErB,cAAc,CAACsB;AAAjC,OAA3B,CAAV,CA1BgB,CA4BhB;;AACAxB,MAAAA,cAAc,CACZQ,IAAI,CAACE,CAAL,CAAOe,EADK,EAEZ;AACEC,QAAAA,aAAa,EAAElB,IAAI,CAACmB,cADtB;AAEEC,QAAAA,OAAO,EAAEvB;AAFX,OAFY,EAMZC,OANY,EAOZC,QAPY,CAAd;AASD;;;;EA9CkCR,a;;AAiDrCD,aAAa,CAACK,sBAAD,EAAyBP,MAAM,CAACiC,eAAhC,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiB5B,sBAAjB","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\nconst OperationBase = require('./operation').OperationBase;\nconst executeCommand = require('./db_ops').executeCommand;\nconst MongoError = require('../core').MongoError;\nconst ReadPreference = require('../core').ReadPreference;\n\nclass CreateIndexesOperation extends OperationBase {\n  constructor(collection, indexSpecs, options) {\n    super(options);\n\n    this.collection = collection;\n    this.indexSpecs = indexSpecs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const indexSpecs = this.indexSpecs;\n    let options = this.options;\n\n    const capabilities = coll.s.topology.capabilities();\n\n    // Ensure we generate the correct name if the parameter is not set\n    for (let i = 0; i < indexSpecs.length; i++) {\n      if (indexSpecs[i].name == null) {\n        const keys = [];\n\n        // Did the user pass in a collation, check if our write server supports it\n        if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n          return callback(new MongoError('server/primary/mongos does not support collation'));\n        }\n\n        for (let name in indexSpecs[i].key) {\n          keys.push(`${name}_${indexSpecs[i].key[name]}`);\n        }\n\n        // Set the name\n        indexSpecs[i].name = keys.join('_');\n      }\n    }\n\n    options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n    // Execute the index\n    executeCommand(\n      coll.s.db,\n      {\n        createIndexes: coll.collectionName,\n        indexes: indexSpecs\n      },\n      options,\n      callback\n    );\n  }\n}\n\ndefineAspects(CreateIndexesOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = CreateIndexesOperation;\n"]},"metadata":{},"sourceType":"script"}