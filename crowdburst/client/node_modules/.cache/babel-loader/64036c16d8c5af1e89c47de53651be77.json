{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar decorateCommand = require('../utils').decorateCommand;\n\nvar decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar resolveReadPreference = require('../utils').resolveReadPreference;\n\nvar toError = require('../utils').toError;\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n * @property {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n * @property {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n */\n\n\nvar GeoHaystackSearchOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(GeoHaystackSearchOperation, _OperationBase);\n\n  var _super = _createSuper(GeoHaystackSearchOperation);\n\n  /**\n   * Construct a GeoHaystackSearch operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n   * @param {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n   */\n  function GeoHaystackSearchOperation(collection, x, y, options) {\n    var _this;\n\n    _classCallCheck(this, GeoHaystackSearchOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    _this.x = x;\n    _this.y = y;\n    return _this;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  _createClass(GeoHaystackSearchOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var x = this.x;\n      var y = this.y;\n      var options = this.options; // Build command object\n\n      var commandObject = {\n        geoSearch: coll.collectionName,\n        near: [x, y]\n      }; // Remove read preference from hash if it exists\n\n      commandObject = decorateCommand(commandObject, options, ['readPreference', 'session']);\n      options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n      options.readPreference = resolveReadPreference(coll, options); // Do we have a readConcern specified\n\n      decorateWithReadConcern(commandObject, coll, options); // Execute the command\n\n      executeCommand(coll.s.db, commandObject, options, function (err, res) {\n        if (err) return handleCallback(callback, err);\n        if (res.err || res.errmsg) handleCallback(callback, toError(res)); // should we only be returning res.results here? Not sure if the user\n        // should see the other return information\n\n        handleCallback(callback, null, res);\n      });\n    }\n  }]);\n\n  return GeoHaystackSearchOperation;\n}(OperationBase);\n\ndefineAspects(GeoHaystackSearchOperation, Aspect.READ_OPERATION);\nmodule.exports = GeoHaystackSearchOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/geo_haystack_search.js"],"names":["Aspect","require","defineAspects","OperationBase","decorateCommand","decorateWithReadConcern","executeCommand","handleCallback","resolveReadPreference","toError","GeoHaystackSearchOperation","collection","x","y","options","callback","coll","commandObject","geoSearch","collectionName","near","Object","assign","readPreference","s","db","err","res","errmsg","READ_OPERATION","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,IAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;AACA,IAAMC,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,aAA7C;;AACA,IAAMC,eAAe,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,eAA5C;;AACA,IAAMC,uBAAuB,GAAGJ,OAAO,CAAC,UAAD,CAAP,CAAoBI,uBAApD;;AACA,IAAMC,cAAc,GAAGL,OAAO,CAAC,UAAD,CAAP,CAAoBK,cAA3C;;AACA,IAAMC,cAAc,GAAGN,OAAO,CAAC,UAAD,CAAP,CAAoBM,cAA3C;;AACA,IAAMC,qBAAqB,GAAGP,OAAO,CAAC,UAAD,CAAP,CAAoBO,qBAAlD;;AACA,IAAMC,OAAO,GAAGR,OAAO,CAAC,UAAD,CAAP,CAAoBQ,OAApC;AAEA;;;;;;;;;;;IASMC,0B;;;;;AACJ;;;;;;;;AAQA,sCAAYC,UAAZ,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,OAA9B,EAAuC;AAAA;;AAAA;;AACrC,8BAAMA,OAAN;AAEA,UAAKH,UAAL,GAAkBA,UAAlB;AACA,UAAKC,CAAL,GAASA,CAAT;AACA,UAAKC,CAAL,GAASA,CAAT;AALqC;AAMtC;AAED;;;;;;;;;4BAKQE,Q,EAAU;AAChB,UAAMC,IAAI,GAAG,KAAKL,UAAlB;AACA,UAAMC,CAAC,GAAG,KAAKA,CAAf;AACA,UAAMC,CAAC,GAAG,KAAKA,CAAf;AACA,UAAIC,OAAO,GAAG,KAAKA,OAAnB,CAJgB,CAMhB;;AACA,UAAIG,aAAa,GAAG;AAClBC,QAAAA,SAAS,EAAEF,IAAI,CAACG,cADE;AAElBC,QAAAA,IAAI,EAAE,CAACR,CAAD,EAAIC,CAAJ;AAFY,OAApB,CAPgB,CAYhB;;AACAI,MAAAA,aAAa,GAAGb,eAAe,CAACa,aAAD,EAAgBH,OAAhB,EAAyB,CAAC,gBAAD,EAAmB,SAAnB,CAAzB,CAA/B;AAEAA,MAAAA,OAAO,GAAGO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,OAAlB,CAAV,CAfgB,CAgBhB;;AACAA,MAAAA,OAAO,CAACS,cAAR,GAAyBf,qBAAqB,CAACQ,IAAD,EAAOF,OAAP,CAA9C,CAjBgB,CAmBhB;;AACAT,MAAAA,uBAAuB,CAACY,aAAD,EAAgBD,IAAhB,EAAsBF,OAAtB,CAAvB,CApBgB,CAsBhB;;AACAR,MAAAA,cAAc,CAACU,IAAI,CAACQ,CAAL,CAAOC,EAAR,EAAYR,aAAZ,EAA2BH,OAA3B,EAAoC,UAACY,GAAD,EAAMC,GAAN,EAAc;AAC9D,YAAID,GAAJ,EAAS,OAAOnB,cAAc,CAACQ,QAAD,EAAWW,GAAX,CAArB;AACT,YAAIC,GAAG,CAACD,GAAJ,IAAWC,GAAG,CAACC,MAAnB,EAA2BrB,cAAc,CAACQ,QAAD,EAAWN,OAAO,CAACkB,GAAD,CAAlB,CAAd,CAFmC,CAG9D;AACA;;AACApB,QAAAA,cAAc,CAACQ,QAAD,EAAW,IAAX,EAAiBY,GAAjB,CAAd;AACD,OANa,CAAd;AAOD;;;;EApDsCxB,a;;AAuDzCD,aAAa,CAACQ,0BAAD,EAA6BV,MAAM,CAAC6B,cAApC,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiBrB,0BAAjB","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\nconst OperationBase = require('./operation').OperationBase;\nconst decorateCommand = require('../utils').decorateCommand;\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\nconst executeCommand = require('./db_ops').executeCommand;\nconst handleCallback = require('../utils').handleCallback;\nconst resolveReadPreference = require('../utils').resolveReadPreference;\nconst toError = require('../utils').toError;\n\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n * @property {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n * @property {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n */\nclass GeoHaystackSearchOperation extends OperationBase {\n  /**\n   * Construct a GeoHaystackSearch operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n   * @param {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n   */\n  constructor(collection, x, y, options) {\n    super(options);\n\n    this.collection = collection;\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n  execute(callback) {\n    const coll = this.collection;\n    const x = this.x;\n    const y = this.y;\n    let options = this.options;\n\n    // Build command object\n    let commandObject = {\n      geoSearch: coll.collectionName,\n      near: [x, y]\n    };\n\n    // Remove read preference from hash if it exists\n    commandObject = decorateCommand(commandObject, options, ['readPreference', 'session']);\n\n    options = Object.assign({}, options);\n    // Ensure we have the right read preference inheritance\n    options.readPreference = resolveReadPreference(coll, options);\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(commandObject, coll, options);\n\n    // Execute the command\n    executeCommand(coll.s.db, commandObject, options, (err, res) => {\n      if (err) return handleCallback(callback, err);\n      if (res.err || res.errmsg) handleCallback(callback, toError(res));\n      // should we only be returning res.results here? Not sure if the user\n      // should see the other return information\n      handleCallback(callback, null, res);\n    });\n  }\n}\n\ndefineAspects(GeoHaystackSearchOperation, Aspect.READ_OPERATION);\n\nmodule.exports = GeoHaystackSearchOperation;\n"]},"metadata":{},"sourceType":"script"}