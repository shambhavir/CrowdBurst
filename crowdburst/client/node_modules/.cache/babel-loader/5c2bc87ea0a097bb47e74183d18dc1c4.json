{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Instrumentation = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Instrumentation, _EventEmitter);\n\n  var _super = _createSuper(Instrumentation);\n\n  function Instrumentation() {\n    _classCallCheck(this, Instrumentation);\n\n    return _super.call(this);\n  }\n\n  _createClass(Instrumentation, [{\n    key: \"instrument\",\n    value: function instrument(MongoClient, callback) {\n      // store a reference to the original functions\n      this.$MongoClient = MongoClient;\n      var $prototypeConnect = this.$prototypeConnect = MongoClient.prototype.connect;\n      var instrumentation = this;\n\n      MongoClient.prototype.connect = function (callback) {\n        this.s.options.monitorCommands = true;\n        this.on('commandStarted', function (event) {\n          return instrumentation.emit('started', event);\n        });\n        this.on('commandSucceeded', function (event) {\n          return instrumentation.emit('succeeded', event);\n        });\n        this.on('commandFailed', function (event) {\n          return instrumentation.emit('failed', event);\n        });\n        return $prototypeConnect.call(this, callback);\n      };\n\n      if (typeof callback === 'function') callback(null, this);\n    }\n  }, {\n    key: \"uninstrument\",\n    value: function uninstrument() {\n      this.$MongoClient.prototype.connect = this.$prototypeConnect;\n    }\n  }]);\n\n  return Instrumentation;\n}(EventEmitter);\n\nmodule.exports = Instrumentation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/apm.js"],"names":["EventEmitter","require","Instrumentation","MongoClient","callback","$MongoClient","$prototypeConnect","prototype","connect","instrumentation","s","options","monitorCommands","on","event","emit","call","module","exports"],"mappings":"AAAA;;;;;;;;;;AACA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;IAEME,e;;;;;AACJ,6BAAc;AAAA;;AAAA;AAEb;;;;+BAEUC,W,EAAaC,Q,EAAU;AAChC;AACA,WAAKC,YAAL,GAAoBF,WAApB;AACA,UAAMG,iBAAiB,GAAI,KAAKA,iBAAL,GAAyBH,WAAW,CAACI,SAAZ,CAAsBC,OAA1E;AAEA,UAAMC,eAAe,GAAG,IAAxB;;AACAN,MAAAA,WAAW,CAACI,SAAZ,CAAsBC,OAAtB,GAAgC,UAASJ,QAAT,EAAmB;AACjD,aAAKM,CAAL,CAAOC,OAAP,CAAeC,eAAf,GAAiC,IAAjC;AACA,aAAKC,EAAL,CAAQ,gBAAR,EAA0B,UAAAC,KAAK;AAAA,iBAAIL,eAAe,CAACM,IAAhB,CAAqB,SAArB,EAAgCD,KAAhC,CAAJ;AAAA,SAA/B;AACA,aAAKD,EAAL,CAAQ,kBAAR,EAA4B,UAAAC,KAAK;AAAA,iBAAIL,eAAe,CAACM,IAAhB,CAAqB,WAArB,EAAkCD,KAAlC,CAAJ;AAAA,SAAjC;AACA,aAAKD,EAAL,CAAQ,eAAR,EAAyB,UAAAC,KAAK;AAAA,iBAAIL,eAAe,CAACM,IAAhB,CAAqB,QAArB,EAA+BD,KAA/B,CAAJ;AAAA,SAA9B;AACA,eAAOR,iBAAiB,CAACU,IAAlB,CAAuB,IAAvB,EAA6BZ,QAA7B,CAAP;AACD,OAND;;AAQA,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoCA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACrC;;;mCAEc;AACb,WAAKC,YAAL,CAAkBE,SAAlB,CAA4BC,OAA5B,GAAsC,KAAKF,iBAA3C;AACD;;;;EAxB2BN,Y;;AA2B9BiB,MAAM,CAACC,OAAP,GAAiBhB,eAAjB","sourcesContent":["'use strict';\nconst EventEmitter = require('events').EventEmitter;\n\nclass Instrumentation extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  instrument(MongoClient, callback) {\n    // store a reference to the original functions\n    this.$MongoClient = MongoClient;\n    const $prototypeConnect = (this.$prototypeConnect = MongoClient.prototype.connect);\n\n    const instrumentation = this;\n    MongoClient.prototype.connect = function(callback) {\n      this.s.options.monitorCommands = true;\n      this.on('commandStarted', event => instrumentation.emit('started', event));\n      this.on('commandSucceeded', event => instrumentation.emit('succeeded', event));\n      this.on('commandFailed', event => instrumentation.emit('failed', event));\n      return $prototypeConnect.call(this, callback);\n    };\n\n    if (typeof callback === 'function') callback(null, this);\n  }\n\n  uninstrument() {\n    this.$MongoClient.prototype.connect = this.$prototypeConnect;\n  }\n}\n\nmodule.exports = Instrumentation;\n"]},"metadata":{},"sourceType":"script"}