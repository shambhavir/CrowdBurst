{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Logger = require('../connection/logger');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar dns = require('dns');\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\n\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  var regex = /^.*?\\./;\n  var srv = \".\".concat(srvAddress.replace(regex, ''));\n  var parent = \".\".concat(parentDomain.replace(regex, ''));\n  return srv.endsWith(parent);\n}\n\nvar SrvPollingEvent = /*#__PURE__*/function () {\n  function SrvPollingEvent(srvRecords) {\n    _classCallCheck(this, SrvPollingEvent);\n\n    this.srvRecords = srvRecords;\n  }\n\n  _createClass(SrvPollingEvent, [{\n    key: \"addresses\",\n    value: function addresses() {\n      return new Set(this.srvRecords.map(function (record) {\n        return \"\".concat(record.name, \":\").concat(record.port);\n      }));\n    }\n  }]);\n\n  return SrvPollingEvent;\n}();\n\nvar SrvPoller = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SrvPoller, _EventEmitter);\n\n  var _super = _createSuper(SrvPoller);\n\n  /**\n   * @param {object} options\n   * @param {string} options.srvHost\n   * @param {number} [options.heartbeatFrequencyMS]\n   * @param {function} [options.logger]\n   * @param {string} [options.loggerLevel]\n   */\n  function SrvPoller(options) {\n    var _this;\n\n    _classCallCheck(this, SrvPoller);\n\n    _this = _super.call(this);\n\n    if (!options || !options.srvHost) {\n      throw new TypeError('options for SrvPoller must exist and include srvHost');\n    }\n\n    _this.srvHost = options.srvHost;\n    _this.rescanSrvIntervalMS = 60000;\n    _this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n    _this.logger = Logger('srvPoller', options);\n    _this.haMode = false;\n    _this.generation = 0;\n    _this._timeout = null;\n    return _this;\n  }\n\n  _createClass(SrvPoller, [{\n    key: \"start\",\n    value: function start() {\n      if (!this._timeout) {\n        this.schedule();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n        this.generation += 1;\n        this._timeout = null;\n      }\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule() {\n      var _this2 = this;\n\n      clearTimeout(this._timeout);\n      this._timeout = setTimeout(function () {\n        return _this2._poll();\n      }, this.intervalMS);\n    }\n  }, {\n    key: \"success\",\n    value: function success(srvRecords) {\n      this.haMode = false;\n      this.schedule();\n      this.emit('srvRecordDiscovery', new SrvPollingEvent(srvRecords));\n    }\n  }, {\n    key: \"failure\",\n    value: function failure(message, obj) {\n      this.logger.warn(message, obj);\n      this.haMode = true;\n      this.schedule();\n    }\n  }, {\n    key: \"parentDomainMismatch\",\n    value: function parentDomainMismatch(srvRecord) {\n      this.logger.warn(\"parent domain mismatch on SRV record (\".concat(srvRecord.name, \":\").concat(srvRecord.port, \")\"), srvRecord);\n    }\n  }, {\n    key: \"_poll\",\n    value: function _poll() {\n      var _this3 = this;\n\n      var generation = this.generation;\n      dns.resolveSrv(this.srvAddress, function (err, srvRecords) {\n        if (generation !== _this3.generation) {\n          return;\n        }\n\n        if (err) {\n          _this3.failure('DNS error', err);\n\n          return;\n        }\n\n        var finalAddresses = [];\n        srvRecords.forEach(function (record) {\n          if (matchesParentDomain(record.name, _this3.srvHost)) {\n            finalAddresses.push(record);\n          } else {\n            _this3.parentDomainMismatch(record);\n          }\n        });\n\n        if (!finalAddresses.length) {\n          _this3.failure('No valid addresses found at host');\n\n          return;\n        }\n\n        _this3.success(finalAddresses);\n      });\n    }\n  }, {\n    key: \"srvAddress\",\n    get: function get() {\n      return \"_mongodb._tcp.\".concat(this.srvHost);\n    }\n  }, {\n    key: \"intervalMS\",\n    get: function get() {\n      return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n  }]);\n\n  return SrvPoller;\n}(EventEmitter);\n\nmodule.exports.SrvPollingEvent = SrvPollingEvent;\nmodule.exports.SrvPoller = SrvPoller;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/sdam/srv_polling.js"],"names":["Logger","require","EventEmitter","dns","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","SrvPollingEvent","srvRecords","Set","map","record","name","port","SrvPoller","options","srvHost","TypeError","rescanSrvIntervalMS","heartbeatFrequencyMS","logger","haMode","generation","_timeout","schedule","clearTimeout","setTimeout","_poll","intervalMS","emit","message","obj","warn","srvRecord","resolveSrv","err","failure","finalAddresses","forEach","push","parentDomainMismatch","length","success","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Logger = require('../connection/logger');\nconst EventEmitter = require('events').EventEmitter;\nconst dns = require('dns');\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  addresses() {\n    return new Set(this.srvRecords.map(record => `${record.name}:${record.port}`));\n  }\n}\n\nclass SrvPoller extends EventEmitter {\n  /**\n   * @param {object} options\n   * @param {string} options.srvHost\n   * @param {number} [options.heartbeatFrequencyMS]\n   * @param {function} [options.logger]\n   * @param {string} [options.loggerLevel]\n   */\n  constructor(options) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new TypeError('options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n    this.logger = Logger('srvPoller', options);\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = null;\n  }\n\n  get srvAddress() {\n    return `_mongodb._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = null;\n    }\n  }\n\n  schedule() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit('srvRecordDiscovery', new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(\n      `parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`,\n      srvRecord\n    );\n  }\n\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses = [];\n      srvRecords.forEach(record => {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      });\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n}\n\nmodule.exports.SrvPollingEvent = SrvPollingEvent;\nmodule.exports.SrvPoller = SrvPoller;\n"]},"metadata":{},"sourceType":"script"}