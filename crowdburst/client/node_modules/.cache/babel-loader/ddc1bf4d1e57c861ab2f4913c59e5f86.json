{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Denque = require('denque');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Logger = require('../core/connection/logger');\n\nvar makeCounter = require('../utils').makeCounter;\n\nvar MongoError = require('../core/error').MongoError;\n\nvar Connection = require('./connection').Connection;\n\nvar eachAsync = require('../core/utils').eachAsync;\n\nvar connect = require('../core/connection/connect');\n\nvar relayEvents = require('../core/utils').relayEvents;\n\nvar errors = require('./errors');\n\nvar PoolClosedError = errors.PoolClosedError;\nvar WaitQueueTimeoutError = errors.WaitQueueTimeoutError;\n\nvar events = require('./events');\n\nvar ConnectionPoolCreatedEvent = events.ConnectionPoolCreatedEvent;\nvar ConnectionPoolClosedEvent = events.ConnectionPoolClosedEvent;\nvar ConnectionCreatedEvent = events.ConnectionCreatedEvent;\nvar ConnectionReadyEvent = events.ConnectionReadyEvent;\nvar ConnectionClosedEvent = events.ConnectionClosedEvent;\nvar ConnectionCheckOutStartedEvent = events.ConnectionCheckOutStartedEvent;\nvar ConnectionCheckOutFailedEvent = events.ConnectionCheckOutFailedEvent;\nvar ConnectionCheckedOutEvent = events.ConnectionCheckedOutEvent;\nvar ConnectionCheckedInEvent = events.ConnectionCheckedInEvent;\nvar ConnectionPoolClearedEvent = events.ConnectionPoolClearedEvent;\nvar kLogger = Symbol('logger');\nvar kConnections = Symbol('connections');\nvar kPermits = Symbol('permits');\nvar kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\nvar kGeneration = Symbol('generation');\nvar kConnectionCounter = Symbol('connectionCounter');\nvar kCancellationToken = Symbol('cancellationToken');\nvar kWaitQueue = Symbol('waitQueue');\nvar kCancelled = Symbol('cancelled');\nvar VALID_POOL_OPTIONS = new Set([// `connect` options\n'ssl', 'bson', 'connectionType', 'monitorCommands', 'socketTimeout', 'credentials', 'compression', // node Net options\n'host', 'port', 'localAddress', 'localPort', 'family', 'hints', 'lookup', 'path', // node TLS options\n'ca', 'cert', 'sigalgs', 'ciphers', 'clientCertEngine', 'crl', 'dhparam', 'ecdhCurve', 'honorCipherOrder', 'key', 'privateKeyEngine', 'privateKeyIdentifier', 'maxVersion', 'minVersion', 'passphrase', 'pfx', 'secureOptions', 'secureProtocol', 'sessionIdContext', 'allowHalfOpen', 'rejectUnauthorized', 'pskCallback', 'ALPNProtocols', 'servername', 'checkServerIdentity', 'session', 'minDHSize', 'secureContext', // spec options\n'maxPoolSize', 'minPoolSize', 'maxIdleTimeMS', 'waitQueueTimeoutMS']);\n\nfunction resolveOptions(options, defaults) {\n  var newOptions = Array.from(VALID_POOL_OPTIONS).reduce(function (obj, key) {\n    if (options.hasOwnProperty(key)) {\n      obj[key] = options[key];\n    }\n\n    return obj;\n  }, {});\n  return Object.freeze(Object.assign({}, defaults, newOptions));\n}\n/**\n * Configuration options for drivers wrapping the node driver.\n *\n * @typedef {Object} ConnectionPoolOptions\n * @property\n * @property {string} [host] The host to connect to\n * @property {number} [port] The port to connect to\n * @property {bson} [bson] The BSON instance to use for new connections\n * @property {number} [maxPoolSize=100] The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.\n * @property {number} [minPoolSize=0] The minimum number of connections that MUST exist at any moment in a single connection pool.\n * @property {number} [maxIdleTimeMS] The maximum amount of time a connection should remain idle in the connection pool before being marked idle.\n * @property {number} [waitQueueTimeoutMS=0] The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.\n */\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n *\n * @property {number} generation An integer representing the SDAM generation of the pool\n * @property {number} totalConnectionCount An integer expressing how many total connections (active + in use) the pool currently has\n * @property {number} availableConnectionCount An integer expressing how many connections are currently available in the pool.\n * @property {string} address The address of the endpoint the pool is connected to\n *\n * @emits ConnectionPool#connectionPoolCreated\n * @emits ConnectionPool#connectionPoolClosed\n * @emits ConnectionPool#connectionCreated\n * @emits ConnectionPool#connectionReady\n * @emits ConnectionPool#connectionClosed\n * @emits ConnectionPool#connectionCheckOutStarted\n * @emits ConnectionPool#connectionCheckOutFailed\n * @emits ConnectionPool#connectionCheckedOut\n * @emits ConnectionPool#connectionCheckedIn\n * @emits ConnectionPool#connectionPoolCleared\n */\n\n\nvar ConnectionPool = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(ConnectionPool, _EventEmitter);\n\n  var _super = _createSuper(ConnectionPool);\n\n  /**\n   * Create a new Connection Pool\n   *\n   * @param {ConnectionPoolOptions} options\n   */\n  function ConnectionPool(options) {\n    var _this;\n\n    _classCallCheck(this, ConnectionPool);\n\n    _this = _super.call(this);\n    options = options || {};\n    _this.closed = false;\n    _this.options = resolveOptions(options, {\n      connectionType: Connection,\n      maxPoolSize: typeof options.maxPoolSize === 'number' ? options.maxPoolSize : 100,\n      minPoolSize: typeof options.minPoolSize === 'number' ? options.minPoolSize : 0,\n      maxIdleTimeMS: typeof options.maxIdleTimeMS === 'number' ? options.maxIdleTimeMS : 0,\n      waitQueueTimeoutMS: typeof options.waitQueueTimeoutMS === 'number' ? options.waitQueueTimeoutMS : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (options.minSize > options.maxSize) {\n      throw new TypeError('Connection pool minimum size must not be greater than maxiumum pool size');\n    }\n\n    _this[kLogger] = Logger('ConnectionPool', options);\n    _this[kConnections] = new Denque();\n    _this[kPermits] = _this.options.maxPoolSize;\n    _this[kMinPoolSizeTimer] = undefined;\n    _this[kGeneration] = 0;\n    _this[kConnectionCounter] = makeCounter(1);\n    _this[kCancellationToken] = new EventEmitter();\n\n    _this[kCancellationToken].setMaxListeners(Infinity);\n\n    _this[kWaitQueue] = new Denque();\n    process.nextTick(function () {\n      _this.emit('connectionPoolCreated', new ConnectionPoolCreatedEvent(_assertThisInitialized(_this)));\n\n      ensureMinPoolSize(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  _createClass(ConnectionPool, [{\n    key: \"checkOut\",\n\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     *\n     * @param {ConnectionPool~checkOutCallback} callback\n     */\n    value: function checkOut(callback) {\n      this.emit('connectionCheckOutStarted', new ConnectionCheckOutStartedEvent(this));\n\n      if (this.closed) {\n        this.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n        callback(new PoolClosedError(this));\n        return;\n      } // add this request to the wait queue\n\n\n      var waitQueueMember = {\n        callback: callback\n      };\n      var pool = this;\n      var waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n      if (waitQueueTimeoutMS) {\n        waitQueueMember.timer = setTimeout(function () {\n          waitQueueMember[kCancelled] = true;\n          waitQueueMember.timer = undefined;\n          pool.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(pool, 'timeout'));\n          waitQueueMember.callback(new WaitQueueTimeoutError(pool));\n        }, waitQueueTimeoutMS);\n      } // place the member at the end of the wait queue\n\n\n      this[kWaitQueue].push(waitQueueMember); // process the wait queue\n\n      processWaitQueue(this);\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param {Connection} connection The connection to check in\n     */\n\n  }, {\n    key: \"checkIn\",\n    value: function checkIn(connection) {\n      var poolClosed = this.closed;\n      var stale = connectionIsStale(this, connection);\n      var willDestroy = !!(poolClosed || stale || connection.closed); // Properly adjust state of connection\n\n      if (!willDestroy) {\n        connection.markAvailable();\n        this[kConnections].push(connection);\n      }\n\n      this.emit('connectionCheckedIn', new ConnectionCheckedInEvent(this, connection));\n\n      if (willDestroy) {\n        var reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n        destroyConnection(this, connection, reason);\n      }\n\n      processWaitQueue(this);\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this[kGeneration] += 1;\n      this.emit('connectionPoolCleared', new ConnectionPoolClearedEvent(this));\n    }\n    /**\n     * Close the pool\n     *\n     * @param {object} [options] Optional settings\n     * @param {boolean} [options.force] Force close connections\n     * @param {Function} callback\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(options, callback) {\n      var _this2 = this;\n\n      if (typeof options === 'function') {\n        callback = options;\n      }\n\n      options = Object.assign({\n        force: false\n      }, options);\n\n      if (this.closed) {\n        return callback();\n      } // immediately cancel any in-flight connections\n\n\n      this[kCancellationToken].emit('cancel'); // drain the wait queue\n\n      while (this.waitQueueSize) {\n        var waitQueueMember = this[kWaitQueue].pop();\n        clearTimeout(waitQueueMember.timer);\n\n        if (!waitQueueMember[kCancelled]) {\n          waitQueueMember.callback(new MongoError('connection pool closed'));\n        }\n      } // clear the min pool size timer\n\n\n      if (this[kMinPoolSizeTimer]) {\n        clearTimeout(this[kMinPoolSizeTimer]);\n      } // end the connection counter\n\n\n      if (typeof this[kConnectionCounter].return === 'function') {\n        this[kConnectionCounter].return();\n      } // mark the pool as closed immediately\n\n\n      this.closed = true;\n      eachAsync(this[kConnections].toArray(), function (conn, cb) {\n        _this2.emit('connectionClosed', new ConnectionClosedEvent(_this2, conn, 'poolClosed'));\n\n        conn.destroy(options, cb);\n      }, function (err) {\n        _this2[kConnections].clear();\n\n        _this2.emit('connectionPoolClosed', new ConnectionPoolClosedEvent(_this2));\n\n        callback(err);\n      });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @param {ConnectionPool~withConnectionCallback} fn A function which operates on a managed connection\n     * @param {Function} callback The original callback\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"withConnection\",\n    value: function withConnection(fn, callback) {\n      var _this3 = this;\n\n      this.checkOut(function (err, conn) {\n        // don't callback with `err` here, we might want to act upon it inside `fn`\n        fn(err, conn, function (fnErr, result) {\n          if (typeof callback === 'function') {\n            if (fnErr) {\n              callback(fnErr);\n            } else {\n              callback(undefined, result);\n            }\n          }\n\n          if (conn) {\n            _this3.checkIn(conn);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return \"\".concat(this.options.host, \":\").concat(this.options.port);\n    }\n  }, {\n    key: \"generation\",\n    get: function get() {\n      return this[kGeneration];\n    }\n  }, {\n    key: \"totalConnectionCount\",\n    get: function get() {\n      return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n    }\n  }, {\n    key: \"availableConnectionCount\",\n    get: function get() {\n      return this[kConnections].length;\n    }\n  }, {\n    key: \"waitQueueSize\",\n    get: function get() {\n      return this[kWaitQueue].length;\n    }\n  }]);\n\n  return ConnectionPool;\n}(EventEmitter);\n\nfunction ensureMinPoolSize(pool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  var minPoolSize = pool.options.minPoolSize;\n\n  for (var i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(function () {\n    return ensureMinPoolSize(pool);\n  }, 10);\n}\n\nfunction connectionIsStale(pool, connection) {\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool, connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool, callback) {\n  var connectOptions = Object.assign({\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration]\n  }, pool.options);\n  pool[kPermits]--;\n  connect(connectOptions, pool[kCancellationToken], function (err, connection) {\n    if (err) {\n      pool[kPermits]++;\n      pool[kLogger].debug(\"connection attempt failed with error [\".concat(JSON.stringify(err), \"]\"));\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    } // The pool might have closed since we started trying to create a connection\n\n\n    if (pool.closed) {\n      connection.destroy({\n        force: true\n      });\n      return;\n    } // forward all events from the connection to the pool\n\n\n    relayEvents(connection, pool, ['commandStarted', 'commandFailed', 'commandSucceeded', 'clusterTimeReceived']);\n    pool.emit('connectionCreated', new ConnectionCreatedEvent(pool, connection));\n    connection.markAvailable();\n    pool.emit('connectionReady', new ConnectionReadyEvent(pool, connection)); // if a callback has been provided, check out the connection immediately\n\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    } // otherwise add it to the pool for later acquisition, and try to process the wait queue\n\n\n    pool[kConnections].push(connection);\n    processWaitQueue(pool);\n  });\n}\n\nfunction destroyConnection(pool, connection, reason) {\n  pool.emit('connectionClosed', new ConnectionClosedEvent(pool, connection, reason)); // allow more connections to be created\n\n  pool[kPermits]++; // destroy the connection\n\n  process.nextTick(function () {\n    return connection.destroy();\n  });\n}\n\nfunction processWaitQueue(pool) {\n  if (pool.closed) {\n    return;\n  }\n\n  while (pool.waitQueueSize) {\n    var waitQueueMember = pool[kWaitQueue].peekFront();\n\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n\n    var connection = pool[kConnections].shift();\n    var isStale = connectionIsStale(pool, connection);\n    var isIdle = connectionIsIdle(pool, connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit('connectionCheckedOut', new ConnectionCheckedOutEvent(pool, connection));\n      clearTimeout(waitQueueMember.timer);\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n      return;\n    }\n\n    var reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    destroyConnection(pool, connection, reason);\n  }\n\n  var maxPoolSize = pool.options.maxPoolSize;\n\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, function (err, connection) {\n      var waitQueueMember = pool[kWaitQueue].shift();\n\n      if (waitQueueMember == null) {\n        if (err == null) {\n          pool[kConnections].push(connection);\n        }\n\n        return;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        return;\n      }\n\n      if (err) {\n        pool.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(pool, err));\n      } else {\n        pool.emit('connectionCheckedOut', new ConnectionCheckedOutEvent(pool, connection));\n      }\n\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(err, connection);\n    });\n    return;\n  }\n}\n/**\n * A callback provided to `withConnection`\n *\n * @callback ConnectionPool~withConnectionCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Connection} connection The managed connection which was checked out of the pool.\n * @param {Function} callback A function to call back after connection management is complete\n */\n\n/**\n * A callback provided to `checkOut`\n *\n * @callback ConnectionPool~checkOutCallback\n * @param {MongoError} error An error instance representing the error during checkout\n * @param {Connection} connection A connection from the pool\n */\n\n/**\n * Emitted once when the connection pool is created\n *\n * @event ConnectionPool#connectionPoolCreated\n * @type {PoolCreatedEvent}\n */\n\n/**\n * Emitted once when the connection pool is closed\n *\n * @event ConnectionPool#connectionPoolClosed\n * @type {PoolClosedEvent}\n */\n\n/**\n * Emitted each time a connection is created\n *\n * @event ConnectionPool#connectionCreated\n * @type {ConnectionCreatedEvent}\n */\n\n/**\n * Emitted when a connection becomes established, and is ready to use\n *\n * @event ConnectionPool#connectionReady\n * @type {ConnectionReadyEvent}\n */\n\n/**\n * Emitted when a connection is closed\n *\n * @event ConnectionPool#connectionClosed\n * @type {ConnectionClosedEvent}\n */\n\n/**\n * Emitted when an attempt to check out a connection begins\n *\n * @event ConnectionPool#connectionCheckOutStarted\n * @type {ConnectionCheckOutStartedEvent}\n */\n\n/**\n * Emitted when an attempt to check out a connection fails\n *\n * @event ConnectionPool#connectionCheckOutFailed\n * @type {ConnectionCheckOutFailedEvent}\n */\n\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n *\n * @event ConnectionPool#connectionCheckedOut\n * @type {ConnectionCheckedOutEvent}\n */\n\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n *\n * @event ConnectionPool#connectionCheckedIn\n * @type {ConnectionCheckedInEvent}\n */\n\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n *\n * @event ConnectionPool#connectionPoolCleared\n * @type {PoolClearedEvent}\n */\n\n\nmodule.exports = {\n  ConnectionPool: ConnectionPool\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/cmap/connection_pool.js"],"names":["Denque","require","EventEmitter","Logger","makeCounter","MongoError","Connection","eachAsync","connect","relayEvents","errors","PoolClosedError","WaitQueueTimeoutError","events","ConnectionPoolCreatedEvent","ConnectionPoolClosedEvent","ConnectionCreatedEvent","ConnectionReadyEvent","ConnectionClosedEvent","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","kLogger","Symbol","kConnections","kPermits","kMinPoolSizeTimer","kGeneration","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","VALID_POOL_OPTIONS","Set","resolveOptions","options","defaults","newOptions","Array","from","reduce","obj","key","hasOwnProperty","Object","freeze","assign","ConnectionPool","closed","connectionType","maxPoolSize","minPoolSize","maxIdleTimeMS","waitQueueTimeoutMS","autoEncrypter","metadata","minSize","maxSize","TypeError","undefined","setMaxListeners","Infinity","process","nextTick","emit","ensureMinPoolSize","callback","waitQueueMember","pool","timer","setTimeout","push","processWaitQueue","connection","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","reason","destroyConnection","force","waitQueueSize","pop","clearTimeout","return","toArray","conn","cb","destroy","err","clear","fn","checkOut","fnErr","result","checkIn","host","port","length","i","totalConnectionCount","createConnection","generation","connectionIsIdle","idleTime","connectOptions","id","next","value","debug","JSON","stringify","peekFront","shift","availableConnectionCount","isStale","isIdle","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Denque = require('denque');\nconst EventEmitter = require('events').EventEmitter;\nconst Logger = require('../core/connection/logger');\nconst makeCounter = require('../utils').makeCounter;\nconst MongoError = require('../core/error').MongoError;\nconst Connection = require('./connection').Connection;\nconst eachAsync = require('../core/utils').eachAsync;\nconst connect = require('../core/connection/connect');\nconst relayEvents = require('../core/utils').relayEvents;\n\nconst errors = require('./errors');\nconst PoolClosedError = errors.PoolClosedError;\nconst WaitQueueTimeoutError = errors.WaitQueueTimeoutError;\n\nconst events = require('./events');\nconst ConnectionPoolCreatedEvent = events.ConnectionPoolCreatedEvent;\nconst ConnectionPoolClosedEvent = events.ConnectionPoolClosedEvent;\nconst ConnectionCreatedEvent = events.ConnectionCreatedEvent;\nconst ConnectionReadyEvent = events.ConnectionReadyEvent;\nconst ConnectionClosedEvent = events.ConnectionClosedEvent;\nconst ConnectionCheckOutStartedEvent = events.ConnectionCheckOutStartedEvent;\nconst ConnectionCheckOutFailedEvent = events.ConnectionCheckOutFailedEvent;\nconst ConnectionCheckedOutEvent = events.ConnectionCheckedOutEvent;\nconst ConnectionCheckedInEvent = events.ConnectionCheckedInEvent;\nconst ConnectionPoolClearedEvent = events.ConnectionPoolClearedEvent;\n\nconst kLogger = Symbol('logger');\nconst kConnections = Symbol('connections');\nconst kPermits = Symbol('permits');\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\nconst kGeneration = Symbol('generation');\nconst kConnectionCounter = Symbol('connectionCounter');\nconst kCancellationToken = Symbol('cancellationToken');\nconst kWaitQueue = Symbol('waitQueue');\nconst kCancelled = Symbol('cancelled');\n\nconst VALID_POOL_OPTIONS = new Set([\n  // `connect` options\n  'ssl',\n  'bson',\n  'connectionType',\n  'monitorCommands',\n  'socketTimeout',\n  'credentials',\n  'compression',\n\n  // node Net options\n  'host',\n  'port',\n  'localAddress',\n  'localPort',\n  'family',\n  'hints',\n  'lookup',\n  'path',\n\n  // node TLS options\n  'ca',\n  'cert',\n  'sigalgs',\n  'ciphers',\n  'clientCertEngine',\n  'crl',\n  'dhparam',\n  'ecdhCurve',\n  'honorCipherOrder',\n  'key',\n  'privateKeyEngine',\n  'privateKeyIdentifier',\n  'maxVersion',\n  'minVersion',\n  'passphrase',\n  'pfx',\n  'secureOptions',\n  'secureProtocol',\n  'sessionIdContext',\n  'allowHalfOpen',\n  'rejectUnauthorized',\n  'pskCallback',\n  'ALPNProtocols',\n  'servername',\n  'checkServerIdentity',\n  'session',\n  'minDHSize',\n  'secureContext',\n\n  // spec options\n  'maxPoolSize',\n  'minPoolSize',\n  'maxIdleTimeMS',\n  'waitQueueTimeoutMS'\n]);\n\nfunction resolveOptions(options, defaults) {\n  const newOptions = Array.from(VALID_POOL_OPTIONS).reduce((obj, key) => {\n    if (options.hasOwnProperty(key)) {\n      obj[key] = options[key];\n    }\n\n    return obj;\n  }, {});\n\n  return Object.freeze(Object.assign({}, defaults, newOptions));\n}\n\n/**\n * Configuration options for drivers wrapping the node driver.\n *\n * @typedef {Object} ConnectionPoolOptions\n * @property\n * @property {string} [host] The host to connect to\n * @property {number} [port] The port to connect to\n * @property {bson} [bson] The BSON instance to use for new connections\n * @property {number} [maxPoolSize=100] The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.\n * @property {number} [minPoolSize=0] The minimum number of connections that MUST exist at any moment in a single connection pool.\n * @property {number} [maxIdleTimeMS] The maximum amount of time a connection should remain idle in the connection pool before being marked idle.\n * @property {number} [waitQueueTimeoutMS=0] The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.\n */\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n *\n * @property {number} generation An integer representing the SDAM generation of the pool\n * @property {number} totalConnectionCount An integer expressing how many total connections (active + in use) the pool currently has\n * @property {number} availableConnectionCount An integer expressing how many connections are currently available in the pool.\n * @property {string} address The address of the endpoint the pool is connected to\n *\n * @emits ConnectionPool#connectionPoolCreated\n * @emits ConnectionPool#connectionPoolClosed\n * @emits ConnectionPool#connectionCreated\n * @emits ConnectionPool#connectionReady\n * @emits ConnectionPool#connectionClosed\n * @emits ConnectionPool#connectionCheckOutStarted\n * @emits ConnectionPool#connectionCheckOutFailed\n * @emits ConnectionPool#connectionCheckedOut\n * @emits ConnectionPool#connectionCheckedIn\n * @emits ConnectionPool#connectionPoolCleared\n */\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create a new Connection Pool\n   *\n   * @param {ConnectionPoolOptions} options\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    this.closed = false;\n    this.options = resolveOptions(options, {\n      connectionType: Connection,\n      maxPoolSize: typeof options.maxPoolSize === 'number' ? options.maxPoolSize : 100,\n      minPoolSize: typeof options.minPoolSize === 'number' ? options.minPoolSize : 0,\n      maxIdleTimeMS: typeof options.maxIdleTimeMS === 'number' ? options.maxIdleTimeMS : 0,\n      waitQueueTimeoutMS:\n        typeof options.waitQueueTimeoutMS === 'number' ? options.waitQueueTimeoutMS : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (options.minSize > options.maxSize) {\n      throw new TypeError(\n        'Connection pool minimum size must not be greater than maxiumum pool size'\n      );\n    }\n\n    this[kLogger] = Logger('ConnectionPool', options);\n    this[kConnections] = new Denque();\n    this[kPermits] = this.options.maxPoolSize;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new EventEmitter();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n\n    process.nextTick(() => {\n      this.emit('connectionPoolCreated', new ConnectionPoolCreatedEvent(this));\n      ensureMinPoolSize(this);\n    });\n  }\n\n  get address() {\n    return `${this.options.host}:${this.options.port}`;\n  }\n\n  get generation() {\n    return this[kGeneration];\n  }\n\n  get totalConnectionCount() {\n    return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n  }\n\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   *\n   * @param {ConnectionPool~checkOutCallback} callback\n   */\n  checkOut(callback) {\n    this.emit('connectionCheckOutStarted', new ConnectionCheckOutStartedEvent(this));\n\n    if (this.closed) {\n      this.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n      callback(new PoolClosedError(this));\n      return;\n    }\n\n    // add this request to the wait queue\n    const waitQueueMember = { callback };\n\n    const pool = this;\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n\n        pool.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(pool, 'timeout'));\n        waitQueueMember.callback(new WaitQueueTimeoutError(pool));\n      }, waitQueueTimeoutMS);\n    }\n\n    // place the member at the end of the wait queue\n    this[kWaitQueue].push(waitQueueMember);\n\n    // process the wait queue\n    processWaitQueue(this);\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param {Connection} connection The connection to check in\n   */\n  checkIn(connection) {\n    const poolClosed = this.closed;\n    const stale = connectionIsStale(this, connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    // Properly adjust state of connection\n    if (!willDestroy) {\n      connection.markAvailable();\n\n      this[kConnections].push(connection);\n    }\n\n    this.emit('connectionCheckedIn', new ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      destroyConnection(this, connection, reason);\n    }\n\n    processWaitQueue(this);\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear() {\n    this[kGeneration] += 1;\n    this.emit('connectionPoolCleared', new ConnectionPoolClearedEvent(this));\n  }\n\n  /**\n   * Close the pool\n   *\n   * @param {object} [options] Optional settings\n   * @param {boolean} [options.force] Force close connections\n   * @param {Function} callback\n   */\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this.closed) {\n      return callback();\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // drain the wait queue\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n      clearTimeout(waitQueueMember.timer);\n      if (!waitQueueMember[kCancelled]) {\n        waitQueueMember.callback(new MongoError('connection pool closed'));\n      }\n    }\n\n    // clear the min pool size timer\n    if (this[kMinPoolSizeTimer]) {\n      clearTimeout(this[kMinPoolSizeTimer]);\n    }\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return();\n    }\n\n    // mark the pool as closed immediately\n    this.closed = true;\n\n    eachAsync(\n      this[kConnections].toArray(),\n      (conn, cb) => {\n        this.emit('connectionClosed', new ConnectionClosedEvent(this, conn, 'poolClosed'));\n        conn.destroy(options, cb);\n      },\n      err => {\n        this[kConnections].clear();\n        this.emit('connectionPoolClosed', new ConnectionPoolClosedEvent(this));\n        callback(err);\n      }\n    );\n  }\n\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @param {ConnectionPool~withConnectionCallback} fn A function which operates on a managed connection\n   * @param {Function} callback The original callback\n   * @return {Promise}\n   */\n  withConnection(fn, callback) {\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n}\n\nfunction ensureMinPoolSize(pool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  const minPoolSize = pool.options.minPoolSize;\n  for (let i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(() => ensureMinPoolSize(pool), 10);\n}\n\nfunction connectionIsStale(pool, connection) {\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool, connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool, callback) {\n  const connectOptions = Object.assign(\n    {\n      id: pool[kConnectionCounter].next().value,\n      generation: pool[kGeneration]\n    },\n    pool.options\n  );\n\n  pool[kPermits]--;\n  connect(connectOptions, pool[kCancellationToken], (err, connection) => {\n    if (err) {\n      pool[kPermits]++;\n      pool[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    }\n\n    // The pool might have closed since we started trying to create a connection\n    if (pool.closed) {\n      connection.destroy({ force: true });\n      return;\n    }\n\n    // forward all events from the connection to the pool\n    relayEvents(connection, pool, [\n      'commandStarted',\n      'commandFailed',\n      'commandSucceeded',\n      'clusterTimeReceived'\n    ]);\n\n    pool.emit('connectionCreated', new ConnectionCreatedEvent(pool, connection));\n\n    connection.markAvailable();\n    pool.emit('connectionReady', new ConnectionReadyEvent(pool, connection));\n\n    // if a callback has been provided, check out the connection immediately\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    }\n\n    // otherwise add it to the pool for later acquisition, and try to process the wait queue\n    pool[kConnections].push(connection);\n    processWaitQueue(pool);\n  });\n}\n\nfunction destroyConnection(pool, connection, reason) {\n  pool.emit('connectionClosed', new ConnectionClosedEvent(pool, connection, reason));\n\n  // allow more connections to be created\n  pool[kPermits]++;\n\n  // destroy the connection\n  process.nextTick(() => connection.destroy());\n}\n\nfunction processWaitQueue(pool) {\n  if (pool.closed) {\n    return;\n  }\n\n  while (pool.waitQueueSize) {\n    const waitQueueMember = pool[kWaitQueue].peekFront();\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n\n    const connection = pool[kConnections].shift();\n    const isStale = connectionIsStale(pool, connection);\n    const isIdle = connectionIsIdle(pool, connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit('connectionCheckedOut', new ConnectionCheckedOutEvent(pool, connection));\n      clearTimeout(waitQueueMember.timer);\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n      return;\n    }\n\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    destroyConnection(pool, connection, reason);\n  }\n\n  const maxPoolSize = pool.options.maxPoolSize;\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, (err, connection) => {\n      const waitQueueMember = pool[kWaitQueue].shift();\n      if (waitQueueMember == null) {\n        if (err == null) {\n          pool[kConnections].push(connection);\n        }\n\n        return;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        return;\n      }\n\n      if (err) {\n        pool.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(pool, err));\n      } else {\n        pool.emit('connectionCheckedOut', new ConnectionCheckedOutEvent(pool, connection));\n      }\n\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(err, connection);\n    });\n\n    return;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n *\n * @callback ConnectionPool~withConnectionCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Connection} connection The managed connection which was checked out of the pool.\n * @param {Function} callback A function to call back after connection management is complete\n */\n\n/**\n * A callback provided to `checkOut`\n *\n * @callback ConnectionPool~checkOutCallback\n * @param {MongoError} error An error instance representing the error during checkout\n * @param {Connection} connection A connection from the pool\n */\n\n/**\n * Emitted once when the connection pool is created\n *\n * @event ConnectionPool#connectionPoolCreated\n * @type {PoolCreatedEvent}\n */\n\n/**\n * Emitted once when the connection pool is closed\n *\n * @event ConnectionPool#connectionPoolClosed\n * @type {PoolClosedEvent}\n */\n\n/**\n * Emitted each time a connection is created\n *\n * @event ConnectionPool#connectionCreated\n * @type {ConnectionCreatedEvent}\n */\n\n/**\n * Emitted when a connection becomes established, and is ready to use\n *\n * @event ConnectionPool#connectionReady\n * @type {ConnectionReadyEvent}\n */\n\n/**\n * Emitted when a connection is closed\n *\n * @event ConnectionPool#connectionClosed\n * @type {ConnectionClosedEvent}\n */\n\n/**\n * Emitted when an attempt to check out a connection begins\n *\n * @event ConnectionPool#connectionCheckOutStarted\n * @type {ConnectionCheckOutStartedEvent}\n */\n\n/**\n * Emitted when an attempt to check out a connection fails\n *\n * @event ConnectionPool#connectionCheckOutFailed\n * @type {ConnectionCheckOutFailedEvent}\n */\n\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n *\n * @event ConnectionPool#connectionCheckedOut\n * @type {ConnectionCheckedOutEvent}\n */\n\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n *\n * @event ConnectionPool#connectionCheckedIn\n * @type {ConnectionCheckedInEvent}\n */\n\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n *\n * @event ConnectionPool#connectionPoolCleared\n * @type {PoolClearedEvent}\n */\n\nmodule.exports = {\n  ConnectionPool\n};\n"]},"metadata":{},"sourceType":"script"}