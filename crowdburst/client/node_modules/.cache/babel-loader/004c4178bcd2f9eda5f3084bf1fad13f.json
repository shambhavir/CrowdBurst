{"ast":null,"code":"'use strict'; // Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar opcodes = require('../wireprotocol/shared').opcodes;\n\nvar databaseNamespace = require('../wireprotocol/shared').databaseNamespace;\n\nvar ReadPreference = require('../topologies/read_preference'); // Incrementing request id\n\n\nvar _requestId = 0; // Msg Flags\n\nvar OPTS_CHECKSUM_PRESENT = 1;\nvar OPTS_MORE_TO_COME = 2;\nvar OPTS_EXHAUST_ALLOWED = 1 << 16;\n\nvar Msg = /*#__PURE__*/function () {\n  function Msg(bson, ns, command, options) {\n    _classCallCheck(this, Msg);\n\n    // Basic options needed to be passed in\n    if (command == null) throw new Error('query must be specified for query'); // Basic options\n\n    this.bson = bson;\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = databaseNamespace(ns);\n\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    } // Ensure empty options\n\n\n    this.options = options || {}; // Additional options\n\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId(); // Serialization option\n\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16; // flags\n\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed = typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  _createClass(Msg, [{\n    key: \"toBin\",\n    value: function toBin() {\n      var buffers = [];\n      var flags = 0;\n\n      if (this.checksumPresent) {\n        flags |= OPTS_CHECKSUM_PRESENT;\n      }\n\n      if (this.moreToCome) {\n        flags |= OPTS_MORE_TO_COME;\n      }\n\n      if (this.exhaustAllowed) {\n        flags |= OPTS_EXHAUST_ALLOWED;\n      }\n\n      var header = Buffer.alloc(4 * 4 + // Header\n      4 // Flags\n      );\n      buffers.push(header);\n      var totalLength = header.length;\n      var command = this.command;\n      totalLength += this.makeDocumentSegment(buffers, command);\n      header.writeInt32LE(totalLength, 0); // messageLength\n\n      header.writeInt32LE(this.requestId, 4); // requestID\n\n      header.writeInt32LE(0, 8); // responseTo\n\n      header.writeInt32LE(opcodes.OP_MSG, 12); // opCode\n\n      header.writeUInt32LE(flags, 16); // flags\n\n      return buffers;\n    }\n  }, {\n    key: \"makeDocumentSegment\",\n    value: function makeDocumentSegment(buffers, document) {\n      var payloadTypeBuffer = Buffer.alloc(1);\n      payloadTypeBuffer[0] = 0;\n      var documentBuffer = this.serializeBson(document);\n      buffers.push(payloadTypeBuffer);\n      buffers.push(documentBuffer);\n      return payloadTypeBuffer.length + documentBuffer.length;\n    }\n  }, {\n    key: \"serializeBson\",\n    value: function serializeBson(document) {\n      return this.bson.serialize(document, {\n        checkKeys: this.checkKeys,\n        serializeFunctions: this.serializeFunctions,\n        ignoreUndefined: this.ignoreUndefined\n      });\n    }\n  }]);\n\n  return Msg;\n}();\n\nMsg.getRequestId = function () {\n  _requestId = _requestId + 1 & 0x7fffffff;\n  return _requestId;\n};\n\nvar BinMsg = /*#__PURE__*/function () {\n  function BinMsg(bson, message, msgHeader, msgBody, opts) {\n    _classCallCheck(this, BinMsg);\n\n    opts = opts || {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false\n    };\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.bson = bson;\n    this.opts = opts; // Read the message header\n\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed; // Read response flags\n\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n    this.documents = [];\n  }\n\n  _createClass(BinMsg, [{\n    key: \"isParsed\",\n    value: function isParsed() {\n      return this.parsed;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(options) {\n      // Don't parse again if not needed\n      if (this.parsed) return;\n      options = options || {};\n      this.index = 4; // Allow the return of raw documents instead of parsing\n\n      var raw = options.raw || false;\n      var documentsReturnedIn = options.documentsReturnedIn || null;\n      var promoteLongs = typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n      var promoteValues = typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n      var promoteBuffers = typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : this.opts.promoteBuffers; // Set up the options\n\n      var _options = {\n        promoteLongs: promoteLongs,\n        promoteValues: promoteValues,\n        promoteBuffers: promoteBuffers\n      };\n\n      while (this.index < this.data.length) {\n        var payloadType = this.data.readUInt8(this.index++);\n\n        if (payloadType === 1) {\n          console.error('TYPE 1');\n        } else if (payloadType === 0) {\n          var bsonSize = this.data.readUInt32LE(this.index);\n          var bin = this.data.slice(this.index, this.index + bsonSize);\n          this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));\n          this.index += bsonSize;\n        }\n      }\n\n      if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n        var fieldsAsRaw = {};\n        fieldsAsRaw[documentsReturnedIn] = true;\n        _options.fieldsAsRaw = fieldsAsRaw;\n        var doc = this.bson.deserialize(this.documents[0], _options);\n        this.documents = [doc];\n      }\n\n      this.parsed = true;\n    }\n  }]);\n\n  return BinMsg;\n}();\n\nmodule.exports = {\n  Msg: Msg,\n  BinMsg: BinMsg\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/connection/msg.js"],"names":["Buffer","require","opcodes","databaseNamespace","ReadPreference","_requestId","OPTS_CHECKSUM_PRESENT","OPTS_MORE_TO_COME","OPTS_EXHAUST_ALLOWED","Msg","bson","ns","command","options","Error","$db","readPreference","mode","PRIMARY","$readPreference","toJSON","requestId","getRequestId","serializeFunctions","ignoreUndefined","checkKeys","maxBsonSize","checksumPresent","moreToCome","exhaustAllowed","buffers","flags","header","alloc","push","totalLength","length","makeDocumentSegment","writeInt32LE","OP_MSG","writeUInt32LE","document","payloadTypeBuffer","documentBuffer","serializeBson","serialize","BinMsg","message","msgHeader","msgBody","opts","promoteLongs","promoteValues","promoteBuffers","parsed","raw","data","responseTo","opCode","fromCompressed","responseFlags","readInt32LE","documents","index","documentsReturnedIn","_options","payloadType","readUInt8","console","error","bsonSize","readUInt32LE","bin","slice","deserialize","fieldsAsRaw","doc","module","exports"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,IAAME,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAP,CAAkCC,OAAlD;;AACA,IAAMC,iBAAiB,GAAGF,OAAO,CAAC,wBAAD,CAAP,CAAkCE,iBAA5D;;AACA,IAAMC,cAAc,GAAGH,OAAO,CAAC,+BAAD,CAA9B,C,CAEA;;;AACA,IAAII,UAAU,GAAG,CAAjB,C,CAEA;;AACA,IAAMC,qBAAqB,GAAG,CAA9B;AACA,IAAMC,iBAAiB,GAAG,CAA1B;AACA,IAAMC,oBAAoB,GAAG,KAAK,EAAlC;;IAEMC,G;AACJ,eAAYC,IAAZ,EAAkBC,EAAlB,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AAAA;;AACtC;AACA,QAAID,OAAO,IAAI,IAAf,EAAqB,MAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN,CAFiB,CAItC;;AACA,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKA,OAAL,CAAaG,GAAb,GAAmBZ,iBAAiB,CAACQ,EAAD,CAApC;;AAEA,QAAIE,OAAO,CAACG,cAAR,IAA0BH,OAAO,CAACG,cAAR,CAAuBC,IAAvB,KAAgCb,cAAc,CAACc,OAA7E,EAAsF;AACpF,WAAKN,OAAL,CAAaO,eAAb,GAA+BN,OAAO,CAACG,cAAR,CAAuBI,MAAvB,EAA/B;AACD,KAZqC,CActC;;;AACA,SAAKP,OAAL,GAAeA,OAAO,IAAI,EAA1B,CAfsC,CAiBtC;;AACA,SAAKQ,SAAL,GAAiBR,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAA5B,GAAwCZ,GAAG,CAACa,YAAJ,EAAzD,CAlBsC,CAoBtC;;AACA,SAAKC,kBAAL,GACE,OAAOV,OAAO,CAACU,kBAAf,KAAsC,SAAtC,GAAkDV,OAAO,CAACU,kBAA1D,GAA+E,KADjF;AAEA,SAAKC,eAAL,GACE,OAAOX,OAAO,CAACW,eAAf,KAAmC,SAAnC,GAA+CX,OAAO,CAACW,eAAvD,GAAyE,KAD3E;AAEA,SAAKC,SAAL,GAAiB,OAAOZ,OAAO,CAACY,SAAf,KAA6B,SAA7B,GAAyCZ,OAAO,CAACY,SAAjD,GAA6D,KAA9E;AACA,SAAKC,WAAL,GAAmBb,OAAO,CAACa,WAAR,IAAuB,OAAO,IAAP,GAAc,EAAxD,CA1BsC,CA4BtC;;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,UAAL,GAAkBf,OAAO,CAACe,UAAR,IAAsB,KAAxC;AACA,SAAKC,cAAL,GACE,OAAOhB,OAAO,CAACgB,cAAf,KAAkC,SAAlC,GAA8ChB,OAAO,CAACgB,cAAtD,GAAuE,KADzE;AAED;;;;4BAEO;AACN,UAAMC,OAAO,GAAG,EAAhB;AACA,UAAIC,KAAK,GAAG,CAAZ;;AAEA,UAAI,KAAKJ,eAAT,EAA0B;AACxBI,QAAAA,KAAK,IAAIzB,qBAAT;AACD;;AAED,UAAI,KAAKsB,UAAT,EAAqB;AACnBG,QAAAA,KAAK,IAAIxB,iBAAT;AACD;;AAED,UAAI,KAAKsB,cAAT,EAAyB;AACvBE,QAAAA,KAAK,IAAIvB,oBAAT;AACD;;AAED,UAAMwB,MAAM,GAAGhC,MAAM,CAACiC,KAAP,CACb,IAAI,CAAJ,GAAQ;AACN,OAFW,CAET;AAFS,OAAf;AAKAH,MAAAA,OAAO,CAACI,IAAR,CAAaF,MAAb;AAEA,UAAIG,WAAW,GAAGH,MAAM,CAACI,MAAzB;AACA,UAAMxB,OAAO,GAAG,KAAKA,OAArB;AACAuB,MAAAA,WAAW,IAAI,KAAKE,mBAAL,CAAyBP,OAAzB,EAAkClB,OAAlC,CAAf;AAEAoB,MAAAA,MAAM,CAACM,YAAP,CAAoBH,WAApB,EAAiC,CAAjC,EA3BM,CA2B+B;;AACrCH,MAAAA,MAAM,CAACM,YAAP,CAAoB,KAAKjB,SAAzB,EAAoC,CAApC,EA5BM,CA4BkC;;AACxCW,MAAAA,MAAM,CAACM,YAAP,CAAoB,CAApB,EAAuB,CAAvB,EA7BM,CA6BqB;;AAC3BN,MAAAA,MAAM,CAACM,YAAP,CAAoBpC,OAAO,CAACqC,MAA5B,EAAoC,EAApC,EA9BM,CA8BmC;;AACzCP,MAAAA,MAAM,CAACQ,aAAP,CAAqBT,KAArB,EAA4B,EAA5B,EA/BM,CA+B2B;;AACjC,aAAOD,OAAP;AACD;;;wCAEmBA,O,EAASW,Q,EAAU;AACrC,UAAMC,iBAAiB,GAAG1C,MAAM,CAACiC,KAAP,CAAa,CAAb,CAA1B;AACAS,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,CAAvB;AAEA,UAAMC,cAAc,GAAG,KAAKC,aAAL,CAAmBH,QAAnB,CAAvB;AACAX,MAAAA,OAAO,CAACI,IAAR,CAAaQ,iBAAb;AACAZ,MAAAA,OAAO,CAACI,IAAR,CAAaS,cAAb;AAEA,aAAOD,iBAAiB,CAACN,MAAlB,GAA2BO,cAAc,CAACP,MAAjD;AACD;;;kCAEaK,Q,EAAU;AACtB,aAAO,KAAK/B,IAAL,CAAUmC,SAAV,CAAoBJ,QAApB,EAA8B;AACnChB,QAAAA,SAAS,EAAE,KAAKA,SADmB;AAEnCF,QAAAA,kBAAkB,EAAE,KAAKA,kBAFU;AAGnCC,QAAAA,eAAe,EAAE,KAAKA;AAHa,OAA9B,CAAP;AAKD;;;;;;AAGHf,GAAG,CAACa,YAAJ,GAAmB,YAAW;AAC5BjB,EAAAA,UAAU,GAAIA,UAAU,GAAG,CAAd,GAAmB,UAAhC;AACA,SAAOA,UAAP;AACD,CAHD;;IAKMyC,M;AACJ,kBAAYpC,IAAZ,EAAkBqC,OAAlB,EAA2BC,SAA3B,EAAsCC,OAAtC,EAA+CC,IAA/C,EAAqD;AAAA;;AACnDA,IAAAA,IAAI,GAAGA,IAAI,IAAI;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,aAAa,EAAE,IAArC;AAA2CC,MAAAA,cAAc,EAAE;AAA3D,KAAf;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,GAAL,GAAWR,OAAX;AACA,SAAKS,IAAL,GAAYP,OAAZ;AACA,SAAKvC,IAAL,GAAYA,IAAZ;AACA,SAAKwC,IAAL,GAAYA,IAAZ,CANmD,CAQnD;;AACA,SAAKd,MAAL,GAAcY,SAAS,CAACZ,MAAxB;AACA,SAAKf,SAAL,GAAiB2B,SAAS,CAAC3B,SAA3B;AACA,SAAKoC,UAAL,GAAkBT,SAAS,CAACS,UAA5B;AACA,SAAKC,MAAL,GAAcV,SAAS,CAACU,MAAxB;AACA,SAAKC,cAAL,GAAsBX,SAAS,CAACW,cAAhC,CAbmD,CAenD;;AACA,SAAKC,aAAL,GAAqBX,OAAO,CAACY,WAAR,CAAoB,CAApB,CAArB;AACA,SAAKlC,eAAL,GAAuB,CAAC,KAAKiC,aAAL,GAAqBtD,qBAAtB,MAAiD,CAAxE;AACA,SAAKsB,UAAL,GAAkB,CAAC,KAAKgC,aAAL,GAAqBrD,iBAAtB,MAA6C,CAA/D;AACA,SAAKsB,cAAL,GAAsB,CAAC,KAAK+B,aAAL,GAAqBpD,oBAAtB,MAAgD,CAAtE;AACA,SAAK2C,YAAL,GAAoB,OAAOD,IAAI,CAACC,YAAZ,KAA6B,SAA7B,GAAyCD,IAAI,CAACC,YAA9C,GAA6D,IAAjF;AACA,SAAKC,aAAL,GAAqB,OAAOF,IAAI,CAACE,aAAZ,KAA8B,SAA9B,GAA0CF,IAAI,CAACE,aAA/C,GAA+D,IAApF;AACA,SAAKC,cAAL,GAAsB,OAAOH,IAAI,CAACG,cAAZ,KAA+B,SAA/B,GAA2CH,IAAI,CAACG,cAAhD,GAAiE,KAAvF;AAEA,SAAKS,SAAL,GAAiB,EAAjB;AACD;;;;+BAEU;AACT,aAAO,KAAKR,MAAZ;AACD;;;0BAEKzC,O,EAAS;AACb;AACA,UAAI,KAAKyC,MAAT,EAAiB;AACjBzC,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,WAAKkD,KAAL,GAAa,CAAb,CALa,CAMb;;AACA,UAAMR,GAAG,GAAG1C,OAAO,CAAC0C,GAAR,IAAe,KAA3B;AACA,UAAMS,mBAAmB,GAAGnD,OAAO,CAACmD,mBAAR,IAA+B,IAA3D;AACA,UAAMb,YAAY,GAChB,OAAOtC,OAAO,CAACsC,YAAf,KAAgC,SAAhC,GAA4CtC,OAAO,CAACsC,YAApD,GAAmE,KAAKD,IAAL,CAAUC,YAD/E;AAEA,UAAMC,aAAa,GACjB,OAAOvC,OAAO,CAACuC,aAAf,KAAiC,SAAjC,GAA6CvC,OAAO,CAACuC,aAArD,GAAqE,KAAKF,IAAL,CAAUE,aADjF;AAEA,UAAMC,cAAc,GAClB,OAAOxC,OAAO,CAACwC,cAAf,KAAkC,SAAlC,GACIxC,OAAO,CAACwC,cADZ,GAEI,KAAKH,IAAL,CAAUG,cAHhB,CAba,CAkBb;;AACA,UAAMY,QAAQ,GAAG;AACfd,QAAAA,YAAY,EAAEA,YADC;AAEfC,QAAAA,aAAa,EAAEA,aAFA;AAGfC,QAAAA,cAAc,EAAEA;AAHD,OAAjB;;AAMA,aAAO,KAAKU,KAAL,GAAa,KAAKP,IAAL,CAAUpB,MAA9B,EAAsC;AACpC,YAAM8B,WAAW,GAAG,KAAKV,IAAL,CAAUW,SAAV,CAAoB,KAAKJ,KAAL,EAApB,CAApB;;AACA,YAAIG,WAAW,KAAK,CAApB,EAAuB;AACrBE,UAAAA,OAAO,CAACC,KAAR,CAAc,QAAd;AACD,SAFD,MAEO,IAAIH,WAAW,KAAK,CAApB,EAAuB;AAC5B,cAAMI,QAAQ,GAAG,KAAKd,IAAL,CAAUe,YAAV,CAAuB,KAAKR,KAA5B,CAAjB;AACA,cAAMS,GAAG,GAAG,KAAKhB,IAAL,CAAUiB,KAAV,CAAgB,KAAKV,KAArB,EAA4B,KAAKA,KAAL,GAAaO,QAAzC,CAAZ;AACA,eAAKR,SAAL,CAAe5B,IAAf,CAAoBqB,GAAG,GAAGiB,GAAH,GAAS,KAAK9D,IAAL,CAAUgE,WAAV,CAAsBF,GAAtB,EAA2BP,QAA3B,CAAhC;AAEA,eAAKF,KAAL,IAAcO,QAAd;AACD;AACF;;AAED,UAAI,KAAKR,SAAL,CAAe1B,MAAf,KAA0B,CAA1B,IAA+B4B,mBAAmB,IAAI,IAAtD,IAA8DT,GAAlE,EAAuE;AACrE,YAAMoB,WAAW,GAAG,EAApB;AACAA,QAAAA,WAAW,CAACX,mBAAD,CAAX,GAAmC,IAAnC;AACAC,QAAAA,QAAQ,CAACU,WAAT,GAAuBA,WAAvB;AAEA,YAAMC,GAAG,GAAG,KAAKlE,IAAL,CAAUgE,WAAV,CAAsB,KAAKZ,SAAL,CAAe,CAAf,CAAtB,EAAyCG,QAAzC,CAAZ;AACA,aAAKH,SAAL,GAAiB,CAACc,GAAD,CAAjB;AACD;;AAED,WAAKtB,MAAL,GAAc,IAAd;AACD;;;;;;AAGHuB,MAAM,CAACC,OAAP,GAAiB;AAAErE,EAAAA,GAAG,EAAHA,GAAF;AAAOqC,EAAAA,MAAM,EAANA;AAAP,CAAjB","sourcesContent":["'use strict';\n\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n\nconst Buffer = require('safe-buffer').Buffer;\nconst opcodes = require('../wireprotocol/shared').opcodes;\nconst databaseNamespace = require('../wireprotocol/shared').databaseNamespace;\nconst ReadPreference = require('../topologies/read_preference');\n\n// Incrementing request id\nlet _requestId = 0;\n\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n\nclass Msg {\n  constructor(bson, ns, command, options) {\n    // Basic options needed to be passed in\n    if (command == null) throw new Error('query must be specified for query');\n\n    // Basic options\n    this.bson = bson;\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = databaseNamespace(ns);\n\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    }\n\n    // Ensure empty options\n    this.options = options || {};\n\n    // Additional options\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId();\n\n    // Serialization option\n    this.serializeFunctions =\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined =\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n\n    // flags\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed =\n      typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(\n      4 * 4 + // Header\n        4 // Flags\n    );\n\n    buffers.push(header);\n\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n\n    header.writeInt32LE(totalLength, 0); // messageLength\n    header.writeInt32LE(this.requestId, 4); // requestID\n    header.writeInt32LE(0, 8); // responseTo\n    header.writeInt32LE(opcodes.OP_MSG, 12); // opCode\n    header.writeUInt32LE(flags, 16); // flags\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document) {\n    return this.bson.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n}\n\nMsg.getRequestId = function() {\n  _requestId = (_requestId + 1) & 0x7fffffff;\n  return _requestId;\n};\n\nclass BinMsg {\n  constructor(bson, message, msgHeader, msgBody, opts) {\n    opts = opts || { promoteLongs: true, promoteValues: true, promoteBuffers: false };\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.bson = bson;\n    this.opts = opts;\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Read response flags\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n\n    this.documents = [];\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options || {};\n\n    this.index = 4;\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs =\n      typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n    const promoteValues =\n      typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n    const promoteBuffers =\n      typeof options.promoteBuffers === 'boolean'\n        ? options.promoteBuffers\n        : this.opts.promoteBuffers;\n\n    // Set up the options\n    const _options = {\n      promoteLongs: promoteLongs,\n      promoteValues: promoteValues,\n      promoteBuffers: promoteBuffers\n    };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n      if (payloadType === 1) {\n        console.error('TYPE 1');\n      } else if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));\n\n        this.index += bsonSize;\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n\n      const doc = this.bson.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n}\n\nmodule.exports = { Msg, BinMsg };\n"]},"metadata":{},"sourceType":"script"}