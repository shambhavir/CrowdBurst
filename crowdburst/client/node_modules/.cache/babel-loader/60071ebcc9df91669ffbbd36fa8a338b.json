{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar CommandOperation = require('./command');\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar crypto = require('crypto');\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar toError = require('../utils').toError;\n\nvar AddUserOperation = /*#__PURE__*/function (_CommandOperation) {\n  _inherits(AddUserOperation, _CommandOperation);\n\n  var _super = _createSuper(AddUserOperation);\n\n  function AddUserOperation(db, username, password, options) {\n    var _this;\n\n    _classCallCheck(this, AddUserOperation);\n\n    _this = _super.call(this, db, options);\n    _this.username = username;\n    _this.password = password;\n    return _this;\n  }\n\n  _createClass(AddUserOperation, [{\n    key: \"_buildCommand\",\n    value: function _buildCommand() {\n      var db = this.db;\n      var username = this.username;\n      var password = this.password;\n      var options = this.options; // Get additional values\n\n      var roles = Array.isArray(options.roles) ? options.roles : []; // If not roles defined print deprecated message\n      // TODO: handle deprecation properly\n\n      if (roles.length === 0) {\n        console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n      } // Check the db name and add roles if needed\n\n\n      if ((db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') && !Array.isArray(options.roles)) {\n        roles = ['root'];\n      } else if (!Array.isArray(options.roles)) {\n        roles = ['dbOwner'];\n      }\n\n      var digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;\n      var userPassword = password;\n\n      if (!digestPassword) {\n        // Use node md5 generator\n        var md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(username + ':mongo:' + password);\n        userPassword = md5.digest('hex');\n      } // Build the command to execute\n\n\n      var command = {\n        createUser: username,\n        customData: options.customData || {},\n        roles: roles,\n        digestPassword: digestPassword\n      }; // No password\n\n      if (typeof password === 'string') {\n        command.pwd = userPassword;\n      }\n\n      return command;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(callback) {\n      var options = this.options; // Error out if digestPassword set\n\n      if (options.digestPassword != null) {\n        return callback(toError(\"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"));\n      } // Attempt to execute auth command\n\n\n      _get(_getPrototypeOf(AddUserOperation.prototype), \"execute\", this).call(this, function (err, r) {\n        if (!err) {\n          return handleCallback(callback, err, r);\n        }\n\n        return handleCallback(callback, err, null);\n      });\n    }\n  }]);\n\n  return AddUserOperation;\n}(CommandOperation);\n\ndefineAspects(AddUserOperation, Aspect.WRITE_OPERATION);\nmodule.exports = AddUserOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/add_user.js"],"names":["Aspect","require","CommandOperation","defineAspects","crypto","handleCallback","toError","AddUserOperation","db","username","password","options","roles","Array","isArray","length","console","log","databaseName","toLowerCase","dbName","digestPassword","s","topology","lastIsMaster","maxWireVersion","userPassword","md5","createHash","update","digest","command","createUser","customData","pwd","callback","err","r","WRITE_OPERATION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst CommandOperation = require('./command');\nconst defineAspects = require('./operation').defineAspects;\nconst crypto = require('crypto');\nconst handleCallback = require('../utils').handleCallback;\nconst toError = require('../utils').toError;\n\nclass AddUserOperation extends CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n\n    this.username = username;\n    this.password = password;\n  }\n\n  _buildCommand() {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n\n    // Get additional values\n    let roles = Array.isArray(options.roles) ? options.roles : [];\n\n    // If not roles defined print deprecated message\n    // TODO: handle deprecation properly\n    if (roles.length === 0) {\n      console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n    }\n\n    // Check the db name and add roles if needed\n    if (\n      (db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') &&\n      !Array.isArray(options.roles)\n    ) {\n      roles = ['root'];\n    } else if (!Array.isArray(options.roles)) {\n      roles = ['dbOwner'];\n    }\n\n    const digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;\n\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + ':mongo:' + password);\n      userPassword = md5.digest('hex');\n    }\n\n    // Build the command to execute\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    return command;\n  }\n\n  execute(callback) {\n    const options = this.options;\n\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(\n        toError(\n          \"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"\n        )\n      );\n    }\n\n    // Attempt to execute auth command\n    super.execute((err, r) => {\n      if (!err) {\n        return handleCallback(callback, err, r);\n      }\n\n      return handleCallback(callback, err, null);\n    });\n  }\n}\n\ndefineAspects(AddUserOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = AddUserOperation;\n"]},"metadata":{},"sourceType":"script"}