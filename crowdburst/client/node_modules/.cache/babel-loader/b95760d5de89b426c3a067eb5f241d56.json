{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/client/src/Components/Form2.js\";\nimport React, { Component } from 'react'; // import axios from 'axios';\n\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport List2 from './List2'; //import { render } from 'react-dom';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql'\n  })\n}); // const app = require('express'); \n\nclass Form2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [this.addItem = this.addItem.bind(this)]\n    }; // this.addItem = this.addItem.bind(this)\n  }\n\n  addItem(e) {\n    // Prevent button click from submitting form\n    e.preventDefault(); // Create variables for our list, the item to add, and our form\n\n    let list = this.state.list;\n    const newItem = document.getElementById(\"addInput\");\n    const form = document.getElementById(\"addItemForm\"); // If our input has a value\n\n    if (newItem.value != \"\") {\n      // Add the new item to the end of our list array\n      list.push(newItem.value); // Then we use that to set the state for list\n\n      this.setState({\n        list: list\n      }); // Finally, we need to reset the form\n\n      newItem.classList.remove(\"is-danger\");\n      form.reset();\n    } else {\n      // If the input doesn't have a value, make the border red since it's required\n      newItem.classList.add(\"is-danger\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(List2, {\n      items: this.state.list,\n      delete: this.removeItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      id: \"addItemForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      id: \"addInput\",\n      placeholder: \"How's the crowd, parking, etc?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button is-info\",\n      onClick: this.addItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"Add Note\")))));\n  }\n\n}\n\nexport default Form2; // class Form2 extends React.Component {\n//   // initialize our state\n//   state = {\n//     data: [],\n//     id: 0,\n//     message: null,\n//     intervalIsSet: false,\n//     idToDelete: null,\n//     idToUpdate: null,\n//     objectToUpdate: null,\n//   };\n// //   const App3 = () => {\n// //   // export default App3(\n// //   //   {\n// //   //     state = {\n// //   //       data: [],\n// //   //       id: 0,\n// //   //       message: null,\n// //   //       intervalIsSet: false,\n// //   //       idToDelete: null,\n// //   //       idToUpdate: null,\n// //   //       objectToUpdate: null,\n// //   //     }\n// //   //   }\n// //   // ); \n// //   // const App3  =  \n// //   //   `\n// //   //   state = {\n// //   //     data: [],\n// //   //     id: 0,\n// //   //     message: null,\n// //   //     intervalIsSet: false,\n// //   //     idToDelete: null,\n// //   //     idToUpdate: null,\n// //   //     objectToUpdate: null,\n// //   //     `; \n// //   // when component mounts, first thing it does is fetch all existing data in our db\n// //   // then we incorporate a polling logic so that we can easily see if our db has\n// //   // changed and implement those changes into our UI\n//   componentDidMount() {\n//     this.getDataFromDb();\n//     if (!this.state.intervalIsSet) {\n//       let interval = setInterval(this.getDataFromDb, 1000);\n//       this.setState({ intervalIsSet: interval });\n//     }\n//   }\n// //   // never let a process live forever\n// //   // always kill a process everytime we are done using it\n//   componentWillUnmount() {\n//     if (this.state.intervalIsSet) {\n//       clearInterval(this.state.intervalIsSet);\n//       this.setState({ intervalIsSet: null });\n//     }\n//   }\n// //   // just a note, here, in the front end, we use the id key of our data object\n// //   // in order to identify which we want to Update or delete.\n// //   // for our back end, we use the object id assigned by MongoDB to modify\n// //   // data base entries\n// //   // our first get method that uses our backend api to\n// //   // fetch data from our data base\n//   getDataFromDb = () => {\n//     fetch('http://localhost:3001/api/getData')\n//       .then((data) => data.json())\n//       .then((res) => this.setState({ data: res.data }));\n//   };\n// //   // // // our put method that uses our backend api\n// //   // // // to create new query into our data base\n//   putDataToDB = (message) => {\n//     let currentIds = this.state.data.map((data) => data.id);\n//     let idToBeAdded = 0;\n//     while (currentIds.includes(idToBeAdded)) {\n//       ++idToBeAdded;\n//     }\n//     axios.post('http://localhost:3001/api/putData', {\n//       id: idToBeAdded,\n//       message: message,\n//     });\n//   };\n// //   // our delete method that uses our backend api\n// //   // to remove existing database information\n//   deleteFromDB = (idTodelete) => {\n//     parseInt(idTodelete);\n//     let objIdToDelete = null;\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idTodelete) {\n//         objIdToDelete = dat._id;\n//       }\n//     });\n//     axios.delete('http://localhost:3001/api/deleteData', {\n//       data: {\n//         id: objIdToDelete,\n//       },\n//     });\n//   };\n// //   // our update method that uses our backend api\n// //   // to overwrite existing data base information\n//   updateDB = (idToUpdate, updateToApply) => {\n//     let objIdToUpdate = null;\n//     parseInt(idToUpdate);\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idToUpdate) {\n//         objIdToUpdate = dat._id;\n//       }\n//     });\n//     axios.post('http://localhost:3001/api/updateData', {\n//       id: objIdToUpdate,\n//       update: { message: updateToApply },\n//     });\n//   };\n// //   // here is our UI\n// //   // it is easy to understand their functions when you\n// //   // see them render into our screen\n//   render() {\n//     const { data } = this.state;\n//     return (\n//       <div>\n//         <ul>\n//           {data.length <= 0\n//             ? 'NO DB ENTRIES YET'\n//             : data.map((dat) => (\n//                 <li style={{ padding: '10px' }} key={data.message}>\n//                   <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n//                   <span style={{ color: 'gray' }}> data: </span>\n//                   {dat.message}\n//                 </li>\n//               ))}\n//         </ul>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             onChange={(e) => this.setState({ message: e.target.value })}\n//             placeholder=\"add something in the database\"\n//             style={{ width: '200px' }}\n//           />\n//           <button onClick={() => this.putDataToDB(this.state.message)}>\n//             ADD\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToDelete: e.target.value })}\n//             placeholder=\"put id of item to delete here\"\n//           />\n//           <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n//             DELETE\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n//             placeholder=\"id of item to update here\"\n//           />\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ updateToApply: e.target.value })}\n//             placeholder=\"put new value of the item here\"\n//           />\n//           <button\n//             onClick={() =>\n//               this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n//             }\n//           >\n//             UPDATE\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// export default Form2","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/Components/Form2.js"],"names":["React","Component","ApolloClient","HttpLink","InMemoryCache","List2","client","cache","link","uri","Form2","constructor","props","state","list","addItem","bind","e","preventDefault","newItem","document","getElementById","form","value","push","setState","classList","remove","reset","add","render","removeItem"],"mappings":"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":["import React, {Component} from 'react';\n// import axios from 'axios';\n\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'; \nimport List2 from './List2'; \n\n//import { render } from 'react-dom';\n\n\nconst client = new ApolloClient(\n    {\n      cache: new InMemoryCache(),\n      link: new HttpLink({\n        uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n      })\n    }\n  ); \n\n// const app = require('express'); \n\nclass Form2 extends React.Component {\n    \n\nconstructor(props)\n{\n    super(props)\n    this.state = \n    {\n        list: \n        [\n          this.addItem = this.addItem.bind(this)\n\n        ]\n    }\n\n    \n\n    // this.addItem = this.addItem.bind(this)\n\n}\n\naddItem(e) {\n  // Prevent button click from submitting form\n  e.preventDefault();\n\n  // Create variables for our list, the item to add, and our form\n  let list = this.state.list;\n  const newItem = document.getElementById(\"addInput\");\n  const form = document.getElementById(\"addItemForm\");\n  \n\n\n\n\n  // If our input has a value\n  if (newItem.value != \"\") {\n    // Add the new item to the end of our list array\n    list.push(newItem.value);\n    // Then we use that to set the state for list\n    this.setState({\n      list: list\n    });\n    // Finally, we need to reset the form\n    newItem.classList.remove(\"is-danger\");\n    form.reset();\n  } else {\n    // If the input doesn't have a value, make the border red since it's required\n    newItem.classList.add(\"is-danger\");\n  }\n}\n\n\n\n\n\n\nrender() {\n    return (\n      <div className=\"content\">\n        <div className=\"container\">\n          <section className=\"section\">\n          <List2 items={this.state.list} delete={this.removeItem} />\n          </section>\n          <hr />\n    <section className=\"section\">\n      <form className=\"form\" id=\"addItemForm\">\n        <input type=\"text\" className=\"input\" id=\"addInput\" placeholder=\"How's the crowd, parking, etc?\" />\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Note\n        </button>\n      </form>\n      {/* <form className = \"form\" id = \"addItemForm\">\n        <input type = \"text\" className = \"input\" id=\"addInput\" placeholder=\"Address\"/>\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Address\n        </button>\n      </form> */}\n    </section>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Form2\n\n// class Form2 extends React.Component {\n//   // initialize our state\n//   state = {\n//     data: [],\n//     id: 0,\n//     message: null,\n//     intervalIsSet: false,\n//     idToDelete: null,\n//     idToUpdate: null,\n//     objectToUpdate: null,\n//   };\n\n// //   const App3 = () => {\n\n// //   // export default App3(\n// //   //   {\n// //   //     state = {\n// //   //       data: [],\n// //   //       id: 0,\n// //   //       message: null,\n// //   //       intervalIsSet: false,\n// //   //       idToDelete: null,\n// //   //       idToUpdate: null,\n// //   //       objectToUpdate: null,\n// //   //     }\n// //   //   }\n// //   // ); \n\n// //   // const App3  =  \n// //   //   `\n// //   //   state = {\n// //   //     data: [],\n// //   //     id: 0,\n// //   //     message: null,\n// //   //     intervalIsSet: false,\n// //   //     idToDelete: null,\n// //   //     idToUpdate: null,\n// //   //     objectToUpdate: null,\n// //   //     `; \n  \n\n// //   // when component mounts, first thing it does is fetch all existing data in our db\n// //   // then we incorporate a polling logic so that we can easily see if our db has\n// //   // changed and implement those changes into our UI\n//   componentDidMount() {\n//     this.getDataFromDb();\n//     if (!this.state.intervalIsSet) {\n//       let interval = setInterval(this.getDataFromDb, 1000);\n//       this.setState({ intervalIsSet: interval });\n//     }\n//   }\n\n// //   // never let a process live forever\n// //   // always kill a process everytime we are done using it\n//   componentWillUnmount() {\n//     if (this.state.intervalIsSet) {\n//       clearInterval(this.state.intervalIsSet);\n//       this.setState({ intervalIsSet: null });\n//     }\n//   }\n\n// //   // just a note, here, in the front end, we use the id key of our data object\n// //   // in order to identify which we want to Update or delete.\n// //   // for our back end, we use the object id assigned by MongoDB to modify\n// //   // data base entries\n\n// //   // our first get method that uses our backend api to\n// //   // fetch data from our data base\n//   getDataFromDb = () => {\n//     fetch('http://localhost:3001/api/getData')\n//       .then((data) => data.json())\n//       .then((res) => this.setState({ data: res.data }));\n//   };\n\n// //   // // // our put method that uses our backend api\n// //   // // // to create new query into our data base\n//   putDataToDB = (message) => {\n//     let currentIds = this.state.data.map((data) => data.id);\n//     let idToBeAdded = 0;\n//     while (currentIds.includes(idToBeAdded)) {\n//       ++idToBeAdded;\n//     }\n\n//     axios.post('http://localhost:3001/api/putData', {\n//       id: idToBeAdded,\n//       message: message,\n//     });\n//   };\n\n// //   // our delete method that uses our backend api\n// //   // to remove existing database information\n//   deleteFromDB = (idTodelete) => {\n//     parseInt(idTodelete);\n//     let objIdToDelete = null;\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idTodelete) {\n//         objIdToDelete = dat._id;\n//       }\n//     });\n\n//     axios.delete('http://localhost:3001/api/deleteData', {\n//       data: {\n//         id: objIdToDelete,\n//       },\n//     });\n//   };\n\n// //   // our update method that uses our backend api\n// //   // to overwrite existing data base information\n//   updateDB = (idToUpdate, updateToApply) => {\n//     let objIdToUpdate = null;\n//     parseInt(idToUpdate);\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idToUpdate) {\n//         objIdToUpdate = dat._id;\n//       }\n//     });\n\n//     axios.post('http://localhost:3001/api/updateData', {\n//       id: objIdToUpdate,\n//       update: { message: updateToApply },\n//     });\n//   };\n\n// //   // here is our UI\n// //   // it is easy to understand their functions when you\n// //   // see them render into our screen\n//   render() {\n//     const { data } = this.state;\n//     return (\n//       <div>\n//         <ul>\n//           {data.length <= 0\n//             ? 'NO DB ENTRIES YET'\n//             : data.map((dat) => (\n//                 <li style={{ padding: '10px' }} key={data.message}>\n//                   <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n//                   <span style={{ color: 'gray' }}> data: </span>\n//                   {dat.message}\n//                 </li>\n//               ))}\n//         </ul>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             onChange={(e) => this.setState({ message: e.target.value })}\n//             placeholder=\"add something in the database\"\n//             style={{ width: '200px' }}\n//           />\n//           <button onClick={() => this.putDataToDB(this.state.message)}>\n//             ADD\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToDelete: e.target.value })}\n//             placeholder=\"put id of item to delete here\"\n//           />\n//           <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n//             DELETE\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n//             placeholder=\"id of item to update here\"\n//           />\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ updateToApply: e.target.value })}\n//             placeholder=\"put new value of the item here\"\n//           />\n//           <button\n//             onClick={() =>\n//               this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n//             }\n//           >\n//             UPDATE\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Form2"]},"metadata":{},"sourceType":"module"}