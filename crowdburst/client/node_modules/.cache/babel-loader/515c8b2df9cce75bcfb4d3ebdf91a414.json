{"ast":null,"code":"import { handleRequestError } from \"../../internal/common/StitchErrorUtils\";\nimport StitchError from \"../../StitchError\";\nimport StitchRequestError from \"../../StitchRequestError\";\nimport { StitchRequestErrorCode } from \"../../StitchRequestErrorCode\";\nimport { BasicRequest } from \"./BasicRequest\";\n\nfunction inspectResponse(request, url, response) {\n  if (response.statusCode >= 200 && response.statusCode < 300) {\n    return response;\n  }\n\n  return handleRequestError(response);\n}\n\nvar BaseStitchRequestClient = function () {\n  function BaseStitchRequestClient(baseUrl, transport) {\n    this.baseUrl = baseUrl;\n    this.transport = transport;\n  }\n\n  BaseStitchRequestClient.prototype.doRequestToURL = function (stitchReq, url) {\n    return this.transport.roundTrip(this.buildRequest(stitchReq, url)).catch(function (error) {\n      throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n    }).then(function (resp) {\n      return inspectResponse(stitchReq, url, resp);\n    });\n  };\n\n  BaseStitchRequestClient.prototype.doStreamRequestToURL = function (stitchReq, url, open, retryRequest) {\n    if (open === void 0) {\n      open = true;\n    }\n\n    return this.transport.stream(this.buildRequest(stitchReq, url), open, retryRequest).catch(function (error) {\n      if (error instanceof StitchError) {\n        throw error;\n      }\n\n      throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n    });\n  };\n\n  BaseStitchRequestClient.prototype.buildRequest = function (stitchReq, url) {\n    return new BasicRequest.Builder().withMethod(stitchReq.method).withUrl(\"\" + url + stitchReq.path).withHeaders(stitchReq.headers).withBody(stitchReq.body).build();\n  };\n\n  return BaseStitchRequestClient;\n}();\n\nexport default BaseStitchRequestClient;","map":{"version":3,"sources":["../../../../src/internal/net/BaseStitchRequestClient.ts"],"names":[],"mappings":"AAiBA,SAAS,kBAAT,QAAmC,wCAAnC;AACA,OAAO,WAAP,MAAwB,mBAAxB;AACA,OAAO,kBAAP,MAA+B,0BAA/B;AACA,SAAS,sBAAT,QAAuC,8BAAvC;AACA,SAAS,YAAT,QAA6B,gBAA7B;;AASA,SAAA,eAAA,CAAyB,OAAzB,EAAiD,GAAjD,EAA8D,QAA9D,EAAgF;AAC9E,MAAI,QAAQ,CAAC,UAAT,IAAuB,GAAvB,IAA8B,QAAQ,CAAC,UAAT,GAAsB,GAAxD,EAA6D;AAC3D,WAAO,QAAP;AACD;;AAED,SAAO,kBAAkB,CAAC,QAAD,CAAzB;AACD;;AAGD,IAAA,uBAAA,GAAA,YAAA;AAIE,WAAA,uBAAA,CAAmB,OAAnB,EAAoC,SAApC,EAAwD;AACtD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAES,EAAA,uBAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,SAAzB,EAAmD,GAAnD,EAA8D;AAC5D,WAAO,KAAK,SAAL,CACJ,SADI,CACM,KAAK,YAAL,CAAkB,SAAlB,EAA6B,GAA7B,CADN,EAEJ,KAFI,CAEE,UAAA,KAAA,EAAK;AACV,YAAM,IAAI,kBAAJ,CACJ,KADI,EAEJ,sBAAsB,CAAC,eAFnB,CAAN;AAID,KAPI,EAQJ,IARI,CAQC,UAAA,IAAA,EAAI;AAAI,aAAA,eAAe,CAAC,SAAD,EAAY,GAAZ,EAAf,IAAe,CAAf;AAAqC,KAR9C,CAAP;AASD,GAVS;;AAYA,EAAA,uBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,UAA+B,SAA/B,EAAyD,GAAzD,EAAsE,IAAtE,EAAmF,YAAnF,EAA4H;AAAtD,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,IAAA;AAAW;;AAC/E,WAAO,KAAK,SAAL,CACJ,MADI,CACG,KAAK,YAAL,CAAkB,SAAlB,EAA6B,GAA7B,CADH,EACsC,IADtC,EAC4C,YAD5C,EAEJ,KAFI,CAEE,UAAA,KAAA,EAAK;AAEV,UAAI,KAAK,YAAY,WAArB,EAAkC;AAC/B,cAAM,KAAN;AACF;;AACD,YAAM,IAAI,kBAAJ,CACJ,KADI,EAEJ,sBAAsB,CAAC,eAFnB,CAAN;AAID,KAXI,CAAP;AAYD,GAbS;;AAeF,EAAA,uBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,SAArB,EAA+C,GAA/C,EAA0D;AACxD,WAAO,IAAI,YAAY,CAAC,OAAjB,GACJ,UADI,CACO,SAAS,CAAC,MADjB,EAEJ,OAFI,CAEI,KAAG,GAAH,GAAS,SAAS,CAAC,IAFvB,EAGJ,WAHI,CAGQ,SAAS,CAAC,OAHlB,EAIJ,QAJI,CAIK,SAAS,CAAC,IAJf,EAKJ,KALI,EAAP;AAMD,GAPO;;AAQV,SAAA,uBAAA;AAAC,CA5CD,EAAA","sourceRoot":"","sourcesContent":["import { handleRequestError } from \"../../internal/common/StitchErrorUtils\";\nimport StitchError from \"../../StitchError\";\nimport StitchRequestError from \"../../StitchRequestError\";\nimport { StitchRequestErrorCode } from \"../../StitchRequestErrorCode\";\nimport { BasicRequest } from \"./BasicRequest\";\nfunction inspectResponse(request, url, response) {\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n        return response;\n    }\n    return handleRequestError(response);\n}\nvar BaseStitchRequestClient = (function () {\n    function BaseStitchRequestClient(baseUrl, transport) {\n        this.baseUrl = baseUrl;\n        this.transport = transport;\n    }\n    BaseStitchRequestClient.prototype.doRequestToURL = function (stitchReq, url) {\n        return this.transport\n            .roundTrip(this.buildRequest(stitchReq, url))\n            .catch(function (error) {\n            throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n        })\n            .then(function (resp) { return inspectResponse(stitchReq, url, resp); });\n    };\n    BaseStitchRequestClient.prototype.doStreamRequestToURL = function (stitchReq, url, open, retryRequest) {\n        if (open === void 0) { open = true; }\n        return this.transport\n            .stream(this.buildRequest(stitchReq, url), open, retryRequest)\n            .catch(function (error) {\n            if (error instanceof StitchError) {\n                throw error;\n            }\n            throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n        });\n    };\n    BaseStitchRequestClient.prototype.buildRequest = function (stitchReq, url) {\n        return new BasicRequest.Builder()\n            .withMethod(stitchReq.method)\n            .withUrl(\"\" + url + stitchReq.path)\n            .withHeaders(stitchReq.headers)\n            .withBody(stitchReq.body)\n            .build();\n    };\n    return BaseStitchRequestClient;\n}());\nexport default BaseStitchRequestClient;\n//# sourceMappingURL=BaseStitchRequestClient.js.map"]},"metadata":{},"sourceType":"module"}