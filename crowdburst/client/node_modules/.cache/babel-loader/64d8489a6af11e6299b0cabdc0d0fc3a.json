{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar CommandOperationV2 = require('./command_v2');\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar maxWireVersion = require('../core/utils').maxWireVersion;\n\nvar CONSTANTS = require('../constants');\n\nvar LIST_COLLECTIONS_WIRE_VERSION = 3;\n\nfunction listCollectionsTransforms(databaseName) {\n  var matching = \"\".concat(databaseName, \".\");\n  return {\n    doc: function doc(_doc) {\n      var index = _doc.name.indexOf(matching); // Remove database name if available\n\n\n      if (_doc.name && index === 0) {\n        _doc.name = _doc.name.substr(index + matching.length);\n      }\n\n      return _doc;\n    }\n  };\n}\n\nvar ListCollectionsOperation = /*#__PURE__*/function (_CommandOperationV) {\n  _inherits(ListCollectionsOperation, _CommandOperationV);\n\n  var _super = _createSuper(ListCollectionsOperation);\n\n  function ListCollectionsOperation(db, filter, options) {\n    var _this;\n\n    _classCallCheck(this, ListCollectionsOperation);\n\n    _this = _super.call(this, db, options, {\n      fullResponse: true\n    });\n    _this.db = db;\n    _this.filter = filter;\n    _this.nameOnly = !!_this.options.nameOnly;\n\n    if (typeof _this.options.batchSize === 'number') {\n      _this.batchSize = _this.options.batchSize;\n    }\n\n    return _this;\n  }\n\n  _createClass(ListCollectionsOperation, [{\n    key: \"execute\",\n    value: function execute(server, callback) {\n      if (maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n        var filter = this.filter;\n        var databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n        if (typeof filter.name === 'string' && !new RegExp('^' + databaseName + '\\\\.').test(filter.name)) {\n          filter = Object.assign({}, filter);\n          filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n        } // No filter, filter by current database\n\n\n        if (filter == null) {\n          filter.name = \"/\".concat(databaseName, \"/\");\n        } // Rewrite the filter to use $and to filter out indexes\n\n\n        if (filter.name) {\n          filter = {\n            $and: [{\n              name: filter.name\n            }, {\n              name: /^((?!\\$).)*$/\n            }]\n          };\n        } else {\n          filter = {\n            name: /^((?!\\$).)*$/\n          };\n        }\n\n        var transforms = listCollectionsTransforms(databaseName);\n        server.query(\"\".concat(databaseName, \".\").concat(CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), {\n          query: filter\n        }, {\n          batchSize: this.batchSize || 1000\n        }, {}, function (err, result) {\n          if (result && result.message && result.message.documents && Array.isArray(result.message.documents)) {\n            result.message.documents = result.message.documents.map(transforms.doc);\n          }\n\n          callback(err, result);\n        });\n        return;\n      }\n\n      var command = {\n        listCollections: 1,\n        filter: this.filter,\n        cursor: this.batchSize ? {\n          batchSize: this.batchSize\n        } : {},\n        nameOnly: this.nameOnly\n      };\n      return _get(_getPrototypeOf(ListCollectionsOperation.prototype), \"executeCommand\", this).call(this, server, command, callback);\n    }\n  }]);\n\n  return ListCollectionsOperation;\n}(CommandOperationV2);\n\ndefineAspects(ListCollectionsOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = ListCollectionsOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/list_collections.js"],"names":["CommandOperationV2","require","Aspect","defineAspects","maxWireVersion","CONSTANTS","LIST_COLLECTIONS_WIRE_VERSION","listCollectionsTransforms","databaseName","matching","doc","index","name","indexOf","substr","length","ListCollectionsOperation","db","filter","options","fullResponse","nameOnly","batchSize","server","callback","s","namespace","RegExp","test","Object","assign","withCollection","toString","$and","transforms","query","SYSTEM_NAMESPACE_COLLECTION","err","result","message","documents","Array","isArray","map","command","listCollections","cursor","READ_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommandOperationV2 = require('./command_v2');\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\nconst maxWireVersion = require('../core/utils').maxWireVersion;\nconst CONSTANTS = require('../constants');\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n\nfunction listCollectionsTransforms(databaseName) {\n  const matching = `${databaseName}.`;\n\n  return {\n    doc: doc => {\n      const index = doc.name.indexOf(matching);\n      // Remove database name if available\n      if (doc.name && index === 0) {\n        doc.name = doc.name.substr(index + matching.length);\n      }\n\n      return doc;\n    }\n  };\n}\n\nclass ListCollectionsOperation extends CommandOperationV2 {\n  constructor(db, filter, options) {\n    super(db, options, { fullResponse: true });\n\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, callback) {\n    if (maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db;\n\n      // If we have legacy mode and have not provided a full db name filter it\n      if (\n        typeof filter.name === 'string' &&\n        !new RegExp('^' + databaseName + '\\\\.').test(filter.name)\n      ) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      }\n\n      // No filter, filter by current database\n      if (filter == null) {\n        filter.name = `/${databaseName}/`;\n      }\n\n      // Rewrite the filter to use $and to filter out indexes\n      if (filter.name) {\n        filter = { $and: [{ name: filter.name }, { name: /^((?!\\$).)*$/ }] };\n      } else {\n        filter = { name: /^((?!\\$).)*$/ };\n      }\n\n      const transforms = listCollectionsTransforms(databaseName);\n      server.query(\n        `${databaseName}.${CONSTANTS.SYSTEM_NAMESPACE_COLLECTION}`,\n        { query: filter },\n        { batchSize: this.batchSize || 1000 },\n        {},\n        (err, result) => {\n          if (\n            result &&\n            result.message &&\n            result.message.documents &&\n            Array.isArray(result.message.documents)\n          ) {\n            result.message.documents = result.message.documents.map(transforms.doc);\n          }\n\n          callback(err, result);\n        }\n      );\n\n      return;\n    }\n\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n      nameOnly: this.nameOnly\n    };\n\n    return super.executeCommand(server, command, callback);\n  }\n}\n\ndefineAspects(ListCollectionsOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXECUTE_WITH_SELECTION\n]);\n\nmodule.exports = ListCollectionsOperation;\n"]},"metadata":{},"sourceType":"script"}