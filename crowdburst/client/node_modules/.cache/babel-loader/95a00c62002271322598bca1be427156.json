{"ast":null,"code":"import { Assertions } from \"mongodb-stitch-core-sdk\";\nimport { operationTypeFromRemote } from \"../OperationType\";\nimport RemoteInsertManyResult from \"../RemoteInsertManyResult\";\nvar RemoteInsertManyResultFields;\n\n(function (RemoteInsertManyResultFields) {\n  RemoteInsertManyResultFields[\"InsertedIds\"] = \"insertedIds\";\n})(RemoteInsertManyResultFields || (RemoteInsertManyResultFields = {}));\n\nvar RemoteInsertOneResultFields;\n\n(function (RemoteInsertOneResultFields) {\n  RemoteInsertOneResultFields[\"InsertedId\"] = \"insertedId\";\n})(RemoteInsertOneResultFields || (RemoteInsertOneResultFields = {}));\n\nvar RemoteUpdateResultFields;\n\n(function (RemoteUpdateResultFields) {\n  RemoteUpdateResultFields[\"MatchedCount\"] = \"matchedCount\";\n  RemoteUpdateResultFields[\"ModifiedCount\"] = \"modifiedCount\";\n  RemoteUpdateResultFields[\"UpsertedId\"] = \"upsertedId\";\n})(RemoteUpdateResultFields || (RemoteUpdateResultFields = {}));\n\nvar RemoteDeleteResultFields;\n\n(function (RemoteDeleteResultFields) {\n  RemoteDeleteResultFields[\"DeletedCount\"] = \"deletedCount\";\n})(RemoteDeleteResultFields || (RemoteDeleteResultFields = {}));\n\nvar UpdateDescriptionFields;\n\n(function (UpdateDescriptionFields) {\n  UpdateDescriptionFields[\"UpdatedFields\"] = \"updatedFields\";\n  UpdateDescriptionFields[\"RemovedFields\"] = \"removedFields\";\n})(UpdateDescriptionFields || (UpdateDescriptionFields = {}));\n\nvar ChangeEventFields;\n\n(function (ChangeEventFields) {\n  ChangeEventFields[\"Id\"] = \"_id\";\n  ChangeEventFields[\"OperationType\"] = \"operationType\";\n  ChangeEventFields[\"FullDocument\"] = \"fullDocument\";\n  ChangeEventFields[\"DocumentKey\"] = \"documentKey\";\n  ChangeEventFields[\"Namespace\"] = \"ns\";\n  ChangeEventFields[\"NamespaceDb\"] = \"db\";\n  ChangeEventFields[\"NamespaceColl\"] = \"coll\";\n  ChangeEventFields[\"UpdateDescription\"] = \"updateDescription\";\n})(ChangeEventFields || (ChangeEventFields = {}));\n\nvar CompactChangeEventFields;\n\n(function (CompactChangeEventFields) {\n  CompactChangeEventFields[\"OperationType\"] = \"ot\";\n  CompactChangeEventFields[\"FullDocument\"] = \"fd\";\n  CompactChangeEventFields[\"DocumentKey\"] = \"dk\";\n  CompactChangeEventFields[\"UpdateDescription\"] = \"ud\";\n  CompactChangeEventFields[\"StitchDocumentVersion\"] = \"sdv\";\n  CompactChangeEventFields[\"StitchDocumentHash\"] = \"sdh\";\n})(CompactChangeEventFields || (CompactChangeEventFields = {}));\n\nvar RemoteInsertManyResultDecoder = function () {\n  function RemoteInsertManyResultDecoder() {}\n\n  RemoteInsertManyResultDecoder.prototype.decode = function (from) {\n    return new RemoteInsertManyResult(from[RemoteInsertManyResultFields.InsertedIds]);\n  };\n\n  return RemoteInsertManyResultDecoder;\n}();\n\nvar RemoteInsertOneResultDecoder = function () {\n  function RemoteInsertOneResultDecoder() {}\n\n  RemoteInsertOneResultDecoder.prototype.decode = function (from) {\n    return {\n      insertedId: from[RemoteInsertOneResultFields.InsertedId]\n    };\n  };\n\n  return RemoteInsertOneResultDecoder;\n}();\n\nvar RemoteUpdateResultDecoder = function () {\n  function RemoteUpdateResultDecoder() {}\n\n  RemoteUpdateResultDecoder.prototype.decode = function (from) {\n    return {\n      matchedCount: from[RemoteUpdateResultFields.MatchedCount],\n      modifiedCount: from[RemoteUpdateResultFields.ModifiedCount],\n      upsertedId: from[RemoteUpdateResultFields.UpsertedId]\n    };\n  };\n\n  return RemoteUpdateResultDecoder;\n}();\n\nvar RemoteDeleteResultDecoder = function () {\n  function RemoteDeleteResultDecoder() {}\n\n  RemoteDeleteResultDecoder.prototype.decode = function (from) {\n    return {\n      deletedCount: from[RemoteDeleteResultFields.DeletedCount]\n    };\n  };\n\n  return RemoteDeleteResultDecoder;\n}();\n\nvar UpdateDescriptionDecoder = function () {\n  function UpdateDescriptionDecoder() {}\n\n  UpdateDescriptionDecoder.prototype.decode = function (from) {\n    Assertions.keyPresent(UpdateDescriptionFields.UpdatedFields, from);\n    Assertions.keyPresent(UpdateDescriptionFields.RemovedFields, from);\n    return {\n      removedFields: from[UpdateDescriptionFields.RemovedFields],\n      updatedFields: from[UpdateDescriptionFields.UpdatedFields]\n    };\n  };\n\n  return UpdateDescriptionDecoder;\n}();\n\nfunction decodeBaseChangeEventFields(from, updateDescriptionField, fullDocumentField, decoder) {\n  var updateDescription;\n\n  if (updateDescriptionField in from) {\n    updateDescription = ResultDecoders.updateDescriptionDecoder.decode(from[updateDescriptionField]);\n  } else {\n    updateDescription = undefined;\n  }\n\n  var fullDocument;\n\n  if (fullDocumentField in from) {\n    fullDocument = from[fullDocumentField];\n\n    if (decoder) {\n      fullDocument = decoder.decode(fullDocument);\n    }\n  } else {\n    fullDocument = undefined;\n  }\n\n  return {\n    updateDescription: updateDescription,\n    fullDocument: fullDocument\n  };\n}\n\nvar ChangeEventDecoder = function () {\n  function ChangeEventDecoder(decoder) {\n    this.decoder = decoder;\n  }\n\n  ChangeEventDecoder.prototype.decode = function (from) {\n    Assertions.keyPresent(ChangeEventFields.Id, from);\n    Assertions.keyPresent(ChangeEventFields.OperationType, from);\n    Assertions.keyPresent(ChangeEventFields.Namespace, from);\n    Assertions.keyPresent(ChangeEventFields.DocumentKey, from);\n    var nsDoc = from[ChangeEventFields.Namespace];\n\n    var _a = decodeBaseChangeEventFields(from, ChangeEventFields.UpdateDescription, ChangeEventFields.FullDocument, this.decoder),\n        updateDescription = _a.updateDescription,\n        fullDocument = _a.fullDocument;\n\n    return {\n      documentKey: from[ChangeEventFields.DocumentKey],\n      fullDocument: fullDocument,\n      id: from[ChangeEventFields.Id],\n      namespace: {\n        collection: nsDoc[ChangeEventFields.NamespaceColl],\n        database: nsDoc[ChangeEventFields.NamespaceDb]\n      },\n      operationType: operationTypeFromRemote(from[ChangeEventFields.OperationType]),\n      updateDescription: updateDescription\n    };\n  };\n\n  return ChangeEventDecoder;\n}();\n\nvar CompactChangeEventDecoder = function () {\n  function CompactChangeEventDecoder(decoder) {\n    this.decoder = decoder;\n  }\n\n  CompactChangeEventDecoder.prototype.decode = function (from) {\n    Assertions.keyPresent(CompactChangeEventFields.OperationType, from);\n    Assertions.keyPresent(CompactChangeEventFields.DocumentKey, from);\n\n    var _a = decodeBaseChangeEventFields(from, CompactChangeEventFields.UpdateDescription, CompactChangeEventFields.FullDocument, this.decoder),\n        updateDescription = _a.updateDescription,\n        fullDocument = _a.fullDocument;\n\n    var stitchDocumentVersion;\n\n    if (CompactChangeEventFields.StitchDocumentVersion in from) {\n      stitchDocumentVersion = from[CompactChangeEventFields.StitchDocumentVersion];\n    } else {\n      stitchDocumentVersion = undefined;\n    }\n\n    var stitchDocumentHash;\n\n    if (CompactChangeEventFields.StitchDocumentHash in from) {\n      stitchDocumentHash = from[CompactChangeEventFields.StitchDocumentHash];\n    } else {\n      stitchDocumentHash = undefined;\n    }\n\n    return {\n      documentKey: from[CompactChangeEventFields.DocumentKey],\n      fullDocument: fullDocument,\n      operationType: operationTypeFromRemote(from[CompactChangeEventFields.OperationType]),\n      stitchDocumentHash: stitchDocumentHash,\n      stitchDocumentVersion: stitchDocumentVersion,\n      updateDescription: updateDescription\n    };\n  };\n\n  return CompactChangeEventDecoder;\n}();\n\nvar ResultDecoders = function () {\n  function ResultDecoders() {}\n\n  ResultDecoders.remoteInsertManyResultDecoder = new RemoteInsertManyResultDecoder();\n  ResultDecoders.remoteInsertOneResultDecoder = new RemoteInsertOneResultDecoder();\n  ResultDecoders.remoteUpdateResultDecoder = new RemoteUpdateResultDecoder();\n  ResultDecoders.remoteDeleteResultDecoder = new RemoteDeleteResultDecoder();\n  ResultDecoders.updateDescriptionDecoder = new UpdateDescriptionDecoder();\n  ResultDecoders.ChangeEventDecoder = ChangeEventDecoder;\n  ResultDecoders.CompactChangeEventDecoder = CompactChangeEventDecoder;\n  return ResultDecoders;\n}();\n\nexport default ResultDecoders;","map":{"version":3,"sources":["../../../src/internal/ResultDecoders.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Assertions } from \"mongodb-stitch-core-sdk\";\nimport { operationTypeFromRemote } from \"../OperationType\";\nimport RemoteInsertManyResult from \"../RemoteInsertManyResult\";\nvar RemoteInsertManyResultFields;\n(function (RemoteInsertManyResultFields) {\n    RemoteInsertManyResultFields[\"InsertedIds\"] = \"insertedIds\";\n})(RemoteInsertManyResultFields || (RemoteInsertManyResultFields = {}));\nvar RemoteInsertOneResultFields;\n(function (RemoteInsertOneResultFields) {\n    RemoteInsertOneResultFields[\"InsertedId\"] = \"insertedId\";\n})(RemoteInsertOneResultFields || (RemoteInsertOneResultFields = {}));\nvar RemoteUpdateResultFields;\n(function (RemoteUpdateResultFields) {\n    RemoteUpdateResultFields[\"MatchedCount\"] = \"matchedCount\";\n    RemoteUpdateResultFields[\"ModifiedCount\"] = \"modifiedCount\";\n    RemoteUpdateResultFields[\"UpsertedId\"] = \"upsertedId\";\n})(RemoteUpdateResultFields || (RemoteUpdateResultFields = {}));\nvar RemoteDeleteResultFields;\n(function (RemoteDeleteResultFields) {\n    RemoteDeleteResultFields[\"DeletedCount\"] = \"deletedCount\";\n})(RemoteDeleteResultFields || (RemoteDeleteResultFields = {}));\nvar UpdateDescriptionFields;\n(function (UpdateDescriptionFields) {\n    UpdateDescriptionFields[\"UpdatedFields\"] = \"updatedFields\";\n    UpdateDescriptionFields[\"RemovedFields\"] = \"removedFields\";\n})(UpdateDescriptionFields || (UpdateDescriptionFields = {}));\nvar ChangeEventFields;\n(function (ChangeEventFields) {\n    ChangeEventFields[\"Id\"] = \"_id\";\n    ChangeEventFields[\"OperationType\"] = \"operationType\";\n    ChangeEventFields[\"FullDocument\"] = \"fullDocument\";\n    ChangeEventFields[\"DocumentKey\"] = \"documentKey\";\n    ChangeEventFields[\"Namespace\"] = \"ns\";\n    ChangeEventFields[\"NamespaceDb\"] = \"db\";\n    ChangeEventFields[\"NamespaceColl\"] = \"coll\";\n    ChangeEventFields[\"UpdateDescription\"] = \"updateDescription\";\n})(ChangeEventFields || (ChangeEventFields = {}));\nvar CompactChangeEventFields;\n(function (CompactChangeEventFields) {\n    CompactChangeEventFields[\"OperationType\"] = \"ot\";\n    CompactChangeEventFields[\"FullDocument\"] = \"fd\";\n    CompactChangeEventFields[\"DocumentKey\"] = \"dk\";\n    CompactChangeEventFields[\"UpdateDescription\"] = \"ud\";\n    CompactChangeEventFields[\"StitchDocumentVersion\"] = \"sdv\";\n    CompactChangeEventFields[\"StitchDocumentHash\"] = \"sdh\";\n})(CompactChangeEventFields || (CompactChangeEventFields = {}));\nvar RemoteInsertManyResultDecoder = (function () {\n    function RemoteInsertManyResultDecoder() {\n    }\n    RemoteInsertManyResultDecoder.prototype.decode = function (from) {\n        return new RemoteInsertManyResult(from[RemoteInsertManyResultFields.InsertedIds]);\n    };\n    return RemoteInsertManyResultDecoder;\n}());\nvar RemoteInsertOneResultDecoder = (function () {\n    function RemoteInsertOneResultDecoder() {\n    }\n    RemoteInsertOneResultDecoder.prototype.decode = function (from) {\n        return {\n            insertedId: from[RemoteInsertOneResultFields.InsertedId]\n        };\n    };\n    return RemoteInsertOneResultDecoder;\n}());\nvar RemoteUpdateResultDecoder = (function () {\n    function RemoteUpdateResultDecoder() {\n    }\n    RemoteUpdateResultDecoder.prototype.decode = function (from) {\n        return {\n            matchedCount: from[RemoteUpdateResultFields.MatchedCount],\n            modifiedCount: from[RemoteUpdateResultFields.ModifiedCount],\n            upsertedId: from[RemoteUpdateResultFields.UpsertedId]\n        };\n    };\n    return RemoteUpdateResultDecoder;\n}());\nvar RemoteDeleteResultDecoder = (function () {\n    function RemoteDeleteResultDecoder() {\n    }\n    RemoteDeleteResultDecoder.prototype.decode = function (from) {\n        return {\n            deletedCount: from[RemoteDeleteResultFields.DeletedCount]\n        };\n    };\n    return RemoteDeleteResultDecoder;\n}());\nvar UpdateDescriptionDecoder = (function () {\n    function UpdateDescriptionDecoder() {\n    }\n    UpdateDescriptionDecoder.prototype.decode = function (from) {\n        Assertions.keyPresent(UpdateDescriptionFields.UpdatedFields, from);\n        Assertions.keyPresent(UpdateDescriptionFields.RemovedFields, from);\n        return {\n            removedFields: from[UpdateDescriptionFields.RemovedFields],\n            updatedFields: from[UpdateDescriptionFields.UpdatedFields],\n        };\n    };\n    return UpdateDescriptionDecoder;\n}());\nfunction decodeBaseChangeEventFields(from, updateDescriptionField, fullDocumentField, decoder) {\n    var updateDescription;\n    if (updateDescriptionField in from) {\n        updateDescription = ResultDecoders.updateDescriptionDecoder.decode(from[updateDescriptionField]);\n    }\n    else {\n        updateDescription = undefined;\n    }\n    var fullDocument;\n    if (fullDocumentField in from) {\n        fullDocument = from[fullDocumentField];\n        if (decoder) {\n            fullDocument = decoder.decode(fullDocument);\n        }\n    }\n    else {\n        fullDocument = undefined;\n    }\n    return { updateDescription: updateDescription, fullDocument: fullDocument };\n}\nvar ChangeEventDecoder = (function () {\n    function ChangeEventDecoder(decoder) {\n        this.decoder = decoder;\n    }\n    ChangeEventDecoder.prototype.decode = function (from) {\n        Assertions.keyPresent(ChangeEventFields.Id, from);\n        Assertions.keyPresent(ChangeEventFields.OperationType, from);\n        Assertions.keyPresent(ChangeEventFields.Namespace, from);\n        Assertions.keyPresent(ChangeEventFields.DocumentKey, from);\n        var nsDoc = from[ChangeEventFields.Namespace];\n        var _a = decodeBaseChangeEventFields(from, ChangeEventFields.UpdateDescription, ChangeEventFields.FullDocument, this.decoder), updateDescription = _a.updateDescription, fullDocument = _a.fullDocument;\n        return {\n            documentKey: from[ChangeEventFields.DocumentKey],\n            fullDocument: fullDocument,\n            id: from[ChangeEventFields.Id],\n            namespace: {\n                collection: nsDoc[ChangeEventFields.NamespaceColl],\n                database: nsDoc[ChangeEventFields.NamespaceDb]\n            },\n            operationType: operationTypeFromRemote(from[ChangeEventFields.OperationType]),\n            updateDescription: updateDescription\n        };\n    };\n    return ChangeEventDecoder;\n}());\nvar CompactChangeEventDecoder = (function () {\n    function CompactChangeEventDecoder(decoder) {\n        this.decoder = decoder;\n    }\n    CompactChangeEventDecoder.prototype.decode = function (from) {\n        Assertions.keyPresent(CompactChangeEventFields.OperationType, from);\n        Assertions.keyPresent(CompactChangeEventFields.DocumentKey, from);\n        var _a = decodeBaseChangeEventFields(from, CompactChangeEventFields.UpdateDescription, CompactChangeEventFields.FullDocument, this.decoder), updateDescription = _a.updateDescription, fullDocument = _a.fullDocument;\n        var stitchDocumentVersion;\n        if (CompactChangeEventFields.StitchDocumentVersion in from) {\n            stitchDocumentVersion = from[CompactChangeEventFields.StitchDocumentVersion];\n        }\n        else {\n            stitchDocumentVersion = undefined;\n        }\n        var stitchDocumentHash;\n        if (CompactChangeEventFields.StitchDocumentHash in from) {\n            stitchDocumentHash = from[CompactChangeEventFields.StitchDocumentHash];\n        }\n        else {\n            stitchDocumentHash = undefined;\n        }\n        return {\n            documentKey: from[CompactChangeEventFields.DocumentKey],\n            fullDocument: fullDocument,\n            operationType: operationTypeFromRemote(from[CompactChangeEventFields.OperationType]),\n            stitchDocumentHash: stitchDocumentHash,\n            stitchDocumentVersion: stitchDocumentVersion,\n            updateDescription: updateDescription,\n        };\n    };\n    return CompactChangeEventDecoder;\n}());\nvar ResultDecoders = (function () {\n    function ResultDecoders() {\n    }\n    ResultDecoders.remoteInsertManyResultDecoder = new RemoteInsertManyResultDecoder();\n    ResultDecoders.remoteInsertOneResultDecoder = new RemoteInsertOneResultDecoder();\n    ResultDecoders.remoteUpdateResultDecoder = new RemoteUpdateResultDecoder();\n    ResultDecoders.remoteDeleteResultDecoder = new RemoteDeleteResultDecoder();\n    ResultDecoders.updateDescriptionDecoder = new UpdateDescriptionDecoder();\n    ResultDecoders.ChangeEventDecoder = ChangeEventDecoder;\n    ResultDecoders.CompactChangeEventDecoder = CompactChangeEventDecoder;\n    return ResultDecoders;\n}());\nexport default ResultDecoders;\n//# sourceMappingURL=ResultDecoders.js.map"]},"metadata":{},"sourceType":"module"}