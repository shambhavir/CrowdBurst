{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { List, ListItem } from './shared/List';\nimport { Badge } from './shared/Badge';\nconst GROCERY = gql`\n\n {\n    grocery_by_pk {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n  } \n`; // const GROCERY = gql` \n// {\n//     grocery {\n//       address\n//       alias\n//       display_phone\n//       id\n//       name\n//     }\n// }`;\n\nexport default function Grocery() {\n  //     const {loading, error, data} = useQuery(GROCERY);\n  //     if(loading) return <p>Loading...</p>;\n  //     if(error)  return <p>Error!</p>;\n  //     // return data.grocery.map(({id, name, address}) => (\n  //     //     <div key = {id}>\n  //     //         <p>\n  //     //             {name} | {address}\n  //     //         </p>\n  //     //     </div>\n  //     // )); \n  //     return(\n  //         <List>\n  //             {data.grocery.map(({id, name, address}) => (\n  //                 <ListItem key = {id}>\n  //                     {name} <Badge>{address}</Badge>\n  //                 </ListItem>\n  //             ))}\n  //         </List>\n  //     );\n  // }\n  {\n    const {\n      loading,\n      error,\n      data\n    } = useQuery(GROCERY, {\n      variables: {\n        match: {\n          params: {\n            id\n          }\n        }\n      }\n    });\n    if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, \"Loading ...\");\n    if (error) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 23\n      }\n    }, \"Error :(\");\n    const {\n      name,\n      alias,\n      finrevs\n    } = data.grocery_by_pk;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, name, \" \", /*#__PURE__*/React.createElement(Badge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 18\n      }\n    }, alias)), /*#__PURE__*/React.createElement(List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, finrevs.map(finrevs => /*#__PURE__*/React.createElement(ListItem, {\n      key: finrevs.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, finrevs.body))));\n  }\n  ;\n} //export default Grocery;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js"],"names":["React","useQuery","gql","List","ListItem","Badge","GROCERY","Grocery","loading","error","data","variables","match","params","id","name","alias","finrevs","grocery_by_pk","map","body"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AACA,SAAQC,IAAR,EAAcC,QAAd,QAA6B,eAA7B;AACA,SAAQC,KAAR,QAAoB,gBAApB;AAEA,MAAMC,OAAO,GAAGJ,GAAI;;;;;;;;;;;;;;CAApB,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASK,OAAT,GAAmB;AAClC;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACI,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,QAA2BT,QAAQ,CAACK,OAAD,EAAU;AACjDK,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAClBC,UAAAA,MAAM,EAAE;AAAEC,YAAAA;AAAF;AADU;AAAT;AADsC,KAAV,CAAzC;AAMA,QAAIN,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACb,QAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA2BP,IAAI,CAACQ,aAAtC;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,IADH,oBACS,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQC,KAAR,CADT,CADF,eAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,OAAO,CAACE,GAAR,CAAaF,OAAD,iBACX,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,OAAO,CAACH,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BG,OAAO,CAACG,IAApC,CADD,CADH,CAJF,CADF;AAYD;AAAA;AACF,C,CACC","sourcesContent":["import React from 'react';\nimport {useQuery, gql} from '@apollo/client';\nimport {List, ListItem} from './shared/List';\nimport {Badge} from './shared/Badge';\n\nconst GROCERY = gql`\n\n {\n    grocery_by_pk {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n  } \n`; \n\n// const GROCERY = gql` \n// {\n//     grocery {\n//       address\n//       alias\n//       display_phone\n//       id\n//       name\n//     }\n// }`;\n\nexport default function Grocery() {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n//     // return data.grocery.map(({id, name, address}) => (\n//     //     <div key = {id}>\n//     //         <p>\n//     //             {name} | {address}\n//     //         </p>\n//     //     </div>\n//     // )); \n\n//     return(\n//         <List>\n//             {data.grocery.map(({id, name, address}) => (\n//                 <ListItem key = {id}>\n//                     {name} <Badge>{address}</Badge>\n//                 </ListItem>\n//             ))}\n//         </List>\n//     );\n// }\n\n\n\n    \n{\n    const { loading, error, data } = useQuery(GROCERY, {\n      variables: { match: {\n        params: { id },\n      } },\n    });\n  \n    if (loading) return <p>Loading ...</p>;\n    if (error) return <p>Error :(</p>;\n  \n    const { name, alias, finrevs } = data.grocery_by_pk;\n  \n    return(\n      <div>\n        <h3>\n          {name} <Badge>{alias}</Badge>\n        </h3>\n        <List>\n          {finrevs.map((finrevs) => (\n            <ListItem key={finrevs.id}>{finrevs.body}</ListItem>\n          ))}\n        </List>\n      </div>\n    );\n  };\n}\n  //export default Grocery;\n"]},"metadata":{},"sourceType":"module"}