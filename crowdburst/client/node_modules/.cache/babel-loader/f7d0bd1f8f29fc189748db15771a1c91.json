{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar MongoError = require('../core').MongoError;\n\nvar MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nvar ExecuteDbAdminCommandOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(ExecuteDbAdminCommandOperation, _OperationBase);\n\n  var _super = _createSuper(ExecuteDbAdminCommandOperation);\n\n  function ExecuteDbAdminCommandOperation(db, selector, options) {\n    var _this;\n\n    _classCallCheck(this, ExecuteDbAdminCommandOperation);\n\n    _this = _super.call(this, options);\n    _this.db = db;\n    _this.selector = selector;\n    return _this;\n  }\n\n  _createClass(ExecuteDbAdminCommandOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var db = this.db;\n      var selector = this.selector;\n      var options = this.options;\n      var namespace = new MongoDBNamespace('admin', '$cmd');\n      db.s.topology.command(namespace, selector, options, function (err, result) {\n        // Did the user destroy the topology\n        if (db.serverConfig && db.serverConfig.isDestroyed()) {\n          return callback(new MongoError('topology was destroyed'));\n        }\n\n        if (err) return handleCallback(callback, err);\n        handleCallback(callback, null, result.result);\n      });\n    }\n  }]);\n\n  return ExecuteDbAdminCommandOperation;\n}(OperationBase);\n\nmodule.exports = ExecuteDbAdminCommandOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/execute_db_admin_command.js"],"names":["OperationBase","require","handleCallback","MongoError","MongoDBNamespace","ExecuteDbAdminCommandOperation","db","selector","options","callback","namespace","s","topology","command","err","result","serverConfig","isDestroyed","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,IAAME,cAAc,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,cAA3C;;AACA,IAAMC,UAAU,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,UAAtC;;AACA,IAAMC,gBAAgB,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,gBAA7C;;IAEMC,8B;;;;;AACJ,0CAAYC,EAAZ,EAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;AAAA;;AAAA;;AACjC,8BAAMA,OAAN;AAEA,UAAKF,EAAL,GAAUA,EAAV;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AAJiC;AAKlC;;;;4BAEOE,Q,EAAU;AAChB,UAAMH,EAAE,GAAG,KAAKA,EAAhB;AACA,UAAMC,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;AAEA,UAAME,SAAS,GAAG,IAAIN,gBAAJ,CAAqB,OAArB,EAA8B,MAA9B,CAAlB;AACAE,MAAAA,EAAE,CAACK,CAAH,CAAKC,QAAL,CAAcC,OAAd,CAAsBH,SAAtB,EAAiCH,QAAjC,EAA2CC,OAA3C,EAAoD,UAACM,GAAD,EAAMC,MAAN,EAAiB;AACnE;AACA,YAAIT,EAAE,CAACU,YAAH,IAAmBV,EAAE,CAACU,YAAH,CAAgBC,WAAhB,EAAvB,EAAsD;AACpD,iBAAOR,QAAQ,CAAC,IAAIN,UAAJ,CAAe,wBAAf,CAAD,CAAf;AACD;;AAED,YAAIW,GAAJ,EAAS,OAAOZ,cAAc,CAACO,QAAD,EAAWK,GAAX,CAArB;AACTZ,QAAAA,cAAc,CAACO,QAAD,EAAW,IAAX,EAAiBM,MAAM,CAACA,MAAxB,CAAd;AACD,OARD;AASD;;;;EAvB0Cf,a;;AA0B7CkB,MAAM,CAACC,OAAP,GAAiBd,8BAAjB","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nclass ExecuteDbAdminCommandOperation extends OperationBase {\n  constructor(db, selector, options) {\n    super(options);\n\n    this.db = db;\n    this.selector = selector;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const selector = this.selector;\n    const options = this.options;\n\n    const namespace = new MongoDBNamespace('admin', '$cmd');\n    db.s.topology.command(namespace, selector, options, (err, result) => {\n      // Did the user destroy the topology\n      if (db.serverConfig && db.serverConfig.isDestroyed()) {\n        return callback(new MongoError('topology was destroyed'));\n      }\n\n      if (err) return handleCallback(callback, err);\n      handleCallback(callback, null, result.result);\n    });\n  }\n}\n\nmodule.exports = ExecuteDbAdminCommandOperation;\n"]},"metadata":{},"sourceType":"script"}