{"ast":null,"code":"import _slicedToArray from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _this=this;function _templateObject(){var data=_taggedTemplateLiteral([\"\\n\\nquery MyQuery($id: String!) {\\n  grocery_by_pk(id: $id) {\\n    address\\n    name\\n    id\\n    finrevs {\\n      body\\n      grid\\n    }\\n  }\\n}\\n   \"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from'react';import{useMutation,gql,useSubscription,useLazyQuery}from'@apollo/client';import{useQuery}from'@apollo/client';// import {useSubscription} from '@apollo/client'; \nimport{List,ListItem}from'./shared/List';import Search2 from'./Search2';import Form2 from'./Form2';import axios from'axios';var IHATECODE=gql(_templateObject());var data=new Array();// const GRO = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// }\n// `\nvar componentDidMount=function componentDidMount(){_this.getDataFromDb();if(!_this.state.intervalIsSet){var interval=setInterval(_this.getDataFromDb,1000);_this.setState({intervalIsSet:interval});}};var componentWillUnmount=function componentWillUnmount(){if(_this.state.intervalIsSet){clearInterval(_this.state.intervalIsSet);_this.setState({intervalIsSet:null});}};var getDataFromDb=function getDataFromDb(){fetch('http://localhost:3001/api/getData').then(function(data){return data.json();}).then(function(res){return _this.setState({data:res.data});});};var putDataToDB=function putDataToDB(message){var currentIds=_this.state.data.map(function(data){return data.id;});var idToBeAdded=0;while(currentIds.includes(idToBeAdded)){++idToBeAdded;}axios.post('http://localhost:3001/api/putData',{id:idToBeAdded,message:message});};var Groceries=function Groceries(_ref){var id=_ref.match.params.id;var _useQuery=useQuery(IHATECODE,{variables:{id:id}}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;// const {loading, error, data} = useSubscription(GRO, {variables: {id}}); \n// const {loading, error, data} = useSubscription(GRO); \nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),inputVal=_useState2[0],setInputVal=_useState2[1];if(loading)return/*#__PURE__*/React.createElement(\"p\",null,\"Loading ...\");if(error)return/*#__PURE__*/React.createElement(\"p\",null,\"Error :(\");var _data$grocery_by_pk=data.grocery_by_pk,name=_data$grocery_by_pk.name,address=_data$grocery_by_pk.address,finrevs=_data$grocery_by_pk.finrevs;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",null,name,\" \",address),/*#__PURE__*/React.createElement(\"addReview\",null),/*#__PURE__*/React.createElement(Search2,{inputVal:inputVal,onChange:function onChange(e){return setInputVal(e.target.value);},onSubmit:function onSubmit(){},buttonText:\"Submit\"}),/*#__PURE__*/React.createElement(List,null,finrevs.map(function(finrevs){return/*#__PURE__*/React.createElement(ListItem,{key:finrevs.id},finrevs.body);})),/*#__PURE__*/React.createElement(Form2,null),/*#__PURE__*/React.createElement(\"div\",null));};export default Groceries;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/Components/Groceries.js"],"names":["React","useState","useMutation","gql","useSubscription","useLazyQuery","useQuery","List","ListItem","Search2","Form2","axios","IHATECODE","data","Array","componentDidMount","getDataFromDb","state","intervalIsSet","interval","setInterval","setState","componentWillUnmount","clearInterval","fetch","then","json","res","putDataToDB","message","currentIds","map","id","idToBeAdded","includes","post","Groceries","match","params","variables","loading","error","inputVal","setInputVal","grocery_by_pk","name","address","finrevs","e","target","value","body"],"mappings":"yoBAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,OAAQC,WAAR,CAAqBC,GAArB,CAA0BC,eAA1B,CAA2CC,YAA3C,KAA8D,gBAA9D,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA;AACA,OAAQC,IAAR,CAAcC,QAAd,KAA6B,eAA7B,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAMA,GAAMC,CAAAA,SAAS,CAAGT,GAAH,mBAAf,CAgBG,GAAMU,CAAAA,IAAI,CAAI,GAAIC,CAAAA,KAAJ,EAAd,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,KAAI,CAACC,aAAL,GACA,GAAI,CAAC,KAAI,CAACC,KAAL,CAAWC,aAAhB,CAA+B,CAC7B,GAAIC,CAAAA,QAAQ,CAAGC,WAAW,CAAC,KAAI,CAACJ,aAAN,CAAqB,IAArB,CAA1B,CACA,KAAI,CAACK,QAAL,CAAc,CAAEH,aAAa,CAAEC,QAAjB,CAAd,EACD,CACF,CAND,CAOA,GAAOG,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CAC9B,GAAI,KAAI,CAACL,KAAL,CAAWC,aAAf,CAA8B,CAC5BK,aAAa,CAAC,KAAI,CAACN,KAAL,CAAWC,aAAZ,CAAb,CACA,KAAI,CAACG,QAAL,CAAc,CAAEH,aAAa,CAAE,IAAjB,CAAd,EACD,CACN,CALD,CAMA,GAAOF,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACnBQ,KAAK,CAAC,mCAAD,CAAL,CACGC,IADH,CACQ,SAACZ,IAAD,QAAUA,CAAAA,IAAI,CAACa,IAAL,EAAV,EADR,EAEGD,IAFH,CAEQ,SAACE,GAAD,QAAS,CAAA,KAAI,CAACN,QAAL,CAAc,CAAER,IAAI,CAAEc,GAAG,CAACd,IAAZ,CAAd,CAAT,EAFR,EAGD,CAJT,CAKA,GAAMe,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,OAAD,CAAa,CAC/B,GAAIC,CAAAA,UAAU,CAAG,KAAI,CAACb,KAAL,CAAWJ,IAAX,CAAgBkB,GAAhB,CAAoB,SAAClB,IAAD,QAAUA,CAAAA,IAAI,CAACmB,EAAf,EAApB,CAAjB,CACA,GAAIC,CAAAA,WAAW,CAAG,CAAlB,CACA,MAAOH,UAAU,CAACI,QAAX,CAAoBD,WAApB,CAAP,CAAyC,CACrC,EAAEA,WAAF,CACD,CAELtB,KAAK,CAACwB,IAAN,CAAW,mCAAX,CAAgD,CAC5CH,EAAE,CAAEC,WADwC,CAE5CJ,OAAO,CAAEA,OAFmC,CAAhD,EAIG,CAXH,CAuBA,GAAMO,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAIV,IAFQJ,CAAAA,EAER,MAHJK,KAGI,CAFFC,MAEE,CAFQN,EAER,eAC2B1B,QAAQ,CAACM,SAAD,CAAY,CAAC2B,SAAS,CAAE,CAACP,EAAE,CAAFA,EAAD,CAAZ,CAAZ,CADnC,CACGQ,OADH,WACGA,OADH,CACYC,KADZ,WACYA,KADZ,CACmB5B,IADnB,WACmBA,IADnB,CAEJ;AACA;AAHI,cAO4BZ,QAAQ,CAAC,EAAD,CAPpC,wCAOGyC,QAPH,eAOaC,WAPb,eAQJ,GAAIH,OAAJ,CAAa,mBAAO,2CAAP,CACb,GAAIC,KAAJ,CAAW,mBAAO,wCAAP,CATP,wBAY+B5B,IAAI,CAAC+B,aAZpC,CAYIC,IAZJ,qBAYIA,IAZJ,CAYUC,OAZV,qBAYUA,OAZV,CAYmBC,OAZnB,qBAYmBA,OAZnB,CAcJ,mBACI,4CACE,8BACGF,IADH,KACUC,OADV,CADF,cAKE,qCALF,cAOE,oBAAC,OAAD,EACE,QAAQ,CAAIJ,QADd,CAEE,QAAQ,CAAI,kBAACM,CAAD,QAAOL,CAAAA,WAAW,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB,EAFd,CAGE,QAAQ,CAAI,mBAAM,CAAE,CAHtB,CAIE,UAAU,CAAG,QAJf,EAPF,cAaE,oBAAC,IAAD,MACGH,OAAO,CAAChB,GAAR,CAAY,SAACgB,OAAD,qBACX,oBAAC,QAAD,EAAU,GAAG,CAAEA,OAAO,CAACf,EAAvB,EAA4Be,OAAO,CAACI,IAApC,CADW,EAAZ,CADH,CAbF,cAkBE,oBAAC,KAAD,MAlBF,cAqBE,+BArBF,CADJ,CA0CC,CA5DL,CA8DA,cAAef,CAAAA,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport {useMutation, gql, useSubscription, useLazyQuery} from '@apollo/client';\nimport {useQuery} from '@apollo/client'; \n// import {useSubscription} from '@apollo/client'; \nimport {List, ListItem} from './shared/List';\nimport Search2 from './Search2'; \nimport Form2 from './Form2';\nimport axios from 'axios';\n\n\n\n\n\nconst IHATECODE = gql \n`\n\nquery MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n   `;\n\n   const data =  new Array()\n\n// const GRO = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// }\n// `\n\nconst componentDidMount = () => {\n  this.getDataFromDb();\n  if (!this.state.intervalIsSet) {\n    let interval = setInterval(this.getDataFromDb, 1000);\n    this.setState({ intervalIsSet: interval });\n  }\n}\nconst  componentWillUnmount = () => {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({ intervalIsSet: null });\n      }\n}\nconst  getDataFromDb = () => {\n          fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n        };\nconst putDataToDB = (message) => {\n  let currentIds = this.state.data.map((data) => data.id);\n  let idToBeAdded = 0;\n  while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\naxios.post('http://localhost:3001/api/putData', {\n    id: idToBeAdded,\n    message: message,\n   });\n  };\n\n\n\n\n\n\n\n\n\n\n\nconst Groceries = ({\n    match: {\n      params: { id },\n    },\n  }) => {\n    const {loading, error, data} = useQuery(IHATECODE, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO); \n\n\n\n    const [inputVal, setInputVal] = useState(\"\"); \n    if (loading) return <p>Loading ...</p>;\n    if (error) return <p>Error :(</p>;\n\n\n    const { name, address, finrevs } = data.grocery_by_pk;\n\n    return (\n        <div>\n          <h3>\n            {name} {address}\n          </h3>\n          {/* <Form2></Form2> */}\n          <addReview></addReview>\n\n          <Search2\n            inputVal = {inputVal}\n            onChange = {(e) => setInputVal(e.target.value)}\n            onSubmit = {() => {}}\n            buttonText = \"Submit\"\n            />\n          <List>\n            {finrevs.map((finrevs) => (\n              <ListItem key={finrevs.id}>{finrevs.body}</ListItem>\n            ))}\n          </List>\n          <Form2/>\n\n\n          <div>\n      \n        {/* <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            // onChange={(e) => this.setState({ message: e.target.value })}\n            \n            onChange= { (e) => this.setState({message: e.target.value})}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div> */}\n        \n        \n            </div>\n        </div>\n      );\n    };\n\nexport default Groceries;"]},"metadata":{},"sourceType":"module"}