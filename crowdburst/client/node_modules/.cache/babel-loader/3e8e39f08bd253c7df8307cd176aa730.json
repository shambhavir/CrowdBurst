{"ast":null,"code":"import { base64Decode } from \"../../internal/common/Base64\";\nvar EXPIRES = \"exp\";\nvar ISSUED_AT = \"iat\";\nvar USER_DATA = \"user_data\";\n\nvar JWT = function () {\n  function JWT(expires, issuedAt, userData) {\n    this.expires = expires;\n    this.issuedAt = issuedAt;\n    this.userData = userData;\n  }\n\n  JWT.fromEncoded = function (encodedJWT) {\n    var parts = JWT.splitToken(encodedJWT);\n    var json = JSON.parse(base64Decode(parts[1]));\n    var expires = json[EXPIRES];\n    var iat = json[ISSUED_AT];\n    var userData = json[USER_DATA];\n    return new JWT(expires, iat, userData);\n  };\n\n  JWT.splitToken = function (jwt) {\n    var parts = jwt.split(\".\");\n\n    if (parts.length !== 3) {\n      throw new Error(\"Malformed JWT token. The string \" + jwt + \" should have 3 parts.\");\n    }\n\n    return parts;\n  };\n\n  return JWT;\n}();\n\nexport default JWT;","map":{"version":3,"sources":["../../../../src/auth/internal/JWT.ts"],"names":[],"mappings":"AAgBA,SAAS,YAAT,QAA6B,8BAA7B;AAGA,IAAM,OAAO,GAAG,KAAhB;AACA,IAAM,SAAS,GAAG,KAAlB;AACA,IAAM,SAAS,GAAG,WAAlB;;AAMA,IAAA,GAAA,GAAA,YAAA;AAiDE,WAAA,GAAA,CAAoB,OAApB,EAAqC,QAArC,EAAuD,QAAvD,EAAwF;AACtF,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACD;;AAjDa,EAAA,GAAA,CAAA,WAAA,GAAd,UAA0B,UAA1B,EAA4C;AAC1C,QAAM,KAAK,GAAG,GAAG,CAAC,UAAJ,CAAe,UAAf,CAAd;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,KAAK,CAAC,CAAD,CAAN,CAAvB,CAAb;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,OAAD,CAApB;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,SAAD,CAAhB;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,SAAD,CAArB;AACA,WAAO,IAAI,GAAJ,CAAQ,OAAR,EAAiB,GAAjB,EAAsB,QAAtB,CAAP;AACD,GAPa;;AAYC,EAAA,GAAA,CAAA,UAAA,GAAf,UAA0B,GAA1B,EAAqC;AACnC,QAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAd;;AACA,QAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAI,KAAJ,CACJ,qCAAmC,GAAnC,GAAsC,uBADlC,CAAN;AAGD;;AACD,WAAO,KAAP;AACD,GARc;;AAsCjB,SAAA,GAAA;AAAC,CAtDD,EAAA","sourceRoot":"","sourcesContent":["import { base64Decode } from \"../../internal/common/Base64\";\nvar EXPIRES = \"exp\";\nvar ISSUED_AT = \"iat\";\nvar USER_DATA = \"user_data\";\nvar JWT = (function () {\n    function JWT(expires, issuedAt, userData) {\n        this.expires = expires;\n        this.issuedAt = issuedAt;\n        this.userData = userData;\n    }\n    JWT.fromEncoded = function (encodedJWT) {\n        var parts = JWT.splitToken(encodedJWT);\n        var json = JSON.parse(base64Decode(parts[1]));\n        var expires = json[EXPIRES];\n        var iat = json[ISSUED_AT];\n        var userData = json[USER_DATA];\n        return new JWT(expires, iat, userData);\n    };\n    JWT.splitToken = function (jwt) {\n        var parts = jwt.split(\".\");\n        if (parts.length !== 3) {\n            throw new Error(\"Malformed JWT token. The string \" + jwt + \" should have 3 parts.\");\n        }\n        return parts;\n    };\n    return JWT;\n}());\nexport default JWT;\n//# sourceMappingURL=JWT.js.map"]},"metadata":{},"sourceType":"module"}