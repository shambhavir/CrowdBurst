{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { List, ListItem } from './shared/List';\nimport { Badge } from './shared/Badge';\nconst GROCERY = gql`\n\nquery GroceryQuery($id: String!) {\n    grocery_by_pk(id: $id) {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n  } \n`; // const GROCERY = gql` \n// {\n//     grocery {\n//       address\n//       alias\n//       display_phone\n//       id\n//       name\n//     }\n// }`;\n// export default function Grocery() {\n//     const {loading, error, data} = useQuery(GROCERY);\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n//     // return data.grocery.map(({id, name, address}) => (\n//     //     <div key = {id}>\n//     //         <p>\n//     //             {name} | {address}\n//     //         </p>\n//     //     </div>\n//     // )); \n//     return(\n//         <List>\n//             {data.grocery.map(({id, name, address}) => (\n//                 <ListItem key = {id}>\n//                     {name} <Badge>{address}</Badge>\n//                 </ListItem>\n//             ))}\n//         </List>\n//     );\n// }\n\nconst Grocery = ({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GROCERY, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"Loading ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }\n  }, \"Error :(\");\n  const {\n    name,\n    alias,\n    finrevs\n  } = data.grocery_by_pk;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, name, \" \", /*#__PURE__*/React.createElement(Badge, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 18\n    }\n  }, alias)), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, finrevs.map(finrevs => /*#__PURE__*/React.createElement(ListItem, {\n    key: finrevs.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, finrevs.body))));\n};\n\nexport default Grocery;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/Components/Grocery.js"],"names":["React","useQuery","gql","List","ListItem","Badge","GROCERY","Grocery","match","params","id","loading","error","data","variables","name","alias","finrevs","grocery_by_pk","map","body"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AACA,SAAQC,IAAR,EAAcC,QAAd,QAA6B,eAA7B;AACA,SAAQC,KAAR,QAAoB,gBAApB;AAEA,MAAMC,OAAO,GAAGJ,GAAI;;;;;;;;;;;;;;CAApB,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMK,OAAO,GAAG,CAAC;AAEbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AADH;AAFM,CAAD,KAOhB;AACI,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACK,OAAD,EAAU;AACjDQ,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADsC,GAAV,CAAzC;AAIA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BJ,IAAI,CAACK,aAAtC;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IADH,oBACS,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQC,KAAR,CADT,CADF,eAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,OAAO,CAACE,GAAR,CAAaF,OAAD,iBACX,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,OAAO,CAACP,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BO,OAAO,CAACG,IAApC,CADD,CADH,CAJF,CADF;AAYD,CA7BH;;AA+BE,eAAeb,OAAf","sourcesContent":["import React from 'react';\nimport {useQuery, gql} from '@apollo/client';\nimport {List, ListItem} from './shared/List';\nimport {Badge} from './shared/Badge';\n\nconst GROCERY = gql`\n\nquery GroceryQuery($id: String!) {\n    grocery_by_pk(id: $id) {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n  } \n`; \n\n// const GROCERY = gql` \n// {\n//     grocery {\n//       address\n//       alias\n//       display_phone\n//       id\n//       name\n//     }\n// }`;\n\n// export default function Grocery() {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n//     // return data.grocery.map(({id, name, address}) => (\n//     //     <div key = {id}>\n//     //         <p>\n//     //             {name} | {address}\n//     //         </p>\n//     //     </div>\n//     // )); \n\n//     return(\n//         <List>\n//             {data.grocery.map(({id, name, address}) => (\n//                 <ListItem key = {id}>\n//                     {name} <Badge>{address}</Badge>\n//                 </ListItem>\n//             ))}\n//         </List>\n//     );\n// }\n\nconst Grocery = ({\n   \n    match: {\n      params: { id },\n    },\n    \n  }) => \n{\n    const { loading, error, data } = useQuery(GROCERY, {\n      variables: { id },\n    });\n  \n    if (loading) return <p>Loading ...</p>;\n    if (error) return <p>Error :(</p>;\n  \n    const { name, alias, finrevs } = data.grocery_by_pk;\n  \n    return (\n      <div>\n        <h3>\n          {name} <Badge>{alias}</Badge>\n        </h3>\n        <List>\n          {finrevs.map((finrevs) => (\n            <ListItem key={finrevs.id}>{finrevs.body}</ListItem>\n          ))}\n        </List>\n      </div>\n    );\n  };\n\n  export default Grocery;\n"]},"metadata":{},"sourceType":"module"}