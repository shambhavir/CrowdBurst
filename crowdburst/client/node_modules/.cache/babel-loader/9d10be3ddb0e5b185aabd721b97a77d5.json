{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar Code = require('../core').BSON.Code;\n\nvar decorateWithCollation = require('../utils').decorateWithCollation;\n\nvar decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar isObject = require('../utils').isObject;\n\nvar loadDb = require('../dynamic_loaders').loadDb;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar resolveReadPreference = require('../utils').resolveReadPreference;\n\nvar toError = require('../utils').toError;\n\nvar exclusionList = ['readPreference', 'session', 'bypassDocumentValidation', 'w', 'wtimeout', 'j', 'writeConcern'];\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {(function|string)} map The mapping function.\n * @property {(function|string)} reduce The reduce function.\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n */\n\nvar MapReduceOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(MapReduceOperation, _OperationBase);\n\n  var _super = _createSuper(MapReduceOperation);\n\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {(function|string)} map The mapping function.\n   * @param {(function|string)} reduce The reduce function.\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  function MapReduceOperation(collection, map, reduce, options) {\n    var _this;\n\n    _classCallCheck(this, MapReduceOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    _this.map = map;\n    _this.reduce = reduce;\n    return _this;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  _createClass(MapReduceOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var map = this.map;\n      var reduce = this.reduce;\n      var options = this.options;\n      var mapCommandHash = {\n        mapreduce: coll.collectionName,\n        map: map,\n        reduce: reduce\n      }; // Add any other options passed in\n\n      for (var n in options) {\n        if ('scope' === n) {\n          mapCommandHash[n] = processScope(options[n]);\n        } else {\n          // Only include if not in exclusion list\n          if (exclusionList.indexOf(n) === -1) {\n            mapCommandHash[n] = options[n];\n          }\n        }\n      }\n\n      options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n      options.readPreference = resolveReadPreference(coll, options); // If we have a read preference and inline is not set as output fail hard\n\n      if (options.readPreference !== false && options.readPreference !== 'primary' && options['out'] && options['out'].inline !== 1 && options['out'] !== 'inline') {\n        // Force readPreference to primary\n        options.readPreference = 'primary'; // Decorate command with writeConcern if supported\n\n        applyWriteConcern(mapCommandHash, {\n          db: coll.s.db,\n          collection: coll\n        }, options);\n      } else {\n        decorateWithReadConcern(mapCommandHash, coll, options);\n      } // Is bypassDocumentValidation specified\n\n\n      if (options.bypassDocumentValidation === true) {\n        mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n      } // Have we specified collation\n\n\n      try {\n        decorateWithCollation(mapCommandHash, coll, options);\n      } catch (err) {\n        return callback(err, null);\n      } // Execute command\n\n\n      executeCommand(coll.s.db, mapCommandHash, options, function (err, result) {\n        if (err) return handleCallback(callback, err); // Check if we have an error\n\n        if (1 !== result.ok || result.err || result.errmsg) {\n          return handleCallback(callback, toError(result));\n        } // Create statistics value\n\n\n        var stats = {};\n        if (result.timeMillis) stats['processtime'] = result.timeMillis;\n        if (result.counts) stats['counts'] = result.counts;\n        if (result.timing) stats['timing'] = result.timing; // invoked with inline?\n\n        if (result.results) {\n          // If we wish for no verbosity\n          if (options['verbose'] == null || !options['verbose']) {\n            return handleCallback(callback, null, result.results);\n          }\n\n          return handleCallback(callback, null, {\n            results: result.results,\n            stats: stats\n          });\n        } // The returned collection\n\n\n        var collection = null; // If we have an object it's a different db\n\n        if (result.result != null && typeof result.result === 'object') {\n          var doc = result.result; // Return a collection from another db\n\n          var Db = loadDb();\n          collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(doc.collection);\n        } else {\n          // Create a collection object that wraps the result collection\n          collection = coll.s.db.collection(result.result);\n        } // If we wish for no verbosity\n\n\n        if (options['verbose'] == null || !options['verbose']) {\n          return handleCallback(callback, err, collection);\n        } // Return stats as third set of values\n\n\n        handleCallback(callback, err, {\n          collection: collection,\n          stats: stats\n        });\n      });\n    }\n  }]);\n\n  return MapReduceOperation;\n}(OperationBase);\n/**\n * Functions that are passed as scope args must\n * be converted to Code instances.\n * @ignore\n */\n\n\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  var keys = Object.keys(scope);\n  var key;\n  var new_scope = {};\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\nmodule.exports = MapReduceOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/map_reduce.js"],"names":["applyWriteConcern","require","Code","BSON","decorateWithCollation","decorateWithReadConcern","executeCommand","handleCallback","isObject","loadDb","OperationBase","resolveReadPreference","toError","exclusionList","MapReduceOperation","collection","map","reduce","options","callback","coll","mapCommandHash","mapreduce","collectionName","n","processScope","indexOf","Object","assign","readPreference","inline","db","s","bypassDocumentValidation","err","result","ok","errmsg","stats","timeMillis","counts","timing","results","doc","Db","topology","scope","_bsontype","keys","key","new_scope","i","length","String","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst Code = require('../core').BSON.Code;\nconst decorateWithCollation = require('../utils').decorateWithCollation;\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\nconst executeCommand = require('./db_ops').executeCommand;\nconst handleCallback = require('../utils').handleCallback;\nconst isObject = require('../utils').isObject;\nconst loadDb = require('../dynamic_loaders').loadDb;\nconst OperationBase = require('./operation').OperationBase;\nconst resolveReadPreference = require('../utils').resolveReadPreference;\nconst toError = require('../utils').toError;\n\nconst exclusionList = [\n  'readPreference',\n  'session',\n  'bypassDocumentValidation',\n  'w',\n  'wtimeout',\n  'j',\n  'writeConcern'\n];\n\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {(function|string)} map The mapping function.\n * @property {(function|string)} reduce The reduce function.\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n */\nclass MapReduceOperation extends OperationBase {\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {(function|string)} map The mapping function.\n   * @param {(function|string)} reduce The reduce function.\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  constructor(collection, map, reduce, options) {\n    super(options);\n\n    this.collection = collection;\n    this.map = map;\n    this.reduce = reduce;\n  }\n\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n  execute(callback) {\n    const coll = this.collection;\n    const map = this.map;\n    const reduce = this.reduce;\n    let options = this.options;\n\n    const mapCommandHash = {\n      mapreduce: coll.collectionName,\n      map: map,\n      reduce: reduce\n    };\n\n    // Add any other options passed in\n    for (let n in options) {\n      if ('scope' === n) {\n        mapCommandHash[n] = processScope(options[n]);\n      } else {\n        // Only include if not in exclusion list\n        if (exclusionList.indexOf(n) === -1) {\n          mapCommandHash[n] = options[n];\n        }\n      }\n    }\n\n    options = Object.assign({}, options);\n\n    // Ensure we have the right read preference inheritance\n    options.readPreference = resolveReadPreference(coll, options);\n\n    // If we have a read preference and inline is not set as output fail hard\n    if (\n      options.readPreference !== false &&\n      options.readPreference !== 'primary' &&\n      options['out'] &&\n      options['out'].inline !== 1 &&\n      options['out'] !== 'inline'\n    ) {\n      // Force readPreference to primary\n      options.readPreference = 'primary';\n      // Decorate command with writeConcern if supported\n      applyWriteConcern(mapCommandHash, { db: coll.s.db, collection: coll }, options);\n    } else {\n      decorateWithReadConcern(mapCommandHash, coll, options);\n    }\n\n    // Is bypassDocumentValidation specified\n    if (options.bypassDocumentValidation === true) {\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(mapCommandHash, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Execute command\n    executeCommand(coll.s.db, mapCommandHash, options, (err, result) => {\n      if (err) return handleCallback(callback, err);\n      // Check if we have an error\n      if (1 !== result.ok || result.err || result.errmsg) {\n        return handleCallback(callback, toError(result));\n      }\n\n      // Create statistics value\n      const stats = {};\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\n      if (result.counts) stats['counts'] = result.counts;\n      if (result.timing) stats['timing'] = result.timing;\n\n      // invoked with inline?\n      if (result.results) {\n        // If we wish for no verbosity\n        if (options['verbose'] == null || !options['verbose']) {\n          return handleCallback(callback, null, result.results);\n        }\n\n        return handleCallback(callback, null, { results: result.results, stats: stats });\n      }\n\n      // The returned collection\n      let collection = null;\n\n      // If we have an object it's a different db\n      if (result.result != null && typeof result.result === 'object') {\n        const doc = result.result;\n        // Return a collection from another db\n        let Db = loadDb();\n        collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(\n          doc.collection\n        );\n      } else {\n        // Create a collection object that wraps the result collection\n        collection = coll.s.db.collection(result.result);\n      }\n\n      // If we wish for no verbosity\n      if (options['verbose'] == null || !options['verbose']) {\n        return handleCallback(callback, err, collection);\n      }\n\n      // Return stats as third set of values\n      handleCallback(callback, err, { collection: collection, stats: stats });\n    });\n  }\n}\n\n/**\n * Functions that are passed as scope args must\n * be converted to Code instances.\n * @ignore\n */\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  const keys = Object.keys(scope);\n  let key;\n  const new_scope = {};\n\n  for (let i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\nmodule.exports = MapReduceOperation;\n"]},"metadata":{},"sourceType":"script"}