{"ast":null,"code":"'use strict';\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar ServerDescriptionChangedEvent = function ServerDescriptionChangedEvent(topologyId, address, previousDescription, newDescription) {\n  _classCallCheck(this, ServerDescriptionChangedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    address: address,\n    previousDescription: previousDescription,\n    newDescription: newDescription\n  });\n};\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\n\n\nvar ServerOpeningEvent = function ServerOpeningEvent(topologyId, address) {\n  _classCallCheck(this, ServerOpeningEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    address: address\n  });\n};\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\n\n\nvar ServerClosedEvent = function ServerClosedEvent(topologyId, address) {\n  _classCallCheck(this, ServerClosedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    address: address\n  });\n};\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\n\n\nvar TopologyDescriptionChangedEvent = function TopologyDescriptionChangedEvent(topologyId, previousDescription, newDescription) {\n  _classCallCheck(this, TopologyDescriptionChangedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    previousDescription: previousDescription,\n    newDescription: newDescription\n  });\n};\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nvar TopologyOpeningEvent = function TopologyOpeningEvent(topologyId) {\n  _classCallCheck(this, TopologyOpeningEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId\n  });\n};\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nvar TopologyClosedEvent = function TopologyClosedEvent(topologyId) {\n  _classCallCheck(this, TopologyClosedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId\n  });\n};\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\n\n\nvar ServerHeartbeatStartedEvent = function ServerHeartbeatStartedEvent(connectionId) {\n  _classCallCheck(this, ServerHeartbeatStartedEvent);\n\n  Object.assign(this, {\n    connectionId: connectionId\n  });\n};\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\n\n\nvar ServerHeartbeatSucceededEvent = function ServerHeartbeatSucceededEvent(duration, reply, connectionId) {\n  _classCallCheck(this, ServerHeartbeatSucceededEvent);\n\n  Object.assign(this, {\n    connectionId: connectionId,\n    duration: duration,\n    reply: reply\n  });\n};\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\n\n\nvar ServerHeartbeatFailedEvent = function ServerHeartbeatFailedEvent(duration, failure, connectionId) {\n  _classCallCheck(this, ServerHeartbeatFailedEvent);\n\n  Object.assign(this, {\n    connectionId: connectionId,\n    duration: duration,\n    failure: failure\n  });\n};\n\nmodule.exports = {\n  ServerDescriptionChangedEvent: ServerDescriptionChangedEvent,\n  ServerOpeningEvent: ServerOpeningEvent,\n  ServerClosedEvent: ServerClosedEvent,\n  TopologyDescriptionChangedEvent: TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent: TopologyOpeningEvent,\n  TopologyClosedEvent: TopologyClosedEvent,\n  ServerHeartbeatStartedEvent: ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent: ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent: ServerHeartbeatFailedEvent\n};","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/sdam/events.js"],"names":["ServerDescriptionChangedEvent","topologyId","address","previousDescription","newDescription","Object","assign","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\nclass ServerDescriptionChangedEvent {\n  constructor(topologyId, address, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, address, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\nclass ServerOpeningEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\nclass ServerClosedEvent {\n  constructor(topologyId, address) {\n    Object.assign(this, { topologyId, address });\n  }\n}\n\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\nclass TopologyDescriptionChangedEvent {\n  constructor(topologyId, previousDescription, newDescription) {\n    Object.assign(this, { topologyId, previousDescription, newDescription });\n  }\n}\n\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyOpeningEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\nclass TopologyClosedEvent {\n  constructor(topologyId) {\n    Object.assign(this, { topologyId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatStartedEvent {\n  constructor(connectionId) {\n    Object.assign(this, { connectionId });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatSucceededEvent {\n  constructor(duration, reply, connectionId) {\n    Object.assign(this, { connectionId, duration, reply });\n  }\n}\n\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\nclass ServerHeartbeatFailedEvent {\n  constructor(duration, failure, connectionId) {\n    Object.assign(this, { connectionId, duration, failure });\n  }\n}\n\nmodule.exports = {\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent\n};\n"]},"metadata":{},"sourceType":"script"}