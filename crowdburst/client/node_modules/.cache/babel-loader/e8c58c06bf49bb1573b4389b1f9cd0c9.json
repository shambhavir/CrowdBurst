{"ast":null,"code":"'use strict';\n\nvar _require = require('./lib/memory-code-points'),\n    unassigned_code_points = _require.unassigned_code_points,\n    commonly_mapped_to_nothing = _require.commonly_mapped_to_nothing,\n    non_ASCII_space_characters = _require.non_ASCII_space_characters,\n    prohibited_characters = _require.prohibited_characters,\n    bidirectional_r_al = _require.bidirectional_r_al,\n    bidirectional_l = _require.bidirectional_l;\n\nmodule.exports = saslprep; // 2.1.  Mapping\n\n/**\n * non-ASCII space characters [StringPrep, C.1.2] that can be\n * mapped to SPACE (U+0020)\n */\n\nvar mapping2space = non_ASCII_space_characters;\n/**\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\n * that can be mapped to nothing.\n */\n\nvar mapping2nothing = commonly_mapped_to_nothing; // utils\n\nvar getCodePoint = function getCodePoint(character) {\n  return character.codePointAt(0);\n};\n\nvar first = function first(x) {\n  return x[0];\n};\n\nvar last = function last(x) {\n  return x[x.length - 1];\n};\n/**\n * Convert provided string into an array of Unicode Code Points.\n * Based on https://stackoverflow.com/a/21409165/1556249\n * and https://www.npmjs.com/package/code-point-at.\n * @param {string} input\n * @returns {number[]}\n */\n\n\nfunction toCodePoints(input) {\n  var codepoints = [];\n  var size = input.length;\n\n  for (var i = 0; i < size; i += 1) {\n    var before = input.charCodeAt(i);\n\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      var next = input.charCodeAt(i + 1);\n\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n\n    codepoints.push(before);\n  }\n\n  return codepoints;\n}\n/**\n * SASLprep.\n * @param {string} input\n * @param {Object} opts\n * @param {boolean} opts.allowUnassigned\n * @returns {string}\n */\n\n\nfunction saslprep(input) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n\n  if (input.length === 0) {\n    return '';\n  } // 1. Map\n\n\n  var mapped_input = toCodePoints(input) // 1.1 mapping to space\n  .map(function (character) {\n    return mapping2space.get(character) ? 0x20 : character;\n  }) // 1.2 mapping to nothing\n  .filter(function (character) {\n    return !mapping2nothing.get(character);\n  }); // 2. Normalize\n\n  var normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize('NFKC');\n  var normalized_map = toCodePoints(normalized_input); // 3. Prohibit\n\n  var hasProhibited = normalized_map.some(function (character) {\n    return prohibited_characters.get(character);\n  });\n\n  if (hasProhibited) {\n    throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');\n  } // Unassigned Code Points\n\n\n  if (opts.allowUnassigned !== true) {\n    var hasUnassigned = normalized_map.some(function (character) {\n      return unassigned_code_points.get(character);\n    });\n\n    if (hasUnassigned) {\n      throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');\n    }\n  } // 4. check bidi\n\n\n  var hasBidiRAL = normalized_map.some(function (character) {\n    return bidirectional_r_al.get(character);\n  });\n  var hasBidiL = normalized_map.some(function (character) {\n    return bidirectional_l.get(character);\n  }); // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error('String must not contain RandALCat and LCat at the same time,' + ' see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n  /**\n   * 4.2 If a string contains any RandALCat character, a RandALCat\n   * character MUST be the first character of the string, and a\n   * RandALCat character MUST be the last character of the string.\n   */\n\n\n  var isFirstBidiRAL = bidirectional_r_al.get(getCodePoint(first(normalized_input)));\n  var isLastBidiRAL = bidirectional_r_al.get(getCodePoint(last(normalized_input)));\n\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error('Bidirectional RandALCat character must be the first and the last' + ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n\n  return normalized_input;\n}","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/saslprep/index.js"],"names":["require","unassigned_code_points","commonly_mapped_to_nothing","non_ASCII_space_characters","prohibited_characters","bidirectional_r_al","bidirectional_l","module","exports","saslprep","mapping2space","mapping2nothing","getCodePoint","character","codePointAt","first","x","last","length","toCodePoints","input","codepoints","size","i","before","charCodeAt","next","push","opts","TypeError","mapped_input","map","get","filter","normalized_input","String","fromCodePoint","apply","normalize","normalized_map","hasProhibited","some","Error","allowUnassigned","hasUnassigned","hasBidiRAL","hasBidiL","isFirstBidiRAL","isLastBidiRAL"],"mappings":"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","sourcesContent":["'use strict';\n\nconst {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l,\n} = require('./lib/memory-code-points');\n\nmodule.exports = saslprep;\n\n// 2.1.  Mapping\n\n/**\n * non-ASCII space characters [StringPrep, C.1.2] that can be\n * mapped to SPACE (U+0020)\n */\nconst mapping2space = non_ASCII_space_characters;\n\n/**\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\n * that can be mapped to nothing.\n */\nconst mapping2nothing = commonly_mapped_to_nothing;\n\n// utils\nconst getCodePoint = character => character.codePointAt(0);\nconst first = x => x[0];\nconst last = x => x[x.length - 1];\n\n/**\n * Convert provided string into an array of Unicode Code Points.\n * Based on https://stackoverflow.com/a/21409165/1556249\n * and https://www.npmjs.com/package/code-point-at.\n * @param {string} input\n * @returns {number[]}\n */\nfunction toCodePoints(input) {\n  const codepoints = [];\n  const size = input.length;\n\n  for (let i = 0; i < size; i += 1) {\n    const before = input.charCodeAt(i);\n\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      const next = input.charCodeAt(i + 1);\n\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n\n    codepoints.push(before);\n  }\n\n  return codepoints;\n}\n\n/**\n * SASLprep.\n * @param {string} input\n * @param {Object} opts\n * @param {boolean} opts.allowUnassigned\n * @returns {string}\n */\nfunction saslprep(input, opts = {}) {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  // 1. Map\n  const mapped_input = toCodePoints(input)\n    // 1.1 mapping to space\n    .map(character => (mapping2space.get(character) ? 0x20 : character))\n    // 1.2 mapping to nothing\n    .filter(character => !mapping2nothing.get(character));\n\n  // 2. Normalize\n  const normalized_input = String.fromCodePoint\n    .apply(null, mapped_input)\n    .normalize('NFKC');\n\n  const normalized_map = toCodePoints(normalized_input);\n\n  // 3. Prohibit\n  const hasProhibited = normalized_map.some(character =>\n    prohibited_characters.get(character)\n  );\n\n  if (hasProhibited) {\n    throw new Error(\n      'Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3'\n    );\n  }\n\n  // Unassigned Code Points\n  if (opts.allowUnassigned !== true) {\n    const hasUnassigned = normalized_map.some(character =>\n      unassigned_code_points.get(character)\n    );\n\n    if (hasUnassigned) {\n      throw new Error(\n        'Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5'\n      );\n    }\n  }\n\n  // 4. check bidi\n\n  const hasBidiRAL = normalized_map.some(character =>\n    bidirectional_r_al.get(character)\n  );\n\n  const hasBidiL = normalized_map.some(character =>\n    bidirectional_l.get(character)\n  );\n\n  // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error(\n      'String must not contain RandALCat and LCat at the same time,' +\n        ' see https://tools.ietf.org/html/rfc3454#section-6'\n    );\n  }\n\n  /**\n   * 4.2 If a string contains any RandALCat character, a RandALCat\n   * character MUST be the first character of the string, and a\n   * RandALCat character MUST be the last character of the string.\n   */\n\n  const isFirstBidiRAL = bidirectional_r_al.get(\n    getCodePoint(first(normalized_input))\n  );\n  const isLastBidiRAL = bidirectional_r_al.get(\n    getCodePoint(last(normalized_input))\n  );\n\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error(\n      'Bidirectional RandALCat character must be the first and the last' +\n        ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6'\n    );\n  }\n\n  return normalized_input;\n}\n"]},"metadata":{},"sourceType":"script"}