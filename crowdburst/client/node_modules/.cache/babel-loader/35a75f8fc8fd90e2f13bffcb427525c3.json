{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar checkCollectionName = require('../utils').checkCollectionName;\n\nvar executeDbAdminCommand = require('./db_ops').executeDbAdminCommand;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar loadCollection = require('../dynamic_loaders').loadCollection;\n\nvar toError = require('../utils').toError;\n\nvar RenameOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(RenameOperation, _OperationBase);\n\n  var _super = _createSuper(RenameOperation);\n\n  function RenameOperation(collection, newName, options) {\n    var _this;\n\n    _classCallCheck(this, RenameOperation);\n\n    _this = _super.call(this, options);\n    _this.collection = collection;\n    _this.newName = newName;\n    return _this;\n  }\n\n  _createClass(RenameOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var newName = this.newName;\n      var options = this.options;\n      var Collection = loadCollection(); // Check the collection name\n\n      checkCollectionName(newName); // Build the command\n\n      var renameCollection = coll.namespace;\n      var toCollection = coll.s.namespace.withCollection(newName).toString();\n      var dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n      var cmd = {\n        renameCollection: renameCollection,\n        to: toCollection,\n        dropTarget: dropTarget\n      }; // Decorate command with writeConcern if supported\n\n      applyWriteConcern(cmd, {\n        db: coll.s.db,\n        collection: coll\n      }, options); // Execute against admin\n\n      executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, function (err, doc) {\n        if (err) return handleCallback(callback, err, null); // We have an error\n\n        if (doc.errmsg) return handleCallback(callback, toError(doc), null);\n\n        try {\n          return handleCallback(callback, null, new Collection(coll.s.db, coll.s.topology, coll.s.namespace.db, newName, coll.s.pkFactory, coll.s.options));\n        } catch (err) {\n          return handleCallback(callback, toError(err), null);\n        }\n      });\n    }\n  }]);\n\n  return RenameOperation;\n}(OperationBase);\n\nmodule.exports = RenameOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/rename.js"],"names":["OperationBase","require","applyWriteConcern","checkCollectionName","executeDbAdminCommand","handleCallback","loadCollection","toError","RenameOperation","collection","newName","options","callback","coll","Collection","renameCollection","namespace","toCollection","s","withCollection","toString","dropTarget","cmd","to","db","admin","err","doc","errmsg","topology","pkFactory","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst checkCollectionName = require('../utils').checkCollectionName;\nconst executeDbAdminCommand = require('./db_ops').executeDbAdminCommand;\nconst handleCallback = require('../utils').handleCallback;\nconst loadCollection = require('../dynamic_loaders').loadCollection;\nconst toError = require('../utils').toError;\n\nclass RenameOperation extends OperationBase {\n  constructor(collection, newName, options) {\n    super(options);\n\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const newName = this.newName;\n    const options = this.options;\n\n    let Collection = loadCollection();\n    // Check the collection name\n    checkCollectionName(newName);\n    // Build the command\n    const renameCollection = coll.namespace;\n    const toCollection = coll.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };\n\n    // Decorate command with writeConcern if supported\n    applyWriteConcern(cmd, { db: coll.s.db, collection: coll }, options);\n\n    // Execute against admin\n    executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, (err, doc) => {\n      if (err) return handleCallback(callback, err, null);\n      // We have an error\n      if (doc.errmsg) return handleCallback(callback, toError(doc), null);\n      try {\n        return handleCallback(\n          callback,\n          null,\n          new Collection(\n            coll.s.db,\n            coll.s.topology,\n            coll.s.namespace.db,\n            newName,\n            coll.s.pkFactory,\n            coll.s.options\n          )\n        );\n      } catch (err) {\n        return handleCallback(callback, toError(err), null);\n      }\n    });\n  }\n}\n\nmodule.exports = RenameOperation;\n"]},"metadata":{},"sourceType":"script"}