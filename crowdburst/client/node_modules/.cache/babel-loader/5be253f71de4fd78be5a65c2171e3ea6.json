{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries';\nimport GrocerySearch2 from './GrocerySearch2'; // import App3 from './test6/my-app/src2';\n//import { render } from 'ejs';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql'\n  })\n});\n\nconst App2 = () => /*#__PURE__*/React.createElement(BrowserRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }\n}, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n  style: {\n    padding: '10px'\n  },\n  key: data.message,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    color: 'gray'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 19\n  }\n}, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 73\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    color: 'gray'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 19\n  }\n}, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    padding: '10px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  onChange: e => this.setState({\n    message: e.target.value\n  }),\n  placeholder: \"add something in the database\",\n  style: {\n    width: '200px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => this.putDataToDB(this.state.message),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 11\n  }\n}, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    padding: '10px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: '200px'\n  },\n  onChange: e => this.setState({\n    idToDelete: e.target.value\n  }),\n  placeholder: \"put id of item to delete here\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => this.deleteFromDB(this.state.idToDelete),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 11\n  }\n}, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    padding: '10px'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: '200px'\n  },\n  onChange: e => this.setState({\n    idToUpdate: e.target.value\n  }),\n  placeholder: \"id of item to update here\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  style: {\n    width: '200px'\n  },\n  onChange: e => this.setState({\n    updateToApply: e.target.value\n  }),\n  placeholder: \"put new value of the item here\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 11\n  }\n}, \"UPDATE\"))), /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Route, {\n  path: \"/grocery/:id\",\n  component: Groceries,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/\",\n  component: GrocerySearch2,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }\n})))); // ReactDOM.render(<App2 />, document.getElementById('root'))\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(App2, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // requireServiceWorker(); \n// render(<App2/>, document.getElementById('root')); \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/index.js"],"names":["React","Component","ReactDOM","render","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","BrowserRouter","Route","Switch","Groceries","GrocerySearch2","client","cache","link","uri","App2","data","length","map","dat","padding","message","color","id","e","setState","target","value","width","putDataToDB","state","idToDelete","deleteFromDB","idToUpdate","updateToApply","updateDB","document","getElementById"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache,split } from '@apollo/client'; \nimport {getMainDefinition} from '@apollo/client/utilities'; \nimport {WebSocketLink} from '@apollo/link-ws'; \nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries'; \nimport GrocerySearch2 from './GrocerySearch2'; \n// import App3 from './test6/my-app/src2';\n\n//import { render } from 'ejs';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n\n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n\n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n\n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n  })\n}); \n\nconst App2 = () => (\n  \n<BrowserRouter>\n  <ApolloProvider client = {client}>\n    {/* <div>\n      <h2>My first React App</h2>\n    </div> */}\n    {/* <Form2/> */}\n    {/* <Grocery/> */}\n    {/* <App3/> */}\n\n\n    <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n\n\n\n  <Switch> \n        <Route path=\"/grocery/:id\" component={Groceries} />\n        <Route path=\"/\" component={GrocerySearch2} />\n  </Switch> \n  </ApolloProvider>\n  </BrowserRouter>\n); \n\n\n\n// ReactDOM.render(<App2 />, document.getElementById('root'))\nReactDOM.render(<App2/>, document.getElementById('root')); \n// requireServiceWorker(); \n\n// render(<App2/>, document.getElementById('root')); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}