{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/src/GrocerySearch2.js\";\nimport React, { useState } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\"; //import Search from \"./Search\";\n\nimport Grocery from \"./shared/Grocery\";\nimport Inputform from \"./InputForm\";\nconst SEARCH = gql`\nquery GroceryQuery($id: String!) {\n    grocery_by_pk(id: $id) {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n}\n`; //   query Search($match: String) {\n//     grocery(order_by: { name: asc }, where: { name: { _ilike: $match } }) {\n//       name\n//       alias\n//       id\n//     }\n//   }\n\nconst GrocerySearch = () => {\n  const [inputVal, setInputVal] = useState(\"\");\n  const [search, {\n    loading,\n    error,\n    data\n  }] = useLazyQuery(SEARCH);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }\n  }, \"Loading ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputForm, {\n    inputVal: inputVal,\n    onChange: e => setInputVal(e.target.value),\n    onSubmit: () => search({\n      variables: {\n        match: `%${inputVal}%`\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grocery, {\n    newGrocery: data ? data.grocery : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default GrocerySearch;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/src/GrocerySearch2.js"],"names":["React","useState","useLazyQuery","gql","Grocery","Inputform","SEARCH","GrocerySearch","inputVal","setInputVal","search","loading","error","data","e","target","value","variables","match","grocery"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,gBAAlC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAGA,MAAMC,MAAM,GAAGH,GAAI;;;;;;;;;;;;;CAAnB,C,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMI,aAAa,GAAG,MAAM;AAE1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,MAAD,EAAS;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAT,IAAqCX,YAAY,CAACI,MAAD,CAAvD;AACA,MAAIK,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAET,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,QAAQ,EAAEJ,QADZ;AAEE,IAAA,QAAQ,EAAGM,CAAD,IAAOL,WAAW,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAF9B;AAGE,IAAA,QAAQ,EAAE,MAAMN,MAAM,CAAC;AAAEO,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAG,IAAGV,QAAS;AAAtB;AAAb,KAAD,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME,oBAAC,OAAD;AAAS,IAAA,UAAU,EAAEK,IAAI,GAAGA,IAAI,CAACM,OAAR,GAAkB,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAjBH;;AAmBA,eAAeZ,aAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\n//import Search from \"./Search\";\nimport Grocery from \"./shared/Grocery\";\nimport Inputform from \"./InputForm\";\n\n\nconst SEARCH = gql`\nquery GroceryQuery($id: String!) {\n    grocery_by_pk(id: $id) {\n      address\n      alias\n      id\n      name\n      finrevs {\n        body\n        grid\n      }\n    }\n}\n`;\n\n//   query Search($match: String) {\n//     grocery(order_by: { name: asc }, where: { name: { _ilike: $match } }) {\n//       name\n//       alias\n//       id\n//     }\n//   }\nconst GrocerySearch = () => {\n  \n  const [inputVal, setInputVal] = useState(\"\");\n  const [search, { loading, error, data }] = useLazyQuery(SEARCH);\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <p>Error :(</p>;\n\n    return (\n      <div>\n        <InputForm\n          inputVal={inputVal}\n          onChange={(e) => setInputVal(e.target.value)}\n          onSubmit={() => search({ variables: { match: `%${inputVal}%` } })}\n        />\n        <Grocery newGrocery={data ? data.grocery : null} />\n      </div>\n    );\n  };\n\nexport default GrocerySearch;"]},"metadata":{},"sourceType":"module"}