{"ast":null,"code":"var _jsxFileName = \"/Users/S/Desktop/nodeprotake2/crowdburst/client/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries';\nimport GrocerySearch2 from './GrocerySearch2';\nimport axios from 'axios';\nimport bt from './bt';\nimport App from './App';\nimport AppFront from './AppFront';\nimport Stitch2 from './Stitch2'; // import server from './server'; \n// import App3 from './test6/my-app/src2';\n//import { render } from 'ejs';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql'\n  })\n}); // const data = new Array()\n\nconst data = new Array(); // const id = 0\n// const message = null\n// const intervalIsSet = false\n// const idToDelete = null\n// const idToUpdate = null\n// const objectToUpdate = null\n\nconst App2 = () => /*#__PURE__*/React.createElement(BrowserRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Route, {\n  path: \"/grocery/:id\",\n  component: Groceries,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/\",\n  component: GrocerySearch2,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }\n})))); // ReactDOM.render(<App2 />, document.getElementById('root'))\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(App2, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // requireServiceWorker(); \n// render(<App2/>, document.getElementById('root')); \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/crowdburst/client/src/index.js"],"names":["React","Component","ReactDOM","render","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","split","getMainDefinition","WebSocketLink","BrowserRouter","Route","Switch","Groceries","GrocerySearch2","axios","bt","App","AppFront","Stitch2","client","cache","link","uri","data","Array","App2","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAA+CC,KAA/C,QAA4D,gBAA5D;AACA,SAAQC,iBAAR,QAAgC,0BAAhC;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BiB,EAAAA,KAAK,EAAE,IAAIf,aAAJ,EADuB;AAE9BgB,EAAAA,IAAI,EAAE,IAAIjB,QAAJ,CAAa;AACjBkB,IAAAA,GAAG,EAAE;AADY,GAAb;AAFwB,CAAjB,CAAf,C,CAMA;;AAGM,MAAMC,IAAI,GAAI,IAAIC,KAAJ,EAAd,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAKN,MAAMC,IAAI,GAAG,mBAIb,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAIN,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EARF,eAYA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACM,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,cAAZ;AAA2B,EAAA,SAAS,EAAEP,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADN,eAEM,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,GAAZ;AAAgB,EAAA,SAAS,EAAEC,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFN,CAZA,CADF,CAJA,C,CA6BA;;;AACAb,QAAQ,CAACC,MAAT,eAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyByB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CACA;AAEA;AAGA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache,split } from '@apollo/client'; \nimport {getMainDefinition} from '@apollo/client/utilities'; \nimport {WebSocketLink} from '@apollo/link-ws'; \nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries'; \nimport GrocerySearch2 from './GrocerySearch2'; \nimport axios from 'axios';\nimport bt from './bt'; \nimport App from './App'; \nimport AppFront from './AppFront'; \nimport Stitch2 from './Stitch2'; \n// import server from './server'; \n\n// import App3 from './test6/my-app/src2';\n\n//import { render } from 'ejs';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n\n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n\n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n\n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n  })\n}); \n// const data = new Array()\n\n\n      const data =  new Array()\n      // const id = 0\n      // const message = null\n      // const intervalIsSet = false\n      // const idToDelete = null\n      // const idToUpdate = null\n      // const objectToUpdate = null\n  \n\n     \n\nconst App2 = () => (\n  \n  \n\n<BrowserRouter>\n  <ApolloProvider client = {client}>\n    {/* <div>\n      <h2>My first React App</h2>\n    </div> */}\n\n    {/* <Grocery/> */}\n    {/* <App3/> */}\n\n    <App/>\n    {/* <Stitch2/> */}\n    {/* <AppFront/> */}\n    {/* <server/> */}\n  <Switch> \n        <Route path=\"/grocery/:id\" component={Groceries} />\n        <Route path=\"/\" component={GrocerySearch2} />\n  </Switch> \n  </ApolloProvider>\n  </BrowserRouter>\n); \n\n\n\n\n\n// ReactDOM.render(<App2 />, document.getElementById('root'))\nReactDOM.render(<App2/>, document.getElementById('root')); \n// requireServiceWorker(); \n\n// render(<App2/>, document.getElementById('root')); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}