{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar AuthProvider = require('./auth_provider').AuthProvider;\n\nvar retrieveKerberos = require('../utils').retrieveKerberos;\n\nvar kerberos;\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @extends AuthProvider\n */\n\nvar SSPI = /*#__PURE__*/function (_AuthProvider) {\n  _inherits(SSPI, _AuthProvider);\n\n  var _super = _createSuper(SSPI);\n\n  function SSPI() {\n    _classCallCheck(this, SSPI);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SSPI, [{\n    key: \"_authenticateSingleConnection\",\n\n    /**\n     * Implementation of authentication for a single connection\n     * @override\n     */\n    value: function _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n      // TODO: Destructure this\n      var username = credentials.username;\n      var password = credentials.password;\n      var mechanismProperties = credentials.mechanismProperties;\n      var gssapiServiceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n      SSIPAuthenticate(this, kerberos.processes.MongoAuthProcess, username, password, gssapiServiceName, sendAuthCommand, connection, mechanismProperties, callback);\n    }\n    /**\n     * Authenticate\n     * @override\n     * @method\n     */\n\n  }, {\n    key: \"auth\",\n    value: function auth(sendAuthCommand, connections, credentials, callback) {\n      if (kerberos == null) {\n        try {\n          kerberos = retrieveKerberos();\n        } catch (e) {\n          return callback(e, null);\n        }\n      }\n\n      _get(_getPrototypeOf(SSPI.prototype), \"auth\", this).call(this, sendAuthCommand, connections, credentials, callback);\n    }\n  }]);\n\n  return SSPI;\n}(AuthProvider);\n\nfunction SSIPAuthenticate(self, MongoAuthProcess, username, password, gssapiServiceName, sendAuthCommand, connection, options, callback) {\n  var authProcess = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options);\n\n  function authCommand(command, authCb) {\n    sendAuthCommand(connection, '$external.$cmd', command, authCb);\n  }\n\n  authProcess.init(username, password, function (err) {\n    if (err) return callback(err, false);\n    authProcess.transition('', function (err, payload) {\n      if (err) return callback(err, false);\n      var command = {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload: payload,\n        autoAuthorize: 1\n      };\n      authCommand(command, function (err, doc) {\n        if (err) return callback(err, false);\n        authProcess.transition(doc.payload, function (err, payload) {\n          if (err) return callback(err, false);\n          var command = {\n            saslContinue: 1,\n            conversationId: doc.conversationId,\n            payload: payload\n          };\n          authCommand(command, function (err, doc) {\n            if (err) return callback(err, false);\n            authProcess.transition(doc.payload, function (err, payload) {\n              if (err) return callback(err, false);\n              var command = {\n                saslContinue: 1,\n                conversationId: doc.conversationId,\n                payload: payload\n              };\n              authCommand(command, function (err, response) {\n                if (err) return callback(err, false);\n                authProcess.transition(null, function (err) {\n                  if (err) return callback(err, null);\n                  callback(null, response);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nmodule.exports = SSPI;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/core/auth/sspi.js"],"names":["AuthProvider","require","retrieveKerberos","kerberos","SSPI","sendAuthCommand","connection","credentials","callback","username","password","mechanismProperties","gssapiServiceName","SSIPAuthenticate","processes","MongoAuthProcess","connections","e","self","options","authProcess","host","port","authCommand","command","authCb","init","err","transition","payload","saslStart","mechanism","autoAuthorize","doc","saslContinue","conversationId","response","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst retrieveKerberos = require('../utils').retrieveKerberos;\nlet kerberos;\n\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @extends AuthProvider\n */\nclass SSPI extends AuthProvider {\n  /**\n   * Implementation of authentication for a single connection\n   * @override\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    // TODO: Destructure this\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName =\n      mechanismProperties['gssapiservicename'] ||\n      mechanismProperties['gssapiServiceName'] ||\n      'mongodb';\n\n    SSIPAuthenticate(\n      this,\n      kerberos.processes.MongoAuthProcess,\n      username,\n      password,\n      gssapiServiceName,\n      sendAuthCommand,\n      connection,\n      mechanismProperties,\n      callback\n    );\n  }\n\n  /**\n   * Authenticate\n   * @override\n   * @method\n   */\n  auth(sendAuthCommand, connections, credentials, callback) {\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n}\n\nfunction SSIPAuthenticate(\n  self,\n  MongoAuthProcess,\n  username,\n  password,\n  gssapiServiceName,\n  sendAuthCommand,\n  connection,\n  options,\n  callback\n) {\n  const authProcess = new MongoAuthProcess(\n    connection.host,\n    connection.port,\n    gssapiServiceName,\n    options\n  );\n\n  function authCommand(command, authCb) {\n    sendAuthCommand(connection, '$external.$cmd', command, authCb);\n  }\n\n  authProcess.init(username, password, err => {\n    if (err) return callback(err, false);\n\n    authProcess.transition('', (err, payload) => {\n      if (err) return callback(err, false);\n\n      const command = {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n      };\n\n      authCommand(command, (err, doc) => {\n        if (err) return callback(err, false);\n\n        authProcess.transition(doc.payload, (err, payload) => {\n          if (err) return callback(err, false);\n          const command = {\n            saslContinue: 1,\n            conversationId: doc.conversationId,\n            payload\n          };\n\n          authCommand(command, (err, doc) => {\n            if (err) return callback(err, false);\n\n            authProcess.transition(doc.payload, (err, payload) => {\n              if (err) return callback(err, false);\n              const command = {\n                saslContinue: 1,\n                conversationId: doc.conversationId,\n                payload\n              };\n\n              authCommand(command, (err, response) => {\n                if (err) return callback(err, false);\n\n                authProcess.transition(null, err => {\n                  if (err) return callback(err, null);\n                  callback(null, response);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nmodule.exports = SSPI;\n"]},"metadata":{},"sourceType":"script"}