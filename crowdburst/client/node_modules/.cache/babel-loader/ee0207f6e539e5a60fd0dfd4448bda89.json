{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/S/Desktop/nodeprotake2/crowdburst/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar buildCountCommand = require('./common_functions').buildCountCommand;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar CountOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(CountOperation, _OperationBase);\n\n  var _super = _createSuper(CountOperation);\n\n  function CountOperation(cursor, applySkipLimit, options) {\n    var _this;\n\n    _classCallCheck(this, CountOperation);\n\n    _this = _super.call(this, options);\n    _this.cursor = cursor;\n    _this.applySkipLimit = applySkipLimit;\n    return _this;\n  }\n\n  _createClass(CountOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var cursor = this.cursor;\n      var applySkipLimit = this.applySkipLimit;\n      var options = this.options;\n\n      if (applySkipLimit) {\n        if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();\n        if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();\n      } // Ensure we have the right read preference inheritance\n\n\n      if (options.readPreference) {\n        cursor.setReadPreference(options.readPreference);\n      }\n\n      if (typeof options.maxTimeMS !== 'number' && cursor.cmd && typeof cursor.cmd.maxTimeMS === 'number') {\n        options.maxTimeMS = cursor.cmd.maxTimeMS;\n      }\n\n      var finalOptions = {};\n      finalOptions.skip = options.skip;\n      finalOptions.limit = options.limit;\n      finalOptions.hint = options.hint;\n      finalOptions.maxTimeMS = options.maxTimeMS; // Command\n\n      finalOptions.collectionName = cursor.namespace.collection;\n      var command;\n\n      try {\n        command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);\n      } catch (err) {\n        return callback(err);\n      } // Set cursor server to the same as the topology\n\n\n      cursor.server = cursor.topology.s.coreTopology; // Execute the command\n\n      cursor.topology.command(cursor.namespace.withCollection('$cmd'), command, cursor.options, function (err, result) {\n        callback(err, result ? result.result.n : null);\n      });\n    }\n  }]);\n\n  return CountOperation;\n}(OperationBase);\n\nmodule.exports = CountOperation;","map":{"version":3,"sources":["/Users/S/Desktop/nodeprotake2/node_modules/mongodb/lib/operations/count.js"],"names":["buildCountCommand","require","OperationBase","CountOperation","cursor","applySkipLimit","options","callback","cursorSkip","skip","cursorLimit","limit","readPreference","setReadPreference","maxTimeMS","cmd","finalOptions","hint","collectionName","namespace","collection","command","query","err","server","topology","s","coreTopology","withCollection","result","n","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BD,iBAAxD;;AACA,IAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;IAEMC,c;;;;;AACJ,0BAAYC,MAAZ,EAAoBC,cAApB,EAAoCC,OAApC,EAA6C;AAAA;;AAAA;;AAC3C,8BAAMA,OAAN;AAEA,UAAKF,MAAL,GAAcA,MAAd;AACA,UAAKC,cAAL,GAAsBA,cAAtB;AAJ2C;AAK5C;;;;4BAEOE,Q,EAAU;AAChB,UAAMH,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,cAAc,GAAG,KAAKA,cAA5B;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAID,cAAJ,EAAoB;AAClB,YAAI,OAAOD,MAAM,CAACI,UAAP,EAAP,KAA+B,QAAnC,EAA6CF,OAAO,CAACG,IAAR,GAAeL,MAAM,CAACI,UAAP,EAAf;AAC7C,YAAI,OAAOJ,MAAM,CAACM,WAAP,EAAP,KAAgC,QAApC,EAA8CJ,OAAO,CAACK,KAAR,GAAgBP,MAAM,CAACM,WAAP,EAAhB;AAC/C,OARe,CAUhB;;;AACA,UAAIJ,OAAO,CAACM,cAAZ,EAA4B;AAC1BR,QAAAA,MAAM,CAACS,iBAAP,CAAyBP,OAAO,CAACM,cAAjC;AACD;;AAED,UACE,OAAON,OAAO,CAACQ,SAAf,KAA6B,QAA7B,IACAV,MAAM,CAACW,GADP,IAEA,OAAOX,MAAM,CAACW,GAAP,CAAWD,SAAlB,KAAgC,QAHlC,EAIE;AACAR,QAAAA,OAAO,CAACQ,SAAR,GAAoBV,MAAM,CAACW,GAAP,CAAWD,SAA/B;AACD;;AAED,UAAIE,YAAY,GAAG,EAAnB;AACAA,MAAAA,YAAY,CAACP,IAAb,GAAoBH,OAAO,CAACG,IAA5B;AACAO,MAAAA,YAAY,CAACL,KAAb,GAAqBL,OAAO,CAACK,KAA7B;AACAK,MAAAA,YAAY,CAACC,IAAb,GAAoBX,OAAO,CAACW,IAA5B;AACAD,MAAAA,YAAY,CAACF,SAAb,GAAyBR,OAAO,CAACQ,SAAjC,CA3BgB,CA6BhB;;AACAE,MAAAA,YAAY,CAACE,cAAb,GAA8Bd,MAAM,CAACe,SAAP,CAAiBC,UAA/C;AAEA,UAAIC,OAAJ;;AACA,UAAI;AACFA,QAAAA,OAAO,GAAGrB,iBAAiB,CAACI,MAAD,EAASA,MAAM,CAACW,GAAP,CAAWO,KAApB,EAA2BN,YAA3B,CAA3B;AACD,OAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,eAAOhB,QAAQ,CAACgB,GAAD,CAAf;AACD,OArCe,CAuChB;;;AACAnB,MAAAA,MAAM,CAACoB,MAAP,GAAgBpB,MAAM,CAACqB,QAAP,CAAgBC,CAAhB,CAAkBC,YAAlC,CAxCgB,CA0ChB;;AACAvB,MAAAA,MAAM,CAACqB,QAAP,CAAgBJ,OAAhB,CACEjB,MAAM,CAACe,SAAP,CAAiBS,cAAjB,CAAgC,MAAhC,CADF,EAEEP,OAFF,EAGEjB,MAAM,CAACE,OAHT,EAIE,UAACiB,GAAD,EAAMM,MAAN,EAAiB;AACftB,QAAAA,QAAQ,CAACgB,GAAD,EAAMM,MAAM,GAAGA,MAAM,CAACA,MAAP,CAAcC,CAAjB,GAAqB,IAAjC,CAAR;AACD,OANH;AAQD;;;;EA3D0B5B,a;;AA8D7B6B,MAAM,CAACC,OAAP,GAAiB7B,cAAjB","sourcesContent":["'use strict';\n\nconst buildCountCommand = require('./common_functions').buildCountCommand;\nconst OperationBase = require('./operation').OperationBase;\n\nclass CountOperation extends OperationBase {\n  constructor(cursor, applySkipLimit, options) {\n    super(options);\n\n    this.cursor = cursor;\n    this.applySkipLimit = applySkipLimit;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    const applySkipLimit = this.applySkipLimit;\n    const options = this.options;\n\n    if (applySkipLimit) {\n      if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();\n      if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();\n    }\n\n    // Ensure we have the right read preference inheritance\n    if (options.readPreference) {\n      cursor.setReadPreference(options.readPreference);\n    }\n\n    if (\n      typeof options.maxTimeMS !== 'number' &&\n      cursor.cmd &&\n      typeof cursor.cmd.maxTimeMS === 'number'\n    ) {\n      options.maxTimeMS = cursor.cmd.maxTimeMS;\n    }\n\n    let finalOptions = {};\n    finalOptions.skip = options.skip;\n    finalOptions.limit = options.limit;\n    finalOptions.hint = options.hint;\n    finalOptions.maxTimeMS = options.maxTimeMS;\n\n    // Command\n    finalOptions.collectionName = cursor.namespace.collection;\n\n    let command;\n    try {\n      command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);\n    } catch (err) {\n      return callback(err);\n    }\n\n    // Set cursor server to the same as the topology\n    cursor.server = cursor.topology.s.coreTopology;\n\n    // Execute the command\n    cursor.topology.command(\n      cursor.namespace.withCollection('$cmd'),\n      command,\n      cursor.options,\n      (err, result) => {\n        callback(err, result ? result.result.n : null);\n      }\n    );\n  }\n}\n\nmodule.exports = CountOperation;\n"]},"metadata":{},"sourceType":"script"}