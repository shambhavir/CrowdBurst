{"version":3,"sources":["../../../node_modules/require_optional sync","Components/shared/List.js","Components/shared/Form.js","Components/Search2.js","Components/List2.js","Components/Form2.js","Components/Groceries.js","Components/shared/Badge.js","Components/Grocery.js","GrocerySearch2.js","App.js","AppFront.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","List","styled","ul","ListItem","li","ListItemWithLink","Input","input","Button","button","SearchForm","div","Search","inputVal","onChange","onSubmit","buttonText","value","onClick","List2","props","state","filtered","handleChange","bind","this","setState","items","nextProps","newList","target","filter","item","lc","toLowerCase","includes","type","className","placeholder","map","key","delete","React","Component","Form2","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","list","addItem","preventDefault","newItem","document","getElementById","form","push","classList","remove","reset","add","removeItem","IHATECODE","gql","Groceries","Array","match","params","useQuery","variables","loading","error","data","useState","setInputVal","grocery_by_pk","name","address","finrevs","Search2","body","Badge","span","GROCERY","Grocery","newGrocery","grocery","to","SEARCH","GrocerySearch","useLazyQuery","search","MyForm","require","MongoClient","handleSubmit","event","FormData","fetch","method","htmlFor","AppFront","response","post","responseToPost","callApi","a","json","status","message","headers","JSON","stringify","text","then","res","express","catch","err","console","log","client","App2","ApolloProvider","App","path","component","GrocerySearch2","ReactDOM","render"],"mappings":"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","file":"static/js/main.2cb0cc87.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 174;","import styled from '@emotion/styled';\n\nexport const List = styled.ul \n`\n    padding: 0;\n    margin: 0;\n    max-width: 600px;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const ListItem = styled.li\n`\n    display: block;\n    padding: 3rem 5rem;\n    background-clor #fff;\n    border: 1px solid rgpa(0,0,0, 0.125);\n    border-top-width: 0,\n    &:first-child{\n        border-top-width: 1px;\n    }\n\n    &:first-child{\n        border-top-left-radius: 0.25rem;\n        border-top-right-radius: 0.25rem;\n    }\n\n    &:last-child{\n        border-bottom-right-radius: 0.25rem;\n        border-bottom-left-radius: 0.25rem; \n    }\n\n`; \n\nexport const ListItemWithLink = styled.li`\n  display: block;\n  > a {\n    display: block;\n    background-color: #fff;\n    padding: 3rem 5rem;\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-top-width: 0;\n    &:hover {\n      color: #fff;\n      background-color: #bababa;\n      border-color: #bababa;\n      cursor: pointer;\n    }\n  }\n  &:first-of-type {\n    a {\n      border-top-width: 1px;\n      border-top-left-radius: 0.25rem;\n      border-top-right-radius: 0.25rem;\n    }\n  }\n  &:last-of-type {\n    a {\n      border-bottom-right-radius: 0.25rem;\n      border-bottom-left-radius: 0.25rem;\n    }\n  }\n`;","\n\nimport styled from \"@emotion/styled\";\n\nexport const Input = styled.input`\n  height: calc(1.5em + 1rem + 2px);\n  padding: 0.5rem 1rem;\n  margin: 2rem 0;\n  font-size: 2.4rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n  display: block;\n  width: 100%;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n`;\n\nexport const Button = styled.button`\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n  display: inline-block;\n  text-align: center;\n  vertical-align: middle;\n  border: 1px solid transparent;\n  padding: 0.5rem 1rem;\n  font-size: 2rem;\n  line-height: 1.5;\n  height: calc(1.5em + 1rem + 8px);\n  border-radius: 0.25rem;\n  user-select: none;\n  &:hover {\n    cursor: pointer;\n    background-color: #0069d9;\n    border-color: #0062cc;\n  }\n  &:active {\n    background-color: #0062cc;\n    border-color: #005cbf;\n  }\n`;\n","import React from \"react\";\nimport styled from '@emotion/styled';\nimport { Input, Button} from './shared/Form';\n\nconst SearchForm = styled.div \n`\n    display: flex;\n    align-items: center;\n    > button {\n        margin-left: 1rem;\n    }\n`;\n\nconst Search = ({ inputVal, onChange, onSubmit, buttonText}) => {\n    return (\n        <SearchForm>\n            <Input value = {inputVal} onChange = {onChange} />\n            <Button onClick = {onSubmit}>{buttonText || \"Submit\"}</Button>\n        </SearchForm>\n    );\n};\nexport default Search; ","import React, {Component} from 'react';\n\nclass List2 extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfiltered: []\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\t\n\tcomponentDidMount() {\n    this.setState({\n      filtered: this.props.items\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      filtered: nextProps.items\n    });\n  }\n\t\n\thandleChange(e) {\n\t\t// Variable to hold the original version of the list\n    let currentList = [];\n\t\t// Variable to hold the filtered list before putting into state\n    let newList = [];\n\t\t\n\t\t// If the search bar isn't empty\n    if (e.target.value !== \"\") {\n\t\t\t// Assign the original list to currentList\n      currentList = this.props.items;\n\t\t\t\n\t\t\t// Use .filter() to determine which items should be displayed\n\t\t\t// based on the search terms\n      newList = currentList.filter(item => {\n\t\t\t\t// change current item to lowercase\n\t\tconst lc = item.toLowerCase();\n\t\t//const lc = \"hello\"; \n\t\t\t\t// change search term to lowercase\n\t\tconst filter = e.target.value.toLowerCase();\n\t\t//const filter = e.target.value; \n\t\t\t\t// check to see if the current list item includes the search term\n\t\t\t\t// If it does, it will be added to newList. Using lowercase eliminates\n\t\t\t\t// issues with capitalization in search terms and search content\n\t\treturn lc.includes(filter);\n\t\t//return lc; \n      });\n    } else {\n\t\t\t// If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    }\n\t\t// Set the filtered state based on what our rules added to newList\n    this.setState({\n      filtered: newList\n    });\n  }\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search..in customer added\" />\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.filtered.map(item => (\n\t\t\t\t\t\t\t<li key={item}>\n\t\t\t\t\t\t\t\t{item} &nbsp;\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName=\"delete\"\n\t\t\t\t\t\t\t\t\tonClick={() => this.props.delete(item)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default List2","import React, {Component} from 'react';\n// import axios from 'axios';\n\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'; \nimport List2 from './List2'; \n\n//import { render } from 'react-dom';\n\n\nconst client = new ApolloClient(\n    {\n      cache: new InMemoryCache(),\n      link: new HttpLink({\n        uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n      })\n    }\n  ); \n\n// const app = require('express'); \n\nclass Form2 extends React.Component {\n    \n\nconstructor(props)\n{\n    super(props)\n    this.state = \n    {\n        list: \n        [\n        ]\n    }\n\n    \n\n    this.addItem = this.addItem.bind(this)\n\n}\n\naddItem(e) {\n  // Prevent button click from submitting form\n  e.preventDefault();\n\n  // Create variables for our list, the item to add, and our form\n  let list = this.state.list;\n  const newItem = document.getElementById(\"addInput\");\n  const form = document.getElementById(\"addItemForm\");\n  \n\n\n\n\n  // If our input has a value\n  if (newItem.value != \"\") {\n    // Add the new item to the end of our list array\n    list.push(newItem.value);\n    // Then we use that to set the state for list\n    this.setState({\n      list: list\n    });\n    // Finally, we need to reset the form\n    newItem.classList.remove(\"is-danger\");\n    form.reset();\n  } else {\n    // If the input doesn't have a value, make the border red since it's required\n    newItem.classList.add(\"is-danger\");\n  }\n}\n\n\n\n\n\n\nrender() {\n    return (\n      <div className=\"content\">\n        <div className=\"container\">\n          <section className=\"section\">\n          <List2 items={this.state.list} delete={this.removeItem} />\n          </section>\n          <hr />\n    <section className=\"section\">\n      <form className=\"form\" id=\"addItemForm\">\n        <input type=\"text\" className=\"input\" id=\"addInput\" placeholder=\"How's the crowd, parking, etc?\" />\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Note\n        </button>\n      </form>\n      {/* <form className = \"form\" id = \"addItemForm\">\n        <input type = \"text\" className = \"input\" id=\"addInput\" placeholder=\"Address\"/>\n        <button className=\"button is-info\" onClick={this.addItem}>\n          Add Address\n        </button>\n      </form> */}\n    </section>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Form2\n\n// class Form2 extends React.Component {\n//   // initialize our state\n//   state = {\n//     data: [],\n//     id: 0,\n//     message: null,\n//     intervalIsSet: false,\n//     idToDelete: null,\n//     idToUpdate: null,\n//     objectToUpdate: null,\n//   };\n\n// //   const App3 = () => {\n\n// //   // export default App3(\n// //   //   {\n// //   //     state = {\n// //   //       data: [],\n// //   //       id: 0,\n// //   //       message: null,\n// //   //       intervalIsSet: false,\n// //   //       idToDelete: null,\n// //   //       idToUpdate: null,\n// //   //       objectToUpdate: null,\n// //   //     }\n// //   //   }\n// //   // ); \n\n// //   // const App3  =  \n// //   //   `\n// //   //   state = {\n// //   //     data: [],\n// //   //     id: 0,\n// //   //     message: null,\n// //   //     intervalIsSet: false,\n// //   //     idToDelete: null,\n// //   //     idToUpdate: null,\n// //   //     objectToUpdate: null,\n// //   //     `; \n  \n\n// //   // when component mounts, first thing it does is fetch all existing data in our db\n// //   // then we incorporate a polling logic so that we can easily see if our db has\n// //   // changed and implement those changes into our UI\n//   componentDidMount() {\n//     this.getDataFromDb();\n//     if (!this.state.intervalIsSet) {\n//       let interval = setInterval(this.getDataFromDb, 1000);\n//       this.setState({ intervalIsSet: interval });\n//     }\n//   }\n\n// //   // never let a process live forever\n// //   // always kill a process everytime we are done using it\n//   componentWillUnmount() {\n//     if (this.state.intervalIsSet) {\n//       clearInterval(this.state.intervalIsSet);\n//       this.setState({ intervalIsSet: null });\n//     }\n//   }\n\n// //   // just a note, here, in the front end, we use the id key of our data object\n// //   // in order to identify which we want to Update or delete.\n// //   // for our back end, we use the object id assigned by MongoDB to modify\n// //   // data base entries\n\n// //   // our first get method that uses our backend api to\n// //   // fetch data from our data base\n//   getDataFromDb = () => {\n//     fetch('http://localhost:3001/api/getData')\n//       .then((data) => data.json())\n//       .then((res) => this.setState({ data: res.data }));\n//   };\n\n// //   // // // our put method that uses our backend api\n// //   // // // to create new query into our data base\n//   putDataToDB = (message) => {\n//     let currentIds = this.state.data.map((data) => data.id);\n//     let idToBeAdded = 0;\n//     while (currentIds.includes(idToBeAdded)) {\n//       ++idToBeAdded;\n//     }\n\n//     axios.post('http://localhost:3001/api/putData', {\n//       id: idToBeAdded,\n//       message: message,\n//     });\n//   };\n\n// //   // our delete method that uses our backend api\n// //   // to remove existing database information\n//   deleteFromDB = (idTodelete) => {\n//     parseInt(idTodelete);\n//     let objIdToDelete = null;\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idTodelete) {\n//         objIdToDelete = dat._id;\n//       }\n//     });\n\n//     axios.delete('http://localhost:3001/api/deleteData', {\n//       data: {\n//         id: objIdToDelete,\n//       },\n//     });\n//   };\n\n// //   // our update method that uses our backend api\n// //   // to overwrite existing data base information\n//   updateDB = (idToUpdate, updateToApply) => {\n//     let objIdToUpdate = null;\n//     parseInt(idToUpdate);\n//     this.state.data.forEach((dat) => {\n//       if (dat.id == idToUpdate) {\n//         objIdToUpdate = dat._id;\n//       }\n//     });\n\n//     axios.post('http://localhost:3001/api/updateData', {\n//       id: objIdToUpdate,\n//       update: { message: updateToApply },\n//     });\n//   };\n\n// //   // here is our UI\n// //   // it is easy to understand their functions when you\n// //   // see them render into our screen\n//   render() {\n//     const { data } = this.state;\n//     return (\n//       <div>\n//         <ul>\n//           {data.length <= 0\n//             ? 'NO DB ENTRIES YET'\n//             : data.map((dat) => (\n//                 <li style={{ padding: '10px' }} key={data.message}>\n//                   <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n//                   <span style={{ color: 'gray' }}> data: </span>\n//                   {dat.message}\n//                 </li>\n//               ))}\n//         </ul>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             onChange={(e) => this.setState({ message: e.target.value })}\n//             placeholder=\"add something in the database\"\n//             style={{ width: '200px' }}\n//           />\n//           <button onClick={() => this.putDataToDB(this.state.message)}>\n//             ADD\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToDelete: e.target.value })}\n//             placeholder=\"put id of item to delete here\"\n//           />\n//           <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n//             DELETE\n//           </button>\n//         </div>\n//         <div style={{ padding: '10px' }}>\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n//             placeholder=\"id of item to update here\"\n//           />\n//           <input\n//             type=\"text\"\n//             style={{ width: '200px' }}\n//             onChange={(e) => this.setState({ updateToApply: e.target.value })}\n//             placeholder=\"put new value of the item here\"\n//           />\n//           <button\n//             onClick={() =>\n//               this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n//             }\n//           >\n//             UPDATE\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Form2","import React, {useState} from 'react';\nimport {useMutation, gql, useSubscription, useLazyQuery} from '@apollo/client';\nimport {useQuery} from '@apollo/client'; \n// import {useSubscription} from '@apollo/client'; \nimport {List, ListItem} from './shared/List';\nimport Search2 from './Search2'; \nimport Form2 from './Form2';\nimport axios from 'axios';\n\n\n\n\n\nconst IHATECODE = gql \n`\n\nquery MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n   `;\n\n   const data =  new Array()\n\n// const GRO = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// }\n// `\n\nconst componentDidMount = () => {\n  this.getDataFromDb();\n  if (!this.state.intervalIsSet) {\n    let interval = setInterval(this.getDataFromDb, 1000);\n    this.setState({ intervalIsSet: interval });\n  }\n}\nconst  componentWillUnmount = () => {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({ intervalIsSet: null });\n      }\n}\nconst  getDataFromDb = () => {\n          fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n        };\nconst putDataToDB = (message) => {\n  let currentIds = this.state.data.map((data) => data.id);\n  let idToBeAdded = 0;\n  while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\naxios.post('http://localhost:3001/api/putData', {\n    id: idToBeAdded,\n    message: message,\n   });\n  };\n\n\n\n\n\n\n\n\n\n\n\nconst Groceries = ({\n    match: {\n      params: { id },\n    },\n  }) => {\n    const {loading, error, data} = useQuery(IHATECODE, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO, {variables: {id}}); \n    // const {loading, error, data} = useSubscription(GRO); \n\n\n\n    const [inputVal, setInputVal] = useState(\"\"); \n    if (loading) return <p>Loading ...</p>;\n    if (error) return <p>Error :(</p>;\n\n\n    const { name, address, finrevs } = data.grocery_by_pk;\n\n    return (\n        <div>\n          <h3>\n            {name} {address}\n          </h3>\n          {/* <Form2></Form2> */}\n          <addReview></addReview>\n\n          <Search2\n            inputVal = {inputVal}\n            onChange = {(e) => setInputVal(e.target.value)}\n            onSubmit = {() => {}}\n            buttonText = \"Submit\"\n            />\n          <List>\n            {finrevs.map((finrevs) => (\n              <ListItem key={finrevs.id}>{finrevs.body}</ListItem>\n            ))}\n          </List>\n          <Form2/>\n\n\n          <div>\n      \n        {/* <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            // onChange={(e) => this.setState({ message: e.target.value })}\n            \n            onChange= { (e) => this.setState({message: e.target.value})}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div> */}\n        \n        \n            </div>\n        </div>\n      );\n    };\n\nexport default Groceries;","import styled from '@emotion/styled';\n\nexport const Badge = styled.span `\n    display: inline-block;\n    padding: 0.5rem 1 rem;\n    font-size: 1.6rem;\n    font-weight: 600;\n    line-heigh: 1,\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    border-radius: 0.25rem;\n    color #fff;\n    background-color: #17a2b8;\n`;","import React from 'react';\nimport {useQuery, gql} from '@apollo/client';\nimport {Badge} from './shared/Badge';\nimport { Link } from \"react-router-dom\";\nimport { List, ListItem, ListItemWithLink } from \"./shared/List\";\n\n// const GROCERY = gql`\n\n// query GroceryQuery($id: String!) {\n//     grocery_by_pk(id: $id) {\n//       address\n//       alias\n//       id\n//       name\n//       finrevs {\n//         body\n//         grid\n//       }\n//     }\n// }\n   \n// `; \n\nconst GROCERY = gql` \n{\n  grocery {\n    address\n    id\n    name\n    alias\n    display_phone\n  }\n}\n\n  \n`;\n\n\n\n\n\n\nconst Grocery = ({ newGrocery }) => {\n  // export default function Grocery(){\n  const { loading, error, data } = useQuery(GROCERY);\n  // const { loading, error, data } = useQuery(BUSINESS);\n\n  const renderGrocery = (grocery) => {\n    return grocery.map(({ id, name, address }) => (\n      <ListItemWithLink key={id}>\n        <Link to={`/grocery/${id}`}>\n          {name} <Badge>{address}</Badge>\n        </Link>\n      </ListItemWithLink>\n    ));\n  };\n\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return <List>{renderGrocery(newGrocery || data.grocery)}</List>;\n\n\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n    // return data.businesses3.map(({alias, id, name}) => (\n    //     <div key = {id}>\n    //         <p>\n    //             {name} | {alias}\n    //         </p>\n    //     </div>\n    // )); \n    \n  \n    // return(\n    //     <List>\n    //         {data.grocery.map(({id, name, address}) => (\n    //             <ListItem key = {id}>\n    //                 {name} <Badge>{address}</Badge>\n    //             </ListItem>\n    //         ))}\n    //     </List>\n    // );\n\n// const Grocery = () => {\n//     const {loading, error, data} = useQuery(GROCERY);\n\n//     if(loading) return <p>Loading...</p>;\n//     if(error)  return <p>Error!</p>;\n\n//     return data.grocery_by_pk.map(({grid, body}) => (\n//         <div key = {grid}>\n//             <p>\n//                 {grid}\n//             </p>\n//         </div>\n//     ))}; \n\n\n\n    // return(\n    //     <List>\n    //         {data.grocery.map(({id, name, address}) => (\n    //             <ListItem key = {id}>\n    //                 {name} <Badge>{address}</Badge>\n    //             </ListItem>\n    //         ))}\n    //     </List>\n    // );\n \n\n            \n    \n// const Grocery = ({\n//     match: {\n//       params: { id },\n//     },\n//   }) => {\n//     const { loading, error, data } = useQuery(GROCERY, {\n//       variables: { id },\n//     });\n  \n//     if (loading) return <p>Loading ...</p>;\n//     if (error) return <p>Error :(</p>;\n  \n//     const { name, address, finrevs } = data.grocery_by_pk;\n  \n//     return (\n//       <div>\n//         <h3>\n//           {name} <Badge>{address}</Badge>\n//         </h3>\n//         <List>\n//           {finrevs.map((finrevs) => (\n//             <ListItem key={finrevs.grid}>{finrevs.body}</ListItem>\n//           ))}\n//         </List>\n//       </div>\n//     );\n//   };\n}\n  export default Grocery;","import React, { useState } from \"react\";\nimport { useLazyQuery, gql, useSubscription } from \"@apollo/client\";\n//import Search from \"./Search\";\nimport Grocery from \"./Components/Grocery\"; \nimport Search2 from \"./Components/Search2\";\nimport Form2 from './Components/Form2';\n\n\n\nconst SEARCH = gql`\nquery MyQuery($id: String!) {\n  grocery_by_pk(id: $id) {\n    address\n    name\n    id\n    finrevs {\n      body\n      grid\n    }\n  }\n}\n\n`;\n\n// const SEARCH = gql `\n// subscription MySubscription($id: String!) {\n//   grocery_by_pk(id: $id) {\n//     address\n//     alias\n//     display_phone\n//     id\n//     name\n//     finrevs {\n//       body\n//       grid\n//     }\n//   }\n// `; \n\n//   query Search($match: String) {\n//     grocery(order_by: { name: asc }, where: { name: { _ilike: $match } }) {\n//       name\n//       alias\n//       id\n//     }\n//   }\n\nconst GrocerySearch = () => {\n  \n  const [inputVal, setInputVal] = useState(\"\");\n  const [search, { loading, error, data }] = useLazyQuery(SEARCH);\n  if (loading) return <p>Loading ...</p>;\n  if (error) return <p>Error :(</p>;\n\n    return (\n      <div>\n        {/* <Form2></Form2> */}\n        <addReview></addReview>\n        <Search2\n          inputVal={inputVal}\n          onChange={(e) => setInputVal(e.target.value)}\n          onSubmit={() => search({ variables: { match: `%${inputVal}%` } })}\n        />\n        <Grocery newGrocery={data ? data.grocery : null} />\n      </div>\n    );\n  };\n\nexport default GrocerySearch;\n\n","import React, {Component} from 'react'; \nconst MongoClient = require('mongodb').MongoClient;\nconst uri = 'mongodb+srv://shambhavir:s8uxeaQZcw@S-Px@cluster0-xrzxq.mongodb.net/test?authSource=admin&replicaSet=Cluster0-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true'; \n// MongoClient.connect('mongodb+srv://shambhavir:s8uxeaQZcw@S-Px@cluster0-xrzxq.mongodb.net/test?authSource=admin&replicaSet=Cluster0-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true', {useUnifiedTopology: true})\n\n\n// MongoClient.connect(uri, { useNewUrlParser: true }, function(err, client) {\n\n//   if (err) {\n\n//         //error\n\n//   } else {\n\n//         var collection = client.db('test').collection('devices');\n//         collection.update(); \n//         //client.close() should be called after you are done performing actions such as collection.update, etc.\n\n//   }\n// });\n\n\nclass MyForm extends React.Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  \n  \n      handleSubmit(event) {\n        event.preventDefault();\n        const data = new FormData(event.target);\n\n\n        // MongoClient.connect(uri, { useNewUrlParser: true }, function(err, client) {\n        //   var collection = client.db('test').collection('devices');\n        //   collection.update(); \n        // }); \n      \n        // const db = data.db('reviews'); \n        fetch('/api/form-submit-url', {\n          method: 'POST',\n          body: data,\n         \n        });\n      }\n      \n\n\n  \n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"username\">Enter username</label>\n        <input id=\"username\" name=\"username\" type=\"text\" />\n\n        {/* <label htmlFor=\"email\">Enter your email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" /> */}\n\n        <label htmlFor=\"birthdate\">Enter your birth date</label>\n        <input id=\"birthdate\" name=\"birthdate\" type=\"text\" />\n\n        <button>Send data!</button>\n      </form>\n    );\n  }\n}\nexport default MyForm; ","import React, { Component } from 'react';\n\nclass AppFront extends Component {\n    state = {\n      response: '',\n      post: '',\n      responseToPost: '',\n    };\n    \n    componentDidMount() {\n      this.callApi()\n        .then(res => this.setState({ response: res.express }))\n        .catch(err => console.log(err));\n    }\n    \n    callApi = async () => {\n      const response = await fetch('/api/hello');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      \n      return body;\n    };\n    \n    handleSubmit = async e => {\n      e.preventDefault();\n      const response = await fetch('/api/world', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ post: this.state.post }),\n      });\n      const body = await response.text();\n      \n      this.setState({ responseToPost: body });\n    };\n    \n  render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n          </header>\n          <p>{this.state.response}</p>\n          <form onSubmit={this.handleSubmit}>\n            <p>\n              <strong>Post to Server:</strong>\n            </p>\n            <input\n              type=\"text\"\n              value={this.state.post}\n              onChange={e => this.setState({ post: e.target.value })}\n            />\n            <button type=\"submit\">Submit</button>\n          </form>\n          <p>{this.state.responseToPost}</p>\n        </div>\n      );\n    }\n  }\n  \n  export default AppFront; ","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache,split } from '@apollo/client'; \nimport {getMainDefinition} from '@apollo/client/utilities'; \nimport {WebSocketLink} from '@apollo/link-ws'; \nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Groceries from './Components/Groceries'; \nimport GrocerySearch2 from './GrocerySearch2'; \nimport axios from 'axios';\nimport bt from './bt'; \nimport App from './App'; \nimport AppFront from './AppFront'; \n// import server from './server'; \n\n// import App3 from './test6/my-app/src2';\n\n//import { render } from 'ejs';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// const httpLink = new HttpLink({\n//   uri: \"https://crowdburst.herokuapp.com/v1/graph1l\", \n// }); \n\n// const wsLink = new WebSocketLink({\n//   uri: `ws://crowdbusrt.herokuapp.com/v1/graphql`,\n//   options: {\n//     reconnect: true, \n//   }\n// }); \n\n// const splitLink = split (\n//   ({query}) => {\n//     const definition = getMainDefinition(query);\n//     return(\n//       definition.kind === \"OperationDefinition\" && \n//       definition.operation === \"subscription\"\n//     ); \n//   },\n//   wsLink,\n//   httpLink\n// ); \n\n// const client = new ApolloClient(\n//   {\n//     cache: new InMemoryCache(),\n//     link: splitLink,\n//   }\n// ); \n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://crowdburst.herokuapp.com/v1/graphql',\n  })\n}); \n// const data = new Array()\n\n\n      const data =  new Array()\n      // const id = 0\n      // const message = null\n      // const intervalIsSet = false\n      // const idToDelete = null\n      // const idToUpdate = null\n      // const objectToUpdate = null\n  \n\n     \n\nconst App2 = () => (\n  \n  \n\n<BrowserRouter>\n  <ApolloProvider client = {client}>\n    {/* <div>\n      <h2>My first React App</h2>\n    </div> */}\n\n    {/* <Grocery/> */}\n    {/* <App3/> */}\n\n    <App/>\n    <AppFront/>\n    {/* <server/> */}\n  <Switch> \n        <Route path=\"/grocery/:id\" component={Groceries} />\n        <Route path=\"/\" component={GrocerySearch2} />\n  </Switch> \n  </ApolloProvider>\n  </BrowserRouter>\n); \n\n\n\n// ReactDOM.render(<App2 />, document.getElementById('root'))\nReactDOM.render(<App2/>, document.getElementById('root')); \n// requireServiceWorker(); \n\n// render(<App2/>, document.getElementById('root')); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}